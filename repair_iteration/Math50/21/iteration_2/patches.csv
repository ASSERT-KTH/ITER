bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  f1  =  fy;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  fy;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  fy;	  f1    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2	[BUG]  [BUGGY]  if  (FastMath.abs(x1)>  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)>  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)>  MAX_SIDE)  {	  if    (FastMath.abs(f1)>    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if  (f1.abs(f1)>  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)>  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)>  MAX_SIDE)  {	  if    (FastMath.abs(f1)>    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  absoluteAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  absoluteAccuracy)  {	  if    (FastMath.abs(f1)    <    =    absoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
5	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  absoluteAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  absoluteAccuracy)  {	  if    (FastMath.abs(f1)    <    =    absoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
6	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  absoluteAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  absoluteAccuracy)  {	  if    (FastMath.abs(f1)    <    =    absoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
7	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  >=  absoluteAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  >=  absoluteAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  >=  absoluteAccuracy)  {	  if    (FastMath.abs(f1)    <    =    absoluteAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
8	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  MAX_SIDE)  {	  if    (FastMath.abs(x1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  MAX_SIDE  <  =  inverted)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  MAX_SIDE  <  =  inverted)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  MAX_SIDE  ||  MAX_SIDE  <  =  inverted)  {	  if    (FastMath.abs(x1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  x0  =  x;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x0  =  x;  f1  =  fx;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  x;  f1  =  fx;	  x0    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  f0  =  fx;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  fx;  f1  =  fx;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fx;  f1  =  fx;	  x0    =    fx;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
12	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  fx)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  =  fx)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  fx)  {  return  x0;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
13	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  ==  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  ==  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  ==  ftol)  {  return  x0;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
14	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
15	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  ftol)  {  return  x0;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
16	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
17	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
19	[BUG]  [BUGGY]  if  (f0.abs(f1)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f0.abs(f1)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f0.abs(f1)  ==  f1  &&  ftol.abs(f1)  <  =  ftol)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
20	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  f0  &&  ftol.abs(f1)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  f0  &&  ftol.abs(f1)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  f0  &&  ftol.abs(f1)  <  =  ftol)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
21	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  f1  &&  ftol.abs(f0)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
22	[BUG]  [BUGGY]  f0  =  fy;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  fy;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fy;	  f0    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
23	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
24	[BUG]  [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
25	[BUG]  [BUGGY]  x0  =  x;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x0  =  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  x;	  x0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
26	[BUG]  [BUGGY]  x0  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x0  =  fx  +  1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  fx  +  1;	  x0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
27	[BUG]  [BUGGY]  x0  =  f1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x0  =  f1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  f1;	  x0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
28	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f0)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f0)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f0)  <  =  ftol)  {  return  x1;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  f0)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  f0)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  f0)  {  return  x1;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(fTol!=    null)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
31	[BUG]  [BUGGY]  f0  =  Math.max(max,  f0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(max,  f0);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(max,  f0);	  f0    =    Math.max(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
32	[BUG]  [BUGGY]  f0  =  Math.max(max,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(max,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(max,  f1);	  f0    =    Math.max(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  f0  =  Math.max(FastMath.abs(f1),  max);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(FastMath.abs(f1),  max);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(FastMath.abs(f1),  max);	  f0    =    Math.max(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
35	[BUG]  [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
36	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  f0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  f0)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  f0)  {	  if    (FastMath.abs(f1)    <    =    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
37	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  f0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  f0)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  f0)  {	  if    (FastMath.abs(f1)    <    =    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
38	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  max)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  max)  {	  if    (FastMath.abs(f1)    <    =    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
39	[BUG]  [BUGGY]  if  (FastMath.abs(x1)>  Math.abs(fx))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)>  Math.abs(fx))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)>  Math.abs(fx))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
40	[BUG]  [BUGGY]  if  (FastMath.abs(f0)>  Math.abs(fx))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)>  Math.abs(fx))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)>  Math.abs(fx))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
41	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(x1))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(x1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  Math.abs(x1))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
42	[BUG]  [BUGGY]  if  (fx.abs(f1)>  Math.abs(f1))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (fx.abs(f1)>  Math.abs(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (fx.abs(f1)>  Math.abs(f1))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
43	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  ==  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  ==  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  ==  ftol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
44	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  fx)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  =  fx)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  fx)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  =  allowedSolution)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
46	[BUG]  [BUGGY]  AllowedSolution.abs(f0)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f0)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f0)  <  =  ftol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
47	[BUG]  [BUGGY]  if  (f1.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
48	[BUG]  [BUGGY]  if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
49	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f2.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f2.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f2.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
50	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
51	[BUG]  [BUGGY]  f1  =  x  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  x  +  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  x  +  1;	  f1    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
52	[BUG]  [BUGGY]  f1  =  fx  +  2;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  fx  +  2;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  fx  +  2;	  f1    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
53	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  fTol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
54	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
55	[BUG]  [BUGGY]  if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
56	[BUG]  [BUGGY]  if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  fTol)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
57	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  >=  ftol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)  >=  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  >=  ftol)  {	  if    (FastMath.abs(f1)    >=    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
58	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f0);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  f0);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
59	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  fx);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  fx);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
60	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  ftol);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  ftol);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  ftol);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
61	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  max;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  max;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  max;	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
62	[BUG]  [BUGGY]  f1  =  Math.max(f1,  f0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(f1,  f0);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(f1,  f0);	  f1    =    Math.max(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  f0  =  Math.max(F0,  max);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(F0,  max);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(F0,  max);	  f0    =    Math.max(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
64	[BUG]  [BUGGY]  f0  =  Math.max(F0,  f1,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(F0,  f1,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(F0,  f1,  f1);	  f0    =    Math.max(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
65	[BUG]  [BUGGY]  f0  =  x  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  x  +  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  x  +  1;	  f0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
66	[BUG]  [BUGGY]  f0  =  f1  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  f1  +  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  f1  +  1;	  f0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
67	[BUG]  [BUGGY]  f0  =  fx  +  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  fx  +  2;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fx  +  2;	  f0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
68	[BUG]  [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
69	[BUG]  [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
70	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
71	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
72	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
73	[BUG]  [BUGGY]  if(f1!=  null)  {  if  (!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if  (!inverted)  {  return  x0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if  (!inverted)  {  return  x0;  }	  if(allowed)    {    if    (!inverted)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
74	[BUG]  [BUGGY]  if(f1  ==  null)  {  if  (!inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if  (!inverted)  {  return  x0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if  (!inverted)  {  return  x0;  }	  if(allowed)    {    if    (!inverted)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
75	[BUG]  [BUGGY]  x1  =  fx;  f1  =  f0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  fx;  f1  =  f0;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  fx;  f1  =  f0;	  x1    =    f0;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  x1  =  f0;  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  f0;  f1  =  ftol;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  f0;  f1  =  ftol;	  x1    =    f0;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  f1  =  Math.min(f2,  f1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.min(f2,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.min(f2,  f1);	  f1    =    Math.min(f1,    f2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
78	[BUG]  [BUGGY]  if(!inverted)  {  return  f1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(!inverted)  {  return  f1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!inverted)  {  return  f1;  }	  if(!inverted)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
79	[BUG]  [BUGGY]  if(!allowed)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(!allowed)  {  return  x0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!allowed)  {  return  x0;  }	  if(!inverted)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
80	[BUG]  [BUGGY]  if  (f1.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
81	[BUG]  [BUGGY]  if  (FastMath.abs(x1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)>  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)>  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
82	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  inverted)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  inverted)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  inverted)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
83	[BUG]  [BUGGY]  if  (FastMath.abs(f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(x1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
84	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  DEFAULT_ABSOLUTE_ACCURACY  ||  FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  DEFAULT_ABSOLUTE_ACCURACY  ||  FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  DEFAULT_ABSOLUTE_ACCURACY  ||  FastMath.abs(x1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(x1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
85	[BUG]  [BUGGY]  f1  =  x0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  x0;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  x0;	  f1    =    x;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
86	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  allowedSolution)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  return  x1;  }	  if(FastMath.abs(f1)    <    =    allowedSolution)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
87	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(FastMath.abs(f1)    <    =    allowedSolution)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
88	[BUG]  [BUGGY]  if(FastMath.abs(f0)  <  =  allowedSolution)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f0)  <  =  allowedSolution)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f0)  <  =  allowedSolution)  {  return  x1;  }	  if(FastMath.abs(f1)    <    =    allowedSolution)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
89	[BUG]  [BUGGY]  if(f1  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
90	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
91	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  ==  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  ==  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  ==  fTol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
92	[BUG]  [BUGGY]  AllowedSolution.abs(f0)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f0)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f0)  <  =  fTol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
93	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
94	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
95	[BUG]  [BUGGY]  x1  =  x;  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  x;  f1  =  ftol;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  x;  f1  =  ftol;	  x1    =    fx;    f1    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
96	[BUG]  [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }	  if(f0!=    null)    {    x1    =    fx;    f1    =    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
97	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  ==  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  ==  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  ==  MAX_SIDE)  {	  if    (FastMath.abs(f1)    ==    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
98	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  max)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  max)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  max)  {	  if    (FastMath.abs(f1)>    max)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
99	[BUG]  [BUGGY]  if  (f1.abs(f1)>  max)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)>  max)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)>  max)  {	  if    (FastMath.abs(f1)>    max)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
100	[BUG]  [BUGGY]  if(f0!=  null)  {  if(!inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  if(!inverted)  {  return  f0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(!inverted)  {  return  f0;  }	  if(allowed)    {    if    (!inverted)    {    return    f0;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
101	[BUG]  [BUGGY]  if(f1!=  null)  {  if  (!inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if  (!inverted)  {  return  f0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if  (!inverted)  {  return  f0;  }	  if(allowed)    {    if    (!inverted)    {    return    f0;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
102	[BUG]  [BUGGY]  if(!inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(!inverted)  {  return  f0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!inverted)  {  return  f0;  }	  if(allowed)    {    if    (!inverted)    {    return    f0;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
103	[BUG]  [BUGGY]  if(inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(inverted)  {  return  f0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(inverted)  {  return  f0;  }	  if(allowed)    {    if    (!inverted)    {    return    f0;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
104	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    Math.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
105	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    Math.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
106	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    Math.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
107	[BUG]  [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
108	[BUG]  [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
109	[BUG]  [BUGGY]  x1  =  0;  f1  =  fx;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  0;  f1  =  fx;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  0;  f1  =  fx;	  x1    =    x;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
110	[BUG]  [BUGGY]  x1  =  fx;  f1  =  f1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  fx;  f1  =  f1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  fx;  f1  =  f1;	  x1    =    x;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)/  2;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/  2;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
112	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)/  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/  1;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
113	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/  4;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)/  4;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/  4;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
114	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/  3;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)/  3;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/  3;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
115	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  ==  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    ==    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
116	[BUG]  [BUGGY]  f0  =  x1;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  x1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  x1;	  f0    =    x;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
117	[BUG]  [BUGGY]  f0  =  Math.min(max,  f0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(max,  f0);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(max,  f0);	  f0    =    Math.min(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
118	[BUG]  [BUGGY]  f0  =  Math.min(max,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(max,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(max,  f1);	  f0    =    Math.min(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
119	[BUG]  [BUGGY]  f0  =  Math.min(FastMath.abs(f1),  max);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(FastMath.abs(f1),  max);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(FastMath.abs(f1),  max);	  f0    =    Math.min(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
120	[BUG]  [BUGGY]  f0  =  Math.max(x1,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(x1,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(x1,  f1);	  f0    =    Math.max(f1,    f1);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
121	[BUG]  [BUGGY]  f1  =  Math.abs(x1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(x1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(x1);	  f1    =    Math.abs(f0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
122	[BUG]  [BUGGY]  if  (FastMath.abs(f0)>  fx)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)>  fx)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)>  fx)  {	  if    (FastMath.abs(f0)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
123	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
124	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
125	[BUG]  [BUGGY]  if  (f1.abs(x1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(x1)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(x1)  <  =  MAX_SIDE)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
126	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  MAX_SIDE)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
127	[BUG]  [BUGGY]  if  (f1.abs(f1)  ==  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  ==  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  ==  MAX_SIDE)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
128	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
129	[BUG]  [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
130	[BUG]  [BUGGY]  if  (FastMath.abs(fx)>  ftol)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(fx)>  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(fx)>  ftol)  {	  if    (FastMath.abs(fx)    ==    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
131	[BUG]  [BUGGY]  if  (FastMath.abs(fx)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(fx)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(fx)  <  =  ftol)  {	  if    (FastMath.abs(fx)    ==    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
132	[BUG]  [BUGGY]  if  (FastMath.abs(x)  ==  ftol)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x)  ==  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x)  ==  ftol)  {	  if    (FastMath.abs(fx)    ==    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
133	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
134	[BUG]  [BUGGY]  if(f0  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f0)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
135	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
136	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fx)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
137	[BUG]  [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  FAST_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    FAST_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
138	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  FAST_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  FAST_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  FAST_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    FAST_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
139	[BUG]  [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  inverted)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  inverted)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  <  =  inverted)  {	  if    (FastMath.abs(f1)    <    =    FAST_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
140	[BUG]  [BUGGY]  f1  =  Math.min(f1,  f0);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.min(f1,  f0);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.min(f1,  f0);	  f1    =    Math.min(f0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
141	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  fx)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  fx)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  fx)  {	  if    (FastMath.abs(f1)>    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
142	[BUG]  [BUGGY]  if  (FastMath.abs(x1)>  fx)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)>  fx)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)>  fx)  {	  if    (FastMath.abs(f1)>    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
143	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
144	[BUG]  [BUGGY]  if  (FastMath.abs(x1)  <  =  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)  <  =  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)  <  =  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
145	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  =  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  =  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  =  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
146	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
147	[BUG]  [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
148	[BUG]  [BUGGY]  x1  =  x;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  x;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  x;	  x1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
149	[BUG]  [BUGGY]  x1  =  fx  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  fx  +  1;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  fx  +  1;	  x1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
150	[BUG]  [BUGGY]  x1  =  f0;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  f0;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  f0;	  x1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
151	[BUG]  [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f0!=    null)    {    x1    =    fx;    f1    =    fx;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
152	[BUG]  [BUGGY]  if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f0!=    null)    {    x1    =    fx;    f1    =    fx;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
153	[BUG]  [BUGGY]  if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f1))  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY    ||    Double.isNaN(f1))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
154	[BUG]  [BUGGY]  if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f2))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f2))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (Double.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isNaN(f2))  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY    ||    Double.isNaN(f1))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
155	[BUG]  [BUGGY]  f1  =  Math.abs(f1)-  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)-  2;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)-  2;	  f1    =    Math.abs(f1)-    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
156	[BUG]  [BUGGY]  f1  =  Math.abs(f1)-  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)-  3;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)-  3;	  f1    =    Math.abs(f1)-    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
157	[BUG]  [BUGGY]  if  (FastMath.abs(fx)>  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(fx)>  methodValueAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(fx)>  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
158	[BUG]  [BUGGY]  if  (FastMath.abs(x1)>  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(x1)>  methodValueAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(x1)>  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
159	[BUG]  [BUGGY]  if  (!FastMath.abs(f1)&&  methodValueAccuracy.abs(f1)>  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (!FastMath.abs(f1)&&  methodValueAccuracy.abs(f1)>  methodValueAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (!FastMath.abs(f1)&&  methodValueAccuracy.abs(f1)>  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
160	[BUG]  [BUGGY]  f2  =  Math.abs(f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f2  =  Math.abs(f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f2  =  Math.abs(f1);	  f1    =    Math.abs(f2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
161	[BUG]  [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  allowedSolution)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
162	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
163	[BUG]  [BUGGY]  f1  =  Math.abs(f1)+  2;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)+  2;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)+  2;	  f1    =    Math.abs(f1)+    1;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
164	[BUG]  [BUGGY]  if(f1!=  null)  {  if(!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  if(!inverted)  {  return  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  if(!inverted)  {  return  x1;  }	  if(!inverted)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
165	[BUG]  [BUGGY]  if(!allowed)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(!allowed)  {  return  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(!allowed)  {  return  x1;  }	  if(!inverted)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
166	[BUG]  [BUGGY]  if(f1  ==  null)  {  if  (!inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  ==  null)  {  if  (!inverted)  {  return  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  ==  null)  {  if  (!inverted)  {  return  x1;  }	  if(allowed)    {    if    (!inverted)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
167	[BUG]  [BUGGY]  f0  =  Math.min(F0,  f1)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(F0,  f1)-  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(F0,  f1)-  1;	  f0    =    Math.min(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
168	[BUG]  [BUGGY]  f0  =  Math.min(F0,  f1)+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(F0,  f1)+  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(F0,  f1)+  1;	  f0    =    Math.min(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
169	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  Math.abs(fx))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  Math.abs(fx))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  Math.abs(fx))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
170	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(fx)||(f1  >  max))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  Math.abs(fx)||(f1  >  max))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  Math.abs(fx)||(f1  >  max))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
171	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  >=  fx)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  >=  fx)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  >=  fx)  {	  if    (FastMath.abs(f1)>    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
172	[BUG]  [BUGGY]  if(f1!=  null)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  return  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  return  x1;  }	  if(!inverted)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
173	[BUG]  [BUGGY]  f1  =  Math.abs(f2)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f2)+  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f2)+  1;	  f1    =    Math.abs(f2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
174	[BUG]  [BUGGY]  if(f0  ==  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  x1  =  fx;  f1  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f0!=    null)    {    x1    =    fx;    f1    =    fx;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
175	[BUG]  [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f0  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1!=  null)  {  x1  =  fx;  f0  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1!=  null)  {  x1  =  fx;  f0  =  fx;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(f0!=    null)    {    x1    =    fx;    f1    =    fx;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
176	[BUG]  [BUGGY]  if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  x1  =  x;  f1  =  fx;  }	  x1    =    x;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
177	[BUG]  [BUGGY]  if(f0  ==  null)  {  x1  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  null)  {  x1  =  x;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  x1  =  x;  f1  =  fx;  }	  x1    =    x;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
178	[BUG]  [BUGGY]  f0  =  fyl;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  fyl;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fyl;	  f0    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
179	[BUG]  [BUGGY]  f0  =  f1,  f1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  f1,  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  f1,  f1);	  f0    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
180	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  f1  &&  ftol.abs(f0)  <  =  ftol)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
181	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  f1  &&  ftol.abs(f0)  <  =  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  f1  &&  ftol.abs(f0)  <  =  ftol)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
182	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  ==  f1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)  ==  f1)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  ==  f1)  {	  if    (FastMath.abs(f1)    ==    f1    &&    ftol.abs(f0)    <    =    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
183	[BUG]  [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
184	[BUG]  [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
185	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  >  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  >  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  Math.abs(f1)  >  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    Math.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
186	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  MAX_SIDE  ||  Math.abs(f1)  <  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    Math.abs(f1)    <    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
187	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  maximumAccuracy)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  maximumAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  maximumAccuracy)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
188	[BUG]  [BUGGY]  f0  =  Math.min(f1,  max);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(f1,  max);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(f1,  max);	  f0    =    Math.min(f0,    max);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
189	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  ==  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  ==  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  MAX_SIDE  ||  FastMath.abs(f1)  ==  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
190	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  MAX_SIDE  ||  FastMath.abs(f1)  <  =  MAX_SIDE)  {	  if    (FastMath.abs(f1)    <    MAX_SIDE    ||    FastMath.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
191	[BUG]  [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
192	[BUG]  [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
193	[BUG]  [BUGGY]  if(f0  ==  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
194	[BUG]  [BUGGY]  if(f0!=  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
195	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x1;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
196	[BUG]  [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
197	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  ftol)  {  return  x2;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
198	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x0;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
199	[BUG]  [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
200	[BUG]  [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  allowedSolution)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
201	[BUG]  [BUGGY]  f1  =  Math.max(f0,  f2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(f0,  f2);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(f0,  f2);	  f1    =    Math.max(f1,    f2);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
202	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f0),  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f0),  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f0),  f1);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
203	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    FAST_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
204	[BUG]  [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FAST_ABSOLUTE_ACCURACY.abs(f1)  ==  FAST_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)    <    =    FAST_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
205	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  maximum)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  maximum)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  maximum)  {	  if    (FastMath.abs(f1)>    max)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
206	[BUG]  [BUGGY]  if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
207	[BUG]  [BUGGY]  if(f0!=  null)  {  x1  =  f0;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  x1  =  f0;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  x1  =  f0;  f1  =  fx;  }	  x1    =    f0;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
208	[BUG]  [BUGGY]  if  (f1.abs(f0)>  ftol)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f0)>  ftol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f0)>  ftol)  {	  if    (FastMath.abs(f0)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
209	[BUG]  [BUGGY]  if(f0  >=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  >=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  >=  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
210	[BUG]  [BUGGY]  f0  =  Math.abs(f1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.abs(f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.abs(f1);	  f1    =    Math.abs(f0);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
211	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
212	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
213	[BUG]  [BUGGY]  if(FastMath.abs(f1)  <  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)  <  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)  <  ftol)  {  return  x1;  }	  if(FastMath.abs(f1)    <    =    allowedSolution)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
214	[BUG]  [BUGGY]  if(f0  ==  null)  {  if  (!inverted)  {  return  f0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  null)  {  if  (!inverted)  {  return  f0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if  (!inverted)  {  return  f0;  }	  if(allowed)    {    if    (!inverted)    {    return    f0;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
215	[BUG]  [BUGGY]  if  (f1.abs(f1)  >=  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  >=  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  >=  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
216	[BUG]  [BUGGY]  if  (f1.abs(f1)!=  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)!=  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)!=  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
217	[BUG]  [BUGGY]  if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
218	[BUG]  [BUGGY]  f1  =  fl;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  fl;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  fl;	  f1    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
219	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  {  return  x0;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
220	[BUG]  [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  null)  {  if(FastMath.abs(f1)  ==  ftol)  {  return  x2;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
221	[BUG]  [BUGGY]  f1  =  Math.abs(f2)/;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f2)/;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f2)/;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
222	[BUG]  [BUGGY]  x1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x1  =  ftol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x1  =  ftol;	  x1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
223	[BUG]  [BUGGY]  if  (f1.abs(f1)  >=  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  >=  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  >=  MAX_SIDE)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
224	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f2.abs(f1)  <  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f2.abs(f1)  <  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  MAX_SIDE  ||  f2.abs(f1)  <  MAX_SIDE)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
225	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  f0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  f0)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  f0)  {	  if    (FastMath.abs(f1)    <    =    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
226	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  >=  f0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  >=  f0)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  >=  f0)  {	  if    (FastMath.abs(f1)    <    =    f0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
227	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  ==  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  ==  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  ==  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
228	[BUG]  [BUGGY]  f1  =  Math.abs(f2)-  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f2)-  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f2)-  1;	  f1    =    Math.abs(f1)-    1;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
229	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  methodValueAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
230	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  totalAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  totalAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  totalAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
231	[BUG]  [BUGGY]  f0  =  Math.max(F0,  f1  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.max(F0,  f1  -  1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.max(F0,  f1  -  1);	  f0    =    Math.max(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
232	[BUG]  [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
233	[BUG]  [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  =  f2)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  =  f2)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f1.abs(f1)  <  MAX_SIDE  ||  f1.abs(f1)  <  =  f2)  {	  if    (f1.abs(f1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
234	[BUG]  [BUGGY]  f0  =  ftol  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  ftol  +  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  ftol  +  1;	  f0    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
235	[BUG]  [BUGGY]  if(inverted)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(inverted)  {  return  x1;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(inverted)  {  return  x1;  }	  if(allowed)    {    if    (!inverted)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
236	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  f1  >  RIGHT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  f1  >  RIGHT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  f1  >  RIGHT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
237	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  Math.abs(f1)  <  =  LEFT_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  Math.abs(f1)  <  =  LEFT_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  LEFT_SIDE  ||  Math.abs(f1)  <  =  LEFT_SIDE)  {	  if    (FastMath.abs(f1)    <    =    LEFT_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
238	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  fTol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
239	[BUG]  [BUGGY]  f1  =  fx0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  fx0;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  fx0;	  f1    =    x;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
240	[BUG]  [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol  ==  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
241	[BUG]  [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  MAX_SIDE)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  MAX_SIDE)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  null)  {  if(FastMath.abs(f1)  <  =  MAX_SIDE)  {  return  x1;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
242	[BUG]  [BUGGY]  AllowedSolution.abs(f1)  <  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  AllowedSolution.abs(f1)  <  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	AllowedSolution.abs(f1)  <  ftol)  {  return  x1;  }	  AllowedSolution.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
243	[BUG]  [BUGGY]  f1  =  ftol  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  ftol  +  1;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  ftol  +  1;	  f1    =    fx    +    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
244	[BUG]  [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  ==  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
245	[BUG]  [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x0;  }	  if(fTol!=    null)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
246	[BUG]  [BUGGY]  if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }	  x1    =    f0;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
247	[BUG]  [BUGGY]  if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }  else  {  x1  =  x0;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }  else  {  x1  =  x0;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0!=  f1)  {  x1  =  f0;  f1  =  fx;  }  else  {  x1  =  x0;  f1  =  fx;  }	  x1    =    f0;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
248	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  inverted)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  MAX_SIDE  ||  inverted)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  MAX_SIDE  ||  inverted)  {	  if    (FastMath.abs(f1)>    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
249	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  max_SIDE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  max_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  max_SIDE)  {	  if    (FastMath.abs(f1)>    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
250	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
251	[BUG]  [BUGGY]  if(f0  <  =  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  fx)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
252	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
253	[BUG]  [BUGGY]  if  (FastMath.abs(fx)>  Math.abs(f1))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(fx)>  Math.abs(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(fx)>  Math.abs(f1))  {	  if    (FastMath.abs(f1)>    Math.abs(fx))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
254	[BUG]  [BUGGY]  x0  =  ftol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  x0  =  ftol;  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	x0  =  ftol;	  x0    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
255	[BUG]  [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
256	[BUG]  [BUGGY]  if(f1  <  =  fTol)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  fTol)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  fTol)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
257	[BUG]  [BUGGY]  if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol  ==  f0)  {  if(FastMath.abs(f1)  <  =  allowedSolution)  {  return  x0;  }	  if(f1    <    =    allowedSolution)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
258	[BUG]  [BUGGY]  if  (FastMath.abs(f1  <  =  MAX_SIDE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1  <  =  MAX_SIDE)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1  <  =  MAX_SIDE)  {	  if    (FastMath.abs(x1)    <    =    MAX_SIDE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
259	[BUG]  [BUGGY]  if(f1  <  =  ftol)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  ftol)  {  return  x0;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  ftol)  {  return  x0;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
260	[BUG]  [BUGGY]  if(f1  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  ftol)  {  return  x2;  }	  if(f0    ==    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
261	[BUG]  [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
262	[BUG]  [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(fTol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
263	[BUG]  [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(ftol!=  null)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x2;  }	  if(f0!=    null)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x2;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
264	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
265	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  MAX_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  MAX_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  MAX_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
266	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  >  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  >  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  DEFAULT_ABSOLUTE_ACCURACY  ||  f1  >  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
267	[BUG]  [BUGGY]  if(f0  <  =  allowedSolution)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  allowedSolution)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  allowedSolution)  {  return  x1;  }	  if(FastMath.abs(f1)    <    =    allowedSolution)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
268	[BUG]  [BUGGY]  if(FastMath.abs(f1)>  fTol)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f1)>  fTol)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f1)>  fTol)  {	  if    (FastMath.abs(f0)>    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
269	[BUG]  [BUGGY]  f2  =  Math.abs(f2);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f2  =  Math.abs(f2);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f2  =  Math.abs(f2);	  f1    =    Math.abs(f2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
270	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  method)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  method)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  method)  {	  if    (FastMath.abs(f1)>    fx)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
271	[BUG]  [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isInfinite(f1))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isInfinite(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  Double.isInfinite(f1))  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY    ||    Double.isNaN(f1))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
272	[BUG]  [BUGGY]  if  (Double.isNaN(f1)||  Double.isNaN(f1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (Double.isNaN(f1)||  Double.isNaN(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (Double.isNaN(f1)||  Double.isNaN(f1))  {	  if    (FastMath.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY    ||    Double.isNaN(f1))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
273	[BUG]  [BUGGY]  if(f0  <  =  LEFT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  LEFT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  LEFT_SIDE)  {  if(FastMath.abs(f1)  <  =  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
274	[BUG]  [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  >=  ftol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  >=  ftol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  FLOAT_SIDE)  {  if(FastMath.abs(f1)  >=  ftol)  {  return  x1;  }	  if(f0    <    =    FLOAT_SIDE)    {    if(FastMath.abs(f1)    <    =    ftol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
275	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy  ||  methodValueAccuracy  >  MAX_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy  ||  methodValueAccuracy  >  MAX_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  methodValueAccuracy  ||  methodValueAccuracy  >  MAX_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
276	[BUG]  [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy  &&  methodValueAccuracy)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f1)>  methodValueAccuracy  &&  methodValueAccuracy)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f1)>  methodValueAccuracy  &&  methodValueAccuracy)  {	  if    (FastMath.abs(f1)>    methodValueAccuracy)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
277	[BUG]  [BUGGY]  if(inverted)  {  return  x0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(inverted)  {  return  x0;  }  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(inverted)  {  return  x0;  }	  if(allowed)    {    if    (!inverted)    {    return    x0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
278	[BUG]  [BUGGY]  f0  =  Math.min(Math.abs(f1),  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  Math.min(Math.abs(f1),  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  Math.min(Math.abs(f1),  f1);	  f0    =    Math.min(F0,    f1);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
279	[BUG]  [BUGGY]  f1  =  Math.abs(f1)/  2.0;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.abs(f1)/  2.0;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.abs(f1)/  2.0;	  f1    =    Math.abs(f1)/;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
280	[BUG]  [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f0  <  =  f1)  {  if(FastMath.abs(f1)  <  =  fTol)  {  return  x1;  }	  if(f0    ==    f1)    {    if(FastMath.abs(f1)    <    =    fTol)    {    return    x1;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
281	[BUG]  [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f2);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.max(FastMath.abs(f1),  f2);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.max(FastMath.abs(f1),  f2);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
282	[BUG]  [BUGGY]  f1  =  Math.min(FastMath.abs(f1),  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f1  =  Math.min(FastMath.abs(f1),  f1);  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f1  =  Math.min(FastMath.abs(f1),  f1);	  f1    =    Math.max(FastMath.abs(f1),    f1);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
283	[BUG]  [BUGGY]  if(FastMath.abs(f0)  <  =  Math.abs(f1))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(FastMath.abs(f0)  <  =  Math.abs(f1))  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(FastMath.abs(f0)  <  =  Math.abs(f1))  {	  if    (FastMath.abs(f0)    <    ftol)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
284	[BUG]  [BUGGY]  if(f1  <  =  fx)  {  x1  =  x;  f1  =  fx;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if(f1  <  =  fx)  {  x1  =  x;  f1  =  fx;  }  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if(f1  <  =  fx)  {  x1  =  x;  f1  =  fx;  }	  x1    =    x;    f1    =    fx;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
285	[BUG]  [BUGGY]  f0  =  fx;  f1  =  ftol;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  f0  =  fx;  f1  =  ftol;  [BUGGY]      if  (FastMath.abs(f1)  <=  ftol)  {  switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	f0  =  fx;  f1  =  ftol;	  x1    =    fx;    f1    =    ftol;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
286	[BUG]  [BUGGY]  if  (FastMath.abs(f0)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (FastMath.abs(f0)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (FastMath.abs(f0)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (FastMath.abs(x1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
287	[BUG]  [BUGGY]  if  (f0  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  MathInternalError();  }  }  x1  =  x;  f1  =  fx;          [BUGGY]  if  (f0  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {  [BUGGY]      switch  (allowed)  {  case  ANY_SIDE:  return  x1;  case  LEFT_SIDE:  if  (inverted)  {  return  x1;  }  break;  case  RIGHT_SIDE:  if  (!inverted)  {  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	204	204	1	replace	if  (f0  <  =  DEFAULT_ABSOLUTE_ACCURACY  ||  f1.abs(f1)  <  =  DEFAULT_ABSOLUTE_ACCURACY)  {	  if    (f1.abs(f1)    <    =    DEFAULT_ABSOLUTE_ACCURACY)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
