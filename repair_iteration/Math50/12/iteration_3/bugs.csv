bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  f0  =  computeFunctionValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeFunctionValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeFunctionValue(x,  fx);	  final    double    f0    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  final  double  f0  =  computeFunctionValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeFunctionValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeFunctionValue(x  +  1);	  final    double    f0    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  if(x  ==  0.0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  ==  0.0)  {  return  fx;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  ==  0.0)  {  return  fx;  }	  if(fx    ==    0.0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  if(fx  <  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0.0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0.0)  {  return  x;  }	  if(fx    ==    0.0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  if(fx  <  =  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0.0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0.0)  {  return  x;  }	  if(fx    ==    0.0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  final  double  fx  =  computeFlattenedValue(x);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFlattenedValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFlattenedValue(x);	  fx    =    computeFlattenedValue(x);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
7	[BUG]  [BUGGY]  fx  =  computeFlattenedValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFlattenedValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFlattenedValue(x,  fx);	  fx    =    computeFlattenedValue(x);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
8	[BUG]  [BUGGY]  fx  =  computeLocalFunctionValue(x);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeLocalFunctionValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeLocalFunctionValue(x);	  fx    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  if(x  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  ==  0.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  ==  0.0)  {	  if(x!=    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x,  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x,  1);	  final    double    fx    =    computeIntegerValue(x,    0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
11	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x,  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x,  2);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x,  2);	  final    double    fx    =    computeIntegerValue(x,    0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
12	[BUG]  [BUGGY]  if(x  >  0.0  ||  fx  <  0.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  >  0.0  ||  fx  <  0.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  >  0.0  ||  fx  <  0.0)  {	  if(x    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  if(x  ==  0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  ==  0)  {  return  fx;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  ==  0)  {  return  fx;  }	  if(fx    ==    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  if(x  ==  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  ==  0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  ==  0)  {  return  x;  }	  if(fx    ==    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
15	[BUG]  [BUGGY]  final  double  f0  =  fx.computeObjectiveValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeObjectiveValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeObjectiveValue();  if(!inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
16	[BUG]  [BUGGY]  final  double  f0  =  fx.computeObjectiveValue(x);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeObjectiveValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeObjectiveValue(x);	  final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
17	[BUG]  [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
18	[BUG]  [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  inverted  =!inverted;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  inverted  =!inverted;  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  inverted  =!inverted;	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
19	[BUG]  [BUGGY]  fx  =  computeFillValue(x,  f1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFillValue(x,  f1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFillValue(x,  f1);	  fx    =    computeFillValue(x);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
20	[BUG]  [BUGGY]  fx  =  computeFillValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFillValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFillValue(x,  fx);	  fx    =    computeFillValue(x);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
21	[BUG]  [BUGGY]  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f1    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
22	[BUG]  [BUGGY]  if(fx  <  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f1    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
23	[BUG]  [BUGGY]  if(fx  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  if(x  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  if(fx  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  ==  0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  ==  0)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  final  double  fx  =  computeLongValue(x0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeLongValue(x0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeLongValue(x0);	  final    double    fx    =    computeLongValue(x);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
27	[BUG]  [BUGGY]  final  double  fx  =  computeIntValue(x);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntValue(x);	  final    double    fx    =    computeLongValue(x);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
28	[BUG]  [BUGGY]  final  double  f0  =  fx.computeObjectiveValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeObjectiveValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeObjectiveValue();  if(inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
29	[BUG]  [BUGGY]  final  double  f0  =  fx.computeValue(x);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeValue(x);	  final    double    f0    =    fx.computeValue();    if(inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
30	[BUG]  [BUGGY]  final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  final  double  fx  =  computeFunctionValue(x1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFunctionValue(x1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFunctionValue(x1);	  final    double    fx    =    computeFunctionValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  final  double  fx  =  computeFloatValue(x);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFloatValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFloatValue(x);	  final    double    fx    =    computeFunctionValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeObjectiveValue(x,  fx);	  final    double    fx    =    computeFunctionValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
34	[BUG]  [BUGGY]  final  double  fx  =  computeFunctionValue(x,  f0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFunctionValue(x,  f0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFunctionValue(x,  f0);	  final    double    fx    =    computeFunctionValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
35	[BUG]  [BUGGY]  final  double  fx  =  computeFunctionValue(x,  fx  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFunctionValue(x,  fx  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFunctionValue(x,  fx  +  1);	  final    double    fx    =    computeFunctionValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
36	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x1);	  final    double    fx    =    computeIntegerValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
37	[BUG]  [BUGGY]  final  double  fx  =  computeRelativeValue(x0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeRelativeValue(x0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeRelativeValue(x0);	  final    double    fx    =    computeRelativeValue(x);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
38	[BUG]  [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;  if(!inverted)  {  return  x;  }	  final    double    f0    =    x1    -    ((    f1    *    (x1    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
40	[BUG]  [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  if(f0  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  if(f0  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  Math.min(FALSE_ACCURACY,  x);  if(f0  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
41	[BUG]  [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
42	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeObjectiveValue(x1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeObjectiveValue(x1);	  final    double    fx    =    computeObjectiveValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  if(fx  ==  null)  {  if(!inverted)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  ==  null)  {  if(!inverted)  {  continue;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  ==  null)  {  if(!inverted)  {  continue;  }	  if(fx!=    null)    {    if(!inverted)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
44	[BUG]  [BUGGY]  if(fx  >=  null)  {  if(!inverted)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >=  null)  {  if(!inverted)  {  continue;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >=  null)  {  if(!inverted)  {  continue;  }	  if(fx!=    null)    {    if(!inverted)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
45	[BUG]  [BUGGY]  if(fx!=  null)  {  if(inverted)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx!=  null)  {  if(inverted)  {  continue;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx!=  null)  {  if(inverted)  {  continue;  }	  if(fx!=    null)    {    if(!inverted)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
46	[BUG]  [BUGGY]  if(x  <  =  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  =  0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  =  0)  {  return  x;  }	  if(fx    <    =    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
47	[BUG]  [BUGGY]  if(x  <  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }	  if(x    >    0)    {    final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
48	[BUG]  [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (x1  -  x0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (x1  -  x0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x1  -  ((  f1  *  (x1  -  x0))  /  fx;  if(!inverted)  {  return  x;  }	  if(x    >    0)    {    final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
49	[BUG]  [BUGGY]  if(f0  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(f0  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(f0  >  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }	  if(x    >    0)    {    final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
50	[BUG]  [BUGGY]  if(x  <  =  0.0  ||  fx  >  max)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  =  0.0  ||  fx  >  max)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  =  0.0  ||  fx  >  max)  {	  if(x    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
51	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x1);	  final    double    fx    =    computeFullValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x,  f1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x,  f1);	  final    double    fx    =    computeFullValue(x0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  fx  =  computeLongValue(x);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeLongValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeLongValue(x);	  fx    =    computeFloatValue(x);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  if(x  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0)  {  return  x;  }	  if(x    <    0)    {    return    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  if(x  <  =  0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  =  0)  {  return  fx;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  =  0)  {  return  fx;  }	  if(x    <    0)    {    return    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  if(x  <  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0.0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0.0)  {  return  x;  }	  if(x    <    0)    {    return    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;	  if(fx    <    0)    {    final    double    f1    =    Math.min(f1,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
58	[BUG]  [BUGGY]  final  double  f1  =  Math.min(f0,  fx);  inverted  =!inverted;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f1  =  Math.min(f0,  fx);  inverted  =!inverted;  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f1  =  Math.min(f0,  fx);  inverted  =!inverted;	  if(fx    <    0)    {    final    double    f1    =    Math.min(f1,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
59	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeObjectiveValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeObjectiveValue(x  +  1);	  final    double    fx    =    computeIntegerValue(x    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
60	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x0  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x0  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x0  +  1);	  final    double    fx    =    computeIntegerValue(x    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  if(x  <  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    <    0)    {    final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
62	[BUG]  [BUGGY]  final  double  f0  =  computeObjectiveValue(x,  fx  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeObjectiveValue(x,  fx  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeObjectiveValue(x,  fx  +  1);	  final    double    f0    =    computeObjectiveValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  final  double  f0  =  computeObjectiveValue(x,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeObjectiveValue(x,  f1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeObjectiveValue(x,  f1);	  final    double    f0    =    computeObjectiveValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
64	[BUG]  [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  x;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  x;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  x;	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
65	[BUG]  [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
66	[BUG]  [BUGGY]  final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x2  -  ((  f1  *  fx  -  f0))  /  fx;	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
67	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x,  fx  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x,  fx  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x,  fx  +  1);	  final    double    fx    =    computeFullValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
68	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x,  f0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x,  f0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x,  f0);	  final    double    fx    =    computeFullValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
69	[BUG]  [BUGGY]  if(x  <  =  0.0  ||  fx  >  1.0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  =  0.0  ||  fx  >  1.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  =  0.0  ||  fx  >  1.0)  {	  if(fx    <    =    0.0    ||    fx    >    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  if(fx  <  0.0  ||  fx  >  1.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0.0  ||  fx  >  1.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0.0  ||  fx  >  1.0)  {	  if(fx    <    =    0.0    ||    fx    >    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
71	[BUG]  [BUGGY]  if(fx  <  =  0.0  &&  fx  >  1.0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0.0  &&  fx  >  1.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0.0  &&  fx  >  1.0)  {	  if(fx    <    =    0.0    ||    fx    >    1.0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  if(x  >  0)  {  return  fx;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  >  0)  {  return  fx;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  >  0)  {  return  fx;  }	  if(fx    >    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
73	[BUG]  [BUGGY]  if(fx  >=  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >=  0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >=  0)  {  return  x;  }	  if(fx    >    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
74	[BUG]  [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
75	[BUG]  [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
76	[BUG]  [BUGGY]  if(x  <  0.0  ||  fx  >  max)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0.0  ||  fx  >  max)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0.0  ||  fx  >  max)  {	  if(x    <    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  final  double  f0  =  computeFullValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeFullValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeFullValue(x,  fx);	  final    double    f0    =    computeFullValue(x);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  final  double  f0  =  computeFullValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeFullValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeFullValue(x  +  1);	  final    double    f0    =    computeFullValue(x);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  fx  =  computeFullValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFullValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFullValue(x,  fx);	  fx    =    computeFullValue(x);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
80	[BUG]  [BUGGY]  final  long  fx  =  computeLongValue(x);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  long  fx  =  computeLongValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  long  fx  =  computeLongValue(x);	  final    double    fx    =    computeLongValue(x);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
81	[BUG]  [BUGGY]  if(fx  <  0.0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0.0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0.0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    <    0)    {    final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
82	[BUG]  [BUGGY]  final  double  fx  =  computeRelativeValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeRelativeValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeRelativeValue(x  +  1);	  final    double    fx    =    computeRelativeValue(x);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
83	[BUG]  [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  inverted  =!inverted;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
84	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x  *  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x  *  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x  *  1);	  final    double    fx    =    computeIntegerValue(x    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
85	[BUG]  [BUGGY]  fx  =  computeFloatValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFloatValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFloatValue(x,  fx);	  fx    =    computeFloatValue(x);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
86	[BUG]  [BUGGY]  if(fx!=  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx!=  0.0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx!=  0.0)  {  return  x;  }	  if(fx    ==    0.0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f1    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
88	[BUG]  [BUGGY]  final  double  f1  =  Math.min(FALSE_ACCURACY,  fx);  if(f1  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f1  =  Math.min(FALSE_ACCURACY,  fx);  if(f1  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f1  =  Math.min(FALSE_ACCURACY,  fx);  if(f1  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
89	[BUG]  [BUGGY]  if(fx  >  1)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >  1)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >  1)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
90	[BUG]  [BUGGY]  if(fx  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  ==  null)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  ==  null)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
91	[BUG]  [BUGGY]  if(fx!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx!=  null)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx!=  null)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
92	[BUG]  [BUGGY]  fx  =  computeFillValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFillValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFillValue(x  +  1);	  fx    =    computeFillValue(x);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
93	[BUG]  [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  (f1  -  f0))  /  f1;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  (f1  -  f0))  /  f1;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx  -  ((  f1  *  (f1  -  f0))  /  f1;  if(!inverted)  {  return  x;  }	  final    double    f0    =    x1    -    ((    f1    *    (x1    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x1  -  ((  f1  *  (f1  -  f0))  /  fx;	  final    double    f0    =    x1    -    ((    f1    *    (x1    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  final  double  f0  =  fx.computeFullValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeFullValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeFullValue();  if(!inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
96	[BUG]  [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  this;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  this;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  this;	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
97	[BUG]  [BUGGY]  final  double  f0  =  fx.computeFullValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx.computeFullValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx.computeFullValue();  if(inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
98	[BUG]  [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  fx  -  ((  f1  *  fx  -  f0))  /  f1;  if(!inverted)  {  return  x;  }	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
99	[BUG]  [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeObjectiveValue(x,  0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeObjectiveValue(x,  0);	  final    double    fx    =    computeIntegerValue(x,    0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
100	[BUG]  [BUGGY]  if(x  <  0.0  ||  fx  >  1.0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0.0  ||  fx  >  1.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0.0  ||  fx  >  1.0)  {	  if(x    <    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
101	[BUG]  [BUGGY]  fx  =  computeNullValue(x);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeNullValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeNullValue(x);	  fx    =    computeFullValue(x);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
102	[BUG]  [BUGGY]  fx  =  computeFlattenedValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFlattenedValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFlattenedValue(x  +  1);	  fx    =    computeFlattenedValue(x);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
103	[BUG]  [BUGGY]  if(fx!=  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx!=  0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx!=  0)  {  return  x;  }	  if(fx    >    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
104	[BUG]  [BUGGY]  final  double  fx  =  computeFunctionValue(x,  f1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFunctionValue(x,  f1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFunctionValue(x,  f1);	  final    double    fx    =    computeFunctionValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
105	[BUG]  [BUGGY]  fx  =  computeFunctionValue(x,  fx);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFunctionValue(x,  fx);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFunctionValue(x,  fx);	  fx    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
106	[BUG]  [BUGGY]  fx  =  computeRelativeValue(x);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeRelativeValue(x);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeRelativeValue(x);	  fx    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
107	[BUG]  [BUGGY]  if(x  <  =  0.0  ||  x  >  fx)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  =  0.0  ||  x  >  fx)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  =  0.0  ||  x  >  fx)  {	  if(x    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
108	[BUG]  [BUGGY]  if(x  >  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  >  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  >  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
109	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x  /  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x  /  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x  /  1);	  final    double    fx    =    computeIntegerValue(x    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  if(!inverted)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(!inverted)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(!inverted)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
111	[BUG]  [BUGGY]  if(fx  <  0)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  0)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  0)  {  final  double  f0  =  fx.computeValue();  if(inverted)  {  return  x;  }	  final    double    f0    =    fx.computeValue();    if(inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
112	[BUG]  [BUGGY]  final  double  f0  =  computeFunctionValue(x)-  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  computeFunctionValue(x)-  1;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  computeFunctionValue(x)-  1;	  final    double    f0    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0)  {  final  double  f0  =  Math.min(FALSE_ACCURACY,  fx);  if(f0  <  0)  {  return  x;  }	  if(fx    >    0)    {    final    double    f0    =    Math.min(FALSE_ACCURACY,    fx);    if(f0    <    0)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
114	[BUG]  [BUGGY]  fx  =  computeFloatValue(x0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFloatValue(x0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFloatValue(x0);	  fx    =    computeFloatValue(x);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
115	[BUG]  [BUGGY]  if(x  >  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  >  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  >  0)  {  final  double  f1  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f1    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
116	[BUG]  [BUGGY]  if(fx  >  0)  {  final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >  0)  {  final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >  0)  {  final  double  f1  =  fx.computeValue();  if(inverted)  {  return  x;  }	  if(fx    >    0)    {    final    double    f1    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
117	[BUG]  [BUGGY]  if(fx  <  min)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  min)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  min)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }	  if(fx    <    0)    {    final    double    f1    =    Math.min(f1,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
118	[BUG]  [BUGGY]  if(fx  >  0)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >  0)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >  0)  {  final  double  f1  =  Math.min(f1,  fx);  inverted  =!inverted;  }	  if(fx    <    0)    {    final    double    f1    =    Math.min(f1,    fx);    inverted    =!inverted;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
119	[BUG]  [BUGGY]  if(fx  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  >  0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  >  0)  {	  if(fx    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
120	[BUG]  [BUGGY]  fx  =  computeFillValue(x0);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFillValue(x0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFillValue(x0);	  fx    =    computeFillValue(x);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
121	[BUG]  [BUGGY]  if(!inverted)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(!inverted)  {  continue;  }  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(!inverted)  {  continue;  }	  if(fx!=    null)    {    if(!inverted)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
122	[BUG]  [BUGGY]  fx  =  computeFullValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFullValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFullValue(x  +  1);	  fx    =    computeFullValue(x);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
123	[BUG]  [BUGGY]  final  double  fx  =  computeIntegerValue(x0,  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeIntegerValue(x0,  0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeIntegerValue(x0,  0);	  final    double    fx    =    computeIntegerValue(x,    0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
124	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x,  fx)-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x,  fx)-  1;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x,  fx)-  1;	  final    double    fx    =    computeFullValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
125	[BUG]  [BUGGY]  final  double  fx  =  computeFullValue(x,  fx0);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFullValue(x,  fx0);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFullValue(x,  fx0);	  final    double    fx    =    computeFullValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
126	[BUG]  [BUGGY]  fx  =  computeFunctionValue(x  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  fx  =  computeFunctionValue(x  +  1);  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	fx  =  computeFunctionValue(x  +  1);	  fx    =    computeFunctionValue(x);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
127	[BUG]  [BUGGY]  final  double  fx  =  computeFunctionValue(x,  fx)-  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  fx  =  computeFunctionValue(x,  fx)-  1;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  fx  =  computeFunctionValue(x,  fx)-  1;	  final    double    fx    =    computeFunctionValue(x,    fx);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
128	[BUG]  [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0)  {  final  double  f0  =  fx.computeValue();  if(!inverted)  {  return  x;  }	  if(fx    <    0)    {    final    double    f0    =    fx.computeValue();    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
129	[BUG]  [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  DEFAULT_ABSOLUTE_ACCURACY;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  DEFAULT_ABSOLUTE_ACCURACY;  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  DEFAULT_ABSOLUTE_ACCURACY;	  final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
130	[BUG]  [BUGGY]  if(x  >  0.0  ||  fx  <  1.0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  >  0.0  ||  fx  <  1.0)  {  [BUGGY]      return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  >  0.0  ||  fx  <  1.0)  {	  if(x    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
131	[BUG]  [BUGGY]  if(x  <  0  ||  fx  >  0.0)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(x  <  0  ||  fx  >  0.0)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(x  <  0  ||  fx  >  0.0)  {  return  x;  }	  if(x    <    0)    {    return    fx;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
132	[BUG]  [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        while  (true)  {  final  double  x  =  x1  -  ((f1  *  (x1  -  x0))  /  (f1  -  f0));  final  double  fx  =  computeObjectiveValue(x);          [BUGGY]  if(fx  <  =  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }  [BUGGY]      if  (fx  ==  0.0)  {  return  x;  }  if  (f1  *  fx  <  0)  {    x0  =  x1;  f0  =  f1;  inverted  =  !inverted;  [CLASS]  BaseSecantSolver  Method  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  allowedSolution  Method  ILLINOIS  PEGASUS  REGULA_FALSI  method  boolean  inverted  double  DEFAULT_ABSOLUTE_ACCURACY  absoluteAccuracy  atol  f0  f1  ftol  functionValueAccuracy  fx  max  min  relativeAccuracy  rtol  startValue  x  x0  x1  	projects/Math50/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java	0.3779644730092272	166	166	1	replace	if(fx  <  =  0)  {  final  double  f0  =  x1  -  ((  f1  *  fx  -  f0))  /  fx;  if(!inverted)  {  return  x;  }	  if(fx    <    0)    {    final    double    f0    =    x1    -    ((    f1    *    fx    -    f0))/    fx;    if(!inverted)    {    return    x;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
