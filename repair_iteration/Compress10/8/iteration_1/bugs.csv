bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  bis.addDummy();  [CE]  incompatible  types  [FE]    AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.addDummy();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.addDummy();	return  bis;  	non-compiled	[CE]  incompatible  types	15	None	replace
2	[BUG]  [BUGGY]  return  bis.getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.getValue();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.getValue();	return  bis;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  return  bis.getInputStream();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.getInputStream();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.getInputStream();	return  bis;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
4	[BUG]  [BUGGY]  return  bis.getDummy();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.getDummy();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.getDummy();	return  bis;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
5	[BUG]  [BUGGY]  return  bis.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.clone();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.clone();	return  bis;  	non-compiled	[CE]  clone()  has  protected  access  in  Object	15	None	replace
6	[BUG]  [BUGGY]  return  bis.getSize();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.getSize();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.getSize();	return  bis;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
7	[BUG]  [BUGGY]  [FE]  ZipException  [FE]                AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]    [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	add	  	return  bis;  	compilable	  [FE]  ZipException  	15	1	replace
8	[BUG]  [BUGGY]    [FE]  ZipException  [FE]                AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]    [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	  	return  bis;  	compilable	  [FE]  ZipException  	15	1	replace
9	[BUG]  [BUGGY]  return  bis.cloneTree();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  bis.cloneTree();  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  bis.cloneTree();	return  bis;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
10	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)  [FE]    AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod());  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  new  ZipArchiveEntry(start,  ze.getMethod());	return  bis;  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)	15	None	replace
11	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long)  [FE]      AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getCompressedSize());  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  new  ZipArchiveEntry(start,  ze.getCompressedSize());	return  bis;  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long)	15	None	replace
12	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod())?  bis  :  null;  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)  [FE]        AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod())?  bis  :  null;  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  new  ZipArchiveEntry(start,  ze.getMethod())?  bis  :  null;	return  bis;  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)	15	None	replace
13	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod())?  null  :  bis;  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)  [FE]          AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  new  ZipArchiveEntry(start,  ze.getMethod())?  null  :  bis;  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  new  ZipArchiveEntry(start,  ze.getMethod())?  null  :  bis;	return  bis;  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)	15	None	replace
14	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,int)  [FE]            AssertionFailedError  [CONTEXT]  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze.getMethod());  [BUGGY]  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  }  };  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	return  new  ZipArchiveEntry(zipEncoding,  ze.getMethod());	return  bis;  	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,int)	15	None	replace
