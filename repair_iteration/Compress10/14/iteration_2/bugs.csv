bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  nameMap.remove(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.remove(ze);    nameMap.remove(ze);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
2	[BUG]  [BUGGY]  nameMap.remove(ze);  nameMap.remove(ze);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  nameMap.remove(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    nameMap.remove(ze);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
3	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
4	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
5	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
6	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
7	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
8	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
9	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
10	[BUG]  [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  [CE]  no  suitable  method  found  for  setExtra(String)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;	      	non-compiled	[CE]  no  suitable  method  found  for  setExtra(String)	10	None	replace
11	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	      	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	replace
12	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ZipArchiveEntry  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ZipArchiveEntry  ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	replace
13	[BUG]  [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  orig  +  extraFieldLen;  [CE]  no  suitable  method  found  for  setExtra(String)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  orig  +  extraFieldLen;  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  orig  +  extraFieldLen;	      	non-compiled	[CE]  no  suitable  method  found  for  setExtra(String)	10	None	replace
14	[BUG]  [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  [CE]  no  suitable  method  found  for  setExtra(String)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ze.setExtra(orig);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;	      	non-compiled	[CE]  no  suitable  method  found  for  setExtra(String)	10	None	replace
15	[BUG]  [BUGGY]  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	replace
16	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc,  orig);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc,  orig);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
17	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.name);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc.name);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc.name);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
18	[BUG]  [BUGGY]  nameMap.put(orig.getName(),  nc);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(orig.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(orig.getName(),  nc);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
19	[BUG]  [BUGGY]  nameMap.put(orig,  ze.getName(),  nc);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(orig,  ze.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(orig,  ze.getName(),  nc);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
20	[BUG]  [BUGGY]  nameMap.put(nc.getName(),  ze);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(nc.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(nc.getName(),  ze);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    ze);    nameMap.put(ze.getName(),  ze);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
22	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  nameMap.put(ze.getName(),  ze);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    nameMap.put(ze.getName(),  ze);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
23	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
25	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
26	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
27	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
28	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
30	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	5	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    ze);    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
32	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  ze);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
33	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
34	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
35	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
36	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
37	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
38	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
39	[BUG]  [BUGGY]  nameMap.put(orig.getName(),  ze);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(orig.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(orig.getName(),  ze);	  nameMap.put(ze.getName(),    ze);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
41	[BUG]  [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
43	[BUG]  [BUGGY]  if(orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
45	[BUG]  [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
47	[BUG]  [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  return;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
48	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze,  orig.name);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze,  orig.name);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze,  orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
49	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
50	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
51	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
52	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
53	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nameMap.put(ze.getName(),  nc);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nameMap.put(ze.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nameMap.put(ze.getName(),  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
54	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  localExtraData.put(ze.getName(),  nc);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  localExtraData.put(ze.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  localExtraData.put(ze.getName(),  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
55	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  cfh);  [CE]  cannot  find  symbol  cfh  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  cfh);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  cfh);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  cannot  find  symbol  cfh	11	None	replace
56	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ZERO);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  ZERO);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  cannot  find  symbol  ZERO	11	None	replace
57	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  t);  [CE]  cannot  find  symbol  t  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  t);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  t);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
58	[BUG]  [BUGGY]  nameMap.put(ze.getName(),!orig.equals(ze.getName()));  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),!orig.equals(ze.getName()));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),!orig.equals(ze.getName()));	  nameMap.remove(ze);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	8	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
60	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
61	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
62	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
63	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  z  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  z  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
65	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  z  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  z  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  z  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  cd  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  cd  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
67	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  cd  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  cd  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  cd  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
69	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
70	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
71	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig),  nc);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig),  nc);	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	13	None	replace
72	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(NameAndComment)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(NameAndComment)	13	None	replace
73	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(offset));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(offset));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(offset));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)	13	None	replace
74	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileName));  [CE]  cannot  find  symbol  fileName  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileName));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileName));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  cannot  find  symbol  fileName	13	None	replace
75	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(localExtraData));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(byte[])  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(localExtraData));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(localExtraData));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(byte[])	13	None	replace
76	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig,  fileNameLen));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(String,int)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig,  fileNameLen));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig,  fileNameLen));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(String,int)	13	None	replace
77	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  nc);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  orig,  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  orig,  nc);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
78	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  encoding);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  encoding);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  encoding);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
79	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  fileNameLen);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  orig,  fileNameLen);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  orig,  fileNameLen);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
80	[BUG]  [BUGGY]  nameMap.put(ze,  orig,  nc);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  orig,  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  orig,  nc);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
81	[BUG]  [BUGGY]  nameMap.put(ze,  nc);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  nc);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
82	[BUG]  [BUGGY]  nameMap.put(ze,  nc.name,  orig);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  nc.name,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  nc.name,  orig);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
83	[BUG]  [BUGGY]  nameMap.put(ze,  orig,  fileNameLen);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  orig,  fileNameLen);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  orig,  fileNameLen);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
84	[BUG]  [BUGGY]  nameMap.put(ze,  encoding,  orig);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  encoding,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  encoding,  orig);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
85	[BUG]  [BUGGY]  nameMap.put(ze,  nc.orig);  [CE]  cannot  find  symbol  orig  [FE]                    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  nc.orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  nc.orig);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  cannot  find  symbol  orig	2	None	replace
86	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.fileName);  [CE]  cannot  find  symbol  fileName  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc.fileName);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc.fileName);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  cannot  find  symbol  fileName	4	None	replace
87	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.comment);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc.comment);	  nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
88	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
89	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  nameMap.put(ze.getName(),  ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  nameMap.put(ze.getName(),  ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
90	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  ze);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	5	None	add
91	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
92	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	3	None	replace
93	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
94	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ce);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ce);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ce);  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	12	None	add
95	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  MIN_EOCD_SIZE);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  MIN_EOCD_SIZE);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  MIN_EOCD_SIZE);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	11	None	replace
96	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  NEGATING_EOCD_SIZE);  [CE]  cannot  find  symbol  NEGATING_EOCD_SIZE  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  NEGATING_EOCD_SIZE);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  NEGATING_EOCD_SIZE);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  cannot  find  symbol  NEGATING_EOCD_SIZE	11	None	replace
97	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  0);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  0);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  0);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	11	None	replace
98	[BUG]  [BUGGY]  nameMap.put(ze,  encoding);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  encoding);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  encoding);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
99	[BUG]  [BUGGY]  nameMap.put(ze,  orig,  encoding);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  orig,  encoding);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  orig,  encoding);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
100	[BUG]  [BUGGY]  nameMap.put(ze,  archiveName,  orig);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  archiveName,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  archiveName,  orig);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
101	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig,  nc.name);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig,  nc.name);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig,  nc.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
102	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileNameLen));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileNameLen));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(fileNameLen));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int)	13	None	replace
103	[BUG]  [BUGGY]      NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]      NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	        NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	9	None	add
104	[BUG]  [BUGGY]      ze.setExtra(orig);  [CE]  no  suitable  method  found  for  setExtra(String)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]      ze.setExtra(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	        ze.setExtra(orig);	  	non-compiled	[CE]  no  suitable  method  found  for  setExtra(String)	9	None	add
105	[BUG]  [BUGGY]      NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]      NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	        NameAndComment  ze  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	9	None	add
106	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  namesWithoutUTF8Flag.get(orig);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  namesWithoutUTF8Flag.get(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  ze  =  namesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
107	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(orig);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  nameMap.remove(orig);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
108	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  ze  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
109	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig.getName(),  nc);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(orig.getName(),  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
110	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipEncoding.put(ze.getName(),  nc);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipEncoding.put(ze.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipEncoding.put(ze.getName(),  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
112	[BUG]  [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  extraFieldLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
114	[BUG]  [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
116	[BUG]  [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  }	  nameMap.put(ze.getName(),    ze);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
117	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.orig);  [CE]  cannot  find  symbol  orig  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc.orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc.orig);	  nameMap.put(ze.getName(),    OPEN_EOCD_SIZE);    	non-compiled	[CE]  cannot  find  symbol  orig	11	None	replace
118	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  nameMap.put(ze.getName(),  nc);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  nameMap.put(ze.getName(),  nc);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  nameMap.put(ze.getName(),  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze.getName(),    nc);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	15	None	replace
119	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc.name));  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(byte[])  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc.name));  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  new  ZipArchiveEntry(nc.name));	  nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(byte[])	13	None	replace
120	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    nameMap.put(ze,    nc.name);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	14	None	replace
121	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.fileName,  orig);  [CE]  cannot  find  symbol  fileName  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  nc.fileName,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),  nc.fileName,  orig);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  fileName	1	None	replace
122	[BUG]  [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }	  nameMap.put(ze.getName(),    ze);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	6	None	replace
123	[BUG]  [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(orig!=  null)  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }	  nameMap.put(ze.getName(),    ze);    	non-compiled	[CE]  incompatible  types	6	None	replace
124	[BUG]  [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  nameMap.put(entry.getName(),  entry);  }	  nameMap.put(ze.getName(),    ze);    	non-compiled	[CE]  incompatible  types	6	None	replace
125	[BUG]  [BUGGY]  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);  [CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.comment);	      	non-compiled	[CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;	10	None	replace
126	[BUG]  [BUGGY]  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);  [CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	ZipUtil.setNameAndCommentFromExtraFields(ze,  orig,  nc.name);	      	non-compiled	[CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;	10	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
128	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  new  ZipArchiveEntry(orig));  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    new    ZipArchiveEntry(orig));    NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
129	[BUG]  [BUGGY]      ZipArchiveEntry  <  K,  V>  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]      ZipArchiveEntry  <  K,  V>  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	        ZipArchiveEntry  <  K,  V>  ze  =  entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
130	[BUG]  [BUGGY]  nameMap.put(ze,  nc.fileName,  orig);  [CE]  cannot  find  symbol  fileName  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze,  nc.fileName,  orig);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze,  nc.fileName,  orig);	  nameMap.put(ze,    orig);    	non-compiled	[CE]  cannot  find  symbol  fileName	2	None	replace
131	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
132	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  return;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  return;  }  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  return;  }	  	non-compiled	[CE]  incompatible  types	5	None	add
133	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  setLocalFileHeaderData(entry  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  setLocalFileHeaderData(entry  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(entry);  setLocalFileHeaderData(entry	  	non-compiled	[CE]  ')'  expected	5	None	add
134	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  fileName  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.put(ze.getName(),  ze);  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  fileName  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.put(ze.getName(),    ze);    if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  else  {  zip64EocdOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  fileName	  	non-compiled	[CE]  ';'  expected	5	None	add
135	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
136	[BUG]  [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(org,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {    [BUGGY]  nameMap.remove(ze);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(org,  nc.name,  nc.comment);  [BUGGY]    nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	nameMap.remove(ze);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(org,  nc.name,  nc.comment);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
