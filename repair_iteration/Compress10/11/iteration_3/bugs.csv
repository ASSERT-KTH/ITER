bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	64	None	replace
2	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.get(orig);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  zipEncoding.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.get(orig);	  NameAndComment    nc    =    zipEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
3	[BUG]  [BUGGY]  NameAndComment  nc  =  this.zipEncoding.get(ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  this.zipEncoding.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  this.zipEncoding.get(ze);	  NameAndComment    nc    =    zipEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
4	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.get(ze,  orig);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  zipEncoding.get(ze,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.get(ze,  orig);	  NameAndComment    nc    =    zipEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
5	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toLowerCase());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toLowerCase());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toLowerCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
6	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toLowerCase());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toLowerCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	compilable	  [FE]  NullPointerException  	78	2	replace
7	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toLowerCase());  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toLowerCase());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toLowerCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	compilable	  [FE]  NullPointerException  	78	2	replace
8	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  orig);  [CE]  cannot  find  symbol  OriginalName  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
9	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.name());  [CE]  cannot  find  symbol  OriginalName  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.name());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.name());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
10	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  true);  [CE]  cannot  find  symbol  OriginalName  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  true);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase(),  true);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
11	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalName.toLowerCase());  [CE]  cannot  find  symbol  OriginalName  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalName.toLowerCase());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(OriginalName.toLowerCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
13	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(orig);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
14	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  nc  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  nc	72	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
16	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(orig);  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
17	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  nc  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  nc	72	None	replace
18	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	72	None	replace
19	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(org.apache.commons.FONT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(org.apache.commons.FONT);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(org.apache.commons.FONT);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
20	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT,  orig);  [CE]  cannot  find  symbol  Orig  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol  Orig	16	None	replace
21	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  1);  [CE]  cannot  find  symbol  Orig  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol  Orig	16	None	replace
22	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  incompatible  types  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	35	None	replace
23	[BUG]  [BUGGY]  NameAndComment  nc  =  entrysWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entrysWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entrysWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entrysWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entrysWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entrysWithoutUTF8Flag	44	None	replace
24	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin);  [CE]  cannot  find  symbol  Origin  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin);	  NameAndComment    nc    =    entrysWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  Origin	44	None	replace
25	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(orig);  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	73	None	replace
26	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(ze);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	73	None	replace
27	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	73	None	replace
28	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(org);  [CE]  cannot  find  symbol  org  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(org);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  org	73	None	replace
29	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(Orig.class);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
30	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(offset);  [CE]  incompatible  types  [FE]                      NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	73	None	replace
31	[BUG]  [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(i);  [CE]  cannot  find  symbol  i  [FE]                        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  f  =  entriesWithoutUTF8Flag.get(i);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  f  =  entriesWithoutUTF8Flag.get(i);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  i	73	None	replace
32	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  nc);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  nc);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  nc);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  fileNameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  fileNameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  fileNameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	34	None	replace
38	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  nc  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entriesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  nc	34	None	replace
39	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	34	None	replace
40	[BUG]  [BUGGY]  Node  nc  =  entriesWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  Node  nc  =  entriesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	Node  nc  =  entriesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
41	[BUG]  [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                      NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  filesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	34	None	replace
42	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  orig);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	17	None	replace
43	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	17	None	replace
44	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	17	None	replace
45	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.name,  orig);  [CE]  cannot  find  symbol  Original  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.name,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.name,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  cannot  find  symbol  Original	17	None	replace
46	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
47	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  orig);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
48	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig;  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	56	None	replace
49	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  ';'  expected	56	None	replace
50	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag;  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	56	None	replace
51	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  noUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  ';'  expected	56	None	replace
52	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	38	None	replace
53	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	38	None	replace
54	[BUG]  [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  filesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	38	None	replace
55	[BUG]  [BUGGY]  NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  fileNamesWithoutUTF8Flag  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  fileNamesWithoutUTF8Flag	38	None	replace
56	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	compilable	  [FE]  NullPointerException  	70	2	replace
57	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	compilable	  [FE]  NullPointerException  	70	2	replace
58	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString());  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	70	None	replace
59	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	compilable	  [FE]  NullPointerException  	70	2	replace
60	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toString());  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	compilable	  [FE]  NullPointerException  	70	2	replace
61	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(z.toString());  [CE]  cannot  find  symbol  z  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(z.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(z.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  z	70	None	replace
62	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()));  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()));  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()));	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  ';'  expected	70	None	replace
63	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
64	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
65	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
66	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
67	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(orig);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(orig);	  NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
68	[BUG]  [BUGGY]  NameAndComment  nc  =  archives.get(orig);  [CE]  cannot  find  symbol  archives  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archives.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archives.get(orig);	  NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  cannot  find  symbol  archives	26	None	replace
69	[BUG]  [BUGGY]  NameAndComment  nc  =  files.get(orig);  [CE]  cannot  find  symbol  files  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  files.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  files.get(orig);	  NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  cannot  find  symbol  files	26	None	replace
70	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze).comment;  [CE]  incompatible  types  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze).comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  incompatible  types	82	None	replace
71	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0).comment;  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0).comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  incompatible  types	82	None	replace
72	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i).comment;  [CE]  cannot  find  symbol  i  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i).comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  cannot  find  symbol  i	82	None	replace
73	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset).comment;  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset).comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  incompatible  types	82	None	replace
74	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).name;  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).name;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).name;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  incompatible  types	82	None	replace
75	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	24	None	replace
76	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(org);  [CE]  cannot  find  symbol  org  [FE]                      NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(org);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  org	24	None	replace
77	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]                        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	24	None	replace
78	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	63	None	replace
79	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  ze);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  cannot  find  symbol  name	63	None	replace
80	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  cannot  find  symbol  name	63	None	replace
81	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  cannot  find  symbol  Orig	63	None	replace
82	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset  +  1);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
83	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.name);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
84	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(relativeHeaderOffset);  [CE]  cannot  find  symbol  relativeHeaderOffset  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(relativeHeaderOffset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(relativeHeaderOffset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  relativeHeaderOffset	80	None	replace
85	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(1);    	compilable	  [FE]  NullPointerException  	32	2	replace
86	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(1);    	compilable	  [FE]  NullPointerException  	32	2	replace
87	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(1);    	compilable	  [FE]  NullPointerException  	32	2	replace
88	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(1);    	compilable	  [FE]  NullPointerException  	32	2	replace
89	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(0);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(1);    	non-compiled	[CE]  incompatible  types	32	None	replace
90	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
91	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  2;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  2;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
92	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)/  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)/  1;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)/  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	53	None	replace
93	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1L;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1L;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
94	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset)+  1;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
95	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i)+  1;  [CE]  cannot  find  symbol  i  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i)+  1;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  cannot  find  symbol  i	53	None	replace
96	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.getName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.getName();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.getName();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	12	None	replace
97	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().getName();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().getName();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().getName();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
98	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.clone();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.clone();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.clone();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
99	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.cloneTree();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.cloneTree();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.cloneTree();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
100	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getValue();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getValue();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getValue();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(ze);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
102	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(ze);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(ze);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	compilable	  [FE]  AssertionFailedError  	84	1	replace
103	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(orig);  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.remove(orig);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	84	None	replace
104	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.remove(ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  zipEncoding.remove(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.remove(ze);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
105	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.remove(ze);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.remove(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.remove(ze);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
106	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
107	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
108	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
109	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    File  cfh  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  incompatible  types	69	None	add
110	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    File  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
111	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ZE.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ZE.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ZE.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
112	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  2);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  2);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
113	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze  +  1);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
114	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(org);  [CE]  cannot  find  symbol  org  [FE]      AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(org);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  org	8	None	replace
115	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	8	None	replace
116	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	compilable	  [FE]  NullPointerException  	8	2	replace
117	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(0);  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	compilable	  [FE]  NullPointerException  	8	2	replace
118	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	compilable	  [FE]  NullPointerException  	8	2	replace
119	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	compilable	  [FE]  NullPointerException  	8	2	replace
120	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
121	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  FileAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  FileAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    FileAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
122	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    File  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
123	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
124	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
125	[BUG]  [BUGGY]  File  nc  =  entryEncoding.get(offset);  [CE]  cannot  find  symbol  entryEncoding  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entryEncoding.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entryEncoding.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	37	None	replace
126	[BUG]  [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  nc  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	66	None	replace
127	[BUG]  [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  nc  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	66	None	replace
128	[BUG]  [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  nc  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	66	None	replace
129	[BUG]  [BUGGY]  NameAndComment  nc  =  entry.get(orig);  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entry.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entry.get(orig);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	86	None	replace
130	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntry.get(ze);  [CE]  cannot  find  symbol  entryEntry  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntry.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntry.get(ze);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEntry	86	None	replace
131	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
132	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  return;  }  [CE]  cannot  find  symbol  nc  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  nc	13	None	replace
133	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
134	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
135	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  throw  new  IllegalArgumentException( " ");  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
136	[BUG]  [BUGGY]  ||!orig.equals(ze.getName()))  {  return;  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  ||!orig.equals(ze.getName()))  {  return;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	||!orig.equals(ze.getName()))  {  return;	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
137	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(orig,  ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.get(orig,  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(orig,  ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
138	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(ze,  orig);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.get(ze,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(ze,  orig);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
139	[BUG]  [BUGGY]  NameAndComment  nc  =  archives.get(ze);  [CE]  cannot  find  symbol  archives  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archives.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archives.get(ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol  archives	28	None	replace
140	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(i,  ze);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.get(i,  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(i,  ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol  i	28	None	replace
141	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.find(ze);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.find(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.find(ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
142	[BUG]  [BUGGY]  File  nc  =  entryEncoding.get(orig);  [CE]  cannot  find  symbol  entryEncoding  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entryEncoding.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entryEncoding.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	21	None	replace
143	[BUG]  [BUGGY]  nc  =  entryEncoding.get(orig);  [CE]  cannot  find  symbol  nc  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entryEncoding.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entryEncoding.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  cannot  find  symbol  nc	21	None	replace
144	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	74	None	replace
145	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	74	None	replace
146	[BUG]  [BUGGY]  File  nc  =  entryWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entryWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entryWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	74	None	replace
147	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(og);  [CE]  cannot  find  symbol  og  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(og);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(og);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    	non-compiled	[CE]  cannot  find  symbol  og	55	None	replace
148	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
149	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
150	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
151	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
152	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    File  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
153	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entriesWithoutUTF7Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entriesWithoutUTF7Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  entriesWithoutUTF7Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
154	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
155	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
156	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  filesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  filesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  filesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
157	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryEncoding.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryEncoding.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  entryEncoding.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
158	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  namesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  namesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  namesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
159	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entryWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  entryWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
160	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(Orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(Orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(Orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
161	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1,  orig);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	77	None	replace
162	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  ze  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
163	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  index  +  1);  [CE]  cannot  find  symbol  index  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  index  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  index  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  index	77	None	replace
164	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  2);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	77	None	replace
165	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  orig);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	77	None	replace
166	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	40	None	replace
167	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(index);  [CE]  cannot  find  symbol  index  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(index);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(index);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  index	40	None	replace
168	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  namesWithoutUTF8Flag  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    namesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  namesWithoutUTF8Flag	22	None	replace
169	[BUG]  [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  filesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  filesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    namesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	22	None	replace
170	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    namesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	22	None	replace
171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
172	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);  [FE]  NullPointerException  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
173	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  2);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	51	None	replace
174	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
175	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  2);  [FE]  NullPointerException  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
176	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  3);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	51	None	replace
177	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
178	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());  [FE]  NullPointerException  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    2);    	compilable	  [FE]  NullPointerException  	51	2	replace
179	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  nc  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  nc	31	None	replace
180	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	31	None	replace
181	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entriesWithOUTUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(ze);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entriesWithOUTUTF8Flag	11	None	replace
182	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)this.entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)this.entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)this.entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	11	None	replace
183	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.name);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(ze.name);	  NameAndComment    nc    =    entryEncoding.get(Orig.name);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	76	None	replace
184	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.NAME);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.NAME);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(Orig.NAME);	  NameAndComment    nc    =    entryEncoding.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	76	None	replace
185	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  f  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    f    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	67	None	replace
186	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(ze);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    f    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	67	None	replace
187	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  f  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    f    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	67	None	replace
188	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name  +  1);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.name);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	14	None	replace
189	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.name);    	non-compiled	[CE]  cannot  find  symbol  name	14	None	replace
190	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
191	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
192	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
193	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    File  cfh  =  entriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  incompatible  types	46	None	add
194	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    File  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
195	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
196	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinal);  [CE]  cannot  find  symbol  ordinal  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinal);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinal);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(oldog);    	non-compiled	[CE]  cannot  find  symbol  ordinal	61	None	replace
197	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    	compilable	  [FE]  NullPointerException  	5	2	replace
198	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  3);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    	compilable	  [FE]  NullPointerException  	5	2	replace
199	[BUG]  [BUGGY]  File  nc  =  entryWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entryWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entryWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	23	None	replace
200	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME,  orig);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  Orig	15	None	replace
201	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_NAME);  [CE]  cannot  find  symbol  OPTIONAL_NAME  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_NAME);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_NAME);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  OPTIONAL_NAME	15	None	replace
202	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.NAME);  [CE]  cannot  find  symbol  Original  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.NAME);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.NAME);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  Original	15	None	replace
203	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Ordinal.NAME);  [CE]  cannot  find  symbol  Ordinal  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Ordinal.NAME);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Ordinal.NAME);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  Ordinal	15	None	replace
204	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	50	None	replace
205	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.getName());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
206	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	50	None	replace
207	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()));  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()));  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()));	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  ';'  expected	50	None	replace
208	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
209	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
210	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1));  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1));  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1));	  	non-compiled	[CE]  ';'  expected	4	None	add
211	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    File  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
212	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  incompatible  types  [FE]            NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  cfh  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    File  cfh  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  incompatible  types	4	None	add
213	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  2);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
214	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  nc  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	68	None	replace
215	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  fileNameLen);  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  fileNameLen);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  fileNameLen);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	68	None	replace
216	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
217	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
218	[BUG]  [BUGGY]  File  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entryEntriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryEntriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	19	None	replace
219	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class,  orig);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
220	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Original.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
221	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origin.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
222	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(Orig.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
223	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFile.class);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFile.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFile.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
224	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
225	[BUG]  [BUGGY]  NameAndComment  nc  =  this.entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  this.entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  this.entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	42	None	replace
226	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.getKey();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.getKey();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.getKey();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	58	None	replace
227	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(orig);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
228	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  incompatible  types	58	None	replace
229	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.key();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
230	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  ze);  [CE]  cannot  find  symbol  nc  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  ze);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  nc	57	None	replace
231	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  nc);  [CE]  cannot  find  symbol  nc  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  orig,  nc);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig,  nc);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  nc	57	None	replace
232	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  fileNameLen);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  orig,  fileNameLen);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig,  fileNameLen);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	57	None	replace
233	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  entriesWithoutUTF8Flag);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  orig,  entriesWithoutUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig,  entriesWithoutUTF8Flag);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	57	None	replace
234	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  nc.name);  [CE]  cannot  find  symbol  nc  [FE]                                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  orig,  nc.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig,  nc.name);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  nc	57	None	replace
235	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  nc.name);  [CE]  cannot  find  symbol  nc  [FE]                                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  nc.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  nc.name);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  nc	57	None	replace
236	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  fileNameLen);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  fileNameLen);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
237	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  entriesWithoutUTF8Flag);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  entriesWithoutUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  entriesWithoutUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
238	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1,  name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  cannot  find  symbol  name	48	None	replace
239	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  orig  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
240	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name  +  1);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  name  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  cannot  find  symbol  name	48	None	replace
241	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.get(offset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  zipEncoding.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.get(offset);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
242	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(offset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(offset);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
243	[BUG]  [BUGGY]  NameAndComment  nc  =  files.get(offset);  [CE]  cannot  find  symbol  files  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  files.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  files.get(offset);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol  files	30	None	replace
244	[BUG]  [BUGGY]  NameAndComment  nc  =  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  offsetEntry.dataOffset;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  offsetEntry.dataOffset;	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  incompatible  types	30	None	replace
245	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryEntriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	36	None	replace
246	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	compilable	  [FE]  NullPointerException  	52	2	replace
247	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1L);  [FE]  NullPointerException  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	compilable	  [FE]  NullPointerException  	52	2	replace
248	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1,  orig);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
249	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  *  1L);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  *  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  *  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	52	None	replace
250	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  10.0);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  10.0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  10.0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
251	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	20	None	replace
252	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(org);  [CE]  cannot  find  symbol  org  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(org);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  org	20	None	replace
253	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.toString());  [CE]  cannot  find  symbol  OriginalFileName  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(original);    	non-compiled	[CE]  cannot  find  symbol  OriginalFileName	2	None	replace
254	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  orig);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
255	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
256	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  true);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  true);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
257	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.TYPE);  [CE]  cannot  find  symbol  OriginalPrettyPrinter  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.TYPE);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.TYPE);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol  OriginalPrettyPrinter	79	None	replace
258	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
259	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.get(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
260	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    	compilable	  [FE]  NullPointerException  	47	2	replace
261	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    	compilable	  [FE]  NullPointerException  	47	2	replace
262	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entryEncoding);  [CE]  cannot  find  symbol  entryEncoding  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entryEncoding);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entryEncoding);	  NameAndComment    nc    =    entryEncoding.get(org);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	29	None	replace
263	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	65	None	replace
264	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	65	None	replace
265	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	35	2	replace
266	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	35	2	replace
267	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  4;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  4;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  4;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
268	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  3;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  3;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
269	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
270	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
271	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  f  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  File  f  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    File  f  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  incompatible  types	69	None	add
272	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
273	[BUG]  [BUGGY]  NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  fileNamesWithoutUTF8Flag  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  fileNamesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  fileNamesWithoutUTF8Flag	20	None	replace
274	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(original);  [CE]  cannot  find  symbol  original  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(original);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(original);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  original	20	None	replace
275	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(prefix);  [CE]  cannot  find  symbol  prefix  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(prefix);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(prefix);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig);    	non-compiled	[CE]  cannot  find  symbol  prefix	85	None	replace
276	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key(orig);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.key(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
277	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  c  =  entriesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  NameAndComment  c  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    NameAndComment  c  =  entriesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
278	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  File  nc  =  entriesWithoutUTF8Flag.remove(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  File  nc  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    File  nc  =  entriesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	54	None	add
279	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
280	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  nc  =  entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
281	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
282	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
283	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
284	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  nc  =  entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
285	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
286	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(offset);  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	68	2	replace
287	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(offset);  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  entryEncoding  [FE]                      NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(offset);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(offset);  nc  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	68	None	replace
288	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset++);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset++);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Offset);    	compilable	  [FE]  NullPointerException  	39	2	replace
289	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset++);  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset++);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset++);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Offset);    	compilable	  [FE]  NullPointerException  	39	2	replace
290	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);  [CE]  cannot  find  symbol  ce  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  ce	11	None	replace
291	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig  +  1);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	11	2	replace
292	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig  +  1);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig  +  1);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	11	2	replace
293	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
294	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  File  f  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	73	None	replace
295	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	73	None	replace
296	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  Orig  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name);  File  f  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    f    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	73	None	replace
297	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	50	None	replace
298	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.getName());  [CE]  cannot  find  symbol  ce  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ce	50	None	replace
299	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	65	None	replace
300	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
301	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
302	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  f  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  File  f  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    File  f  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  incompatible  types	4	None	add
303	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
304	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(orig);  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
305	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig);  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entryEncoding  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(orig);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	72	None	replace
306	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
307	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  nc  =  entriesWithoutUTF8Flag.get(orig);  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	72	2	replace
308	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.find(orig);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.find(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.find(orig);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
309	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	77	None	replace
310	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  fileNameLen);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  fileNameLen);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1  +  fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	77	None	replace
311	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.encode(ze);  [CE]  method  encode  in  interface  ZipEncoding  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  zipEncoding.encode(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.encode(ze);	  NameAndComment    nc    =    zipEncoding.get(ze);    	non-compiled	[CE]  method  encode  in  interface  ZipEncoding  cannot  be  applied  to  given  types;	27	None	replace
312	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.remove(orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
313	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(entriesWithoutUTF8Flag))  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(entriesWithoutUTF8Flag))  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(entriesWithoutUTF8Flag))  {  nameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
314	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.add(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.add(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.add(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
315	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ceiling);  [CE]  cannot  find  symbol  ceiling  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ceiling);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(ceiling);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ceiling);    	non-compiled	[CE]  cannot  find  symbol  ceiling	45	None	replace
316	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  1);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  Orig	15	None	replace
317	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_HEADER_LENGTH);  [CE]  cannot  find  symbol  OPTIONAL_HEADER_LENGTH  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_HEADER_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_HEADER_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OPTIONAL_HEADER_LENGTH	80	None	replace
318	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.FONT);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.FONT);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.FONT);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
319	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalHeaderOffset);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalHeaderOffset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(OriginalHeaderOffset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
320	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(original);  [CE]  cannot  find  symbol  original  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(original);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(original);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryEntriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  original	19	None	replace
321	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
322	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_ENCODING_FILENAME_LENGTH);  [CE]  cannot  find  symbol  OPTIONAL_ENCODING_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_ENCODING_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_ENCODING_FILENAME_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol  OPTIONAL_ENCODING_FILENAME_LENGTH	62	None	replace
323	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
324	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Order.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Order.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Order.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
325	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
326	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
327	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  File  f  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  File  f  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    File  f  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  	non-compiled	[CE]  incompatible  types	49	None	add
328	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName);  [CE]  cannot  find  symbol  fileName  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  cannot  find  symbol  fileName	17	None	replace
329	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  hasUTF8Flag);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  hasUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig.name,  hasUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    orig);    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
330	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
331	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
332	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);	  	non-compiled	[CE]  incompatible  types	46	None	add
333	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(ze.name);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(ze.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.get(ze.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.name);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	14	None	replace
334	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig),  entriesWithoutUTF8Flag.comment;  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig),  entriesWithoutUTF8Flag.comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig),  entriesWithoutUTF8Flag.comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  ';'  expected	82	None	replace
335	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).description;  [CE]  cannot  find  symbol  description  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).description;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).description;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  cannot  find  symbol  description	82	None	replace
336	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(ze))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(ze))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(ze))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
337	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.contains(orig))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.contains(orig))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.contains(orig))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
338	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
339	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
340	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OPTIONAL_NAME);  [CE]  cannot  find  symbol  OPTIONAL_NAME  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OPTIONAL_NAME);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(OPTIONAL_NAME);	  NameAndComment    nc    =    entryEncoding.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  OPTIONAL_NAME	76	None	replace
341	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.name,  orig);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.name,  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(Orig.name,  orig);	  NameAndComment    nc    =    entryEncoding.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	76	None	replace
342	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index  +  1);  [CE]  cannot  find  symbol  index  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    	non-compiled	[CE]  cannot  find  symbol  index	47	None	replace
343	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  ze);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(),  ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  ';'  expected	56	None	replace
344	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	56	None	replace
345	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(primaryg);  [CE]  cannot  find  symbol  primaryg  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(primaryg);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(primaryg);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ce);    	non-compiled	[CE]  cannot  find  symbol  primaryg	75	None	replace
346	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.remove(orig);  [CE]  cannot  find  symbol  noUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.remove(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	55	None	replace
347	[BUG]  [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  entriesWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	71	None	replace
348	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	38	None	replace
349	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	34	None	replace
350	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get();  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	34	None	replace
351	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get();  [CE]  cannot  find  symbol  entryEncoding  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get();  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get();	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	34	None	replace
352	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  hasUTF8Flag);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  hasUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  hasUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	63	None	replace
353	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig,  nc.fileNameLen);  [CE]  cannot  find  symbol  nc  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nameMap.put(ze.getName(),  orig,  nc.fileNameLen);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig,  nc.fileNameLen);	  nameMap.put(ze.getName(),    orig);    	non-compiled	[CE]  cannot  find  symbol  nc	57	None	replace
354	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.remove(ze);  [CE]  cannot  find  symbol  noUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  noUTF8Flag.remove(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.remove(ze);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	84	None	replace
355	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	23	None	replace
356	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(org);  [CE]  cannot  find  symbol  org  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(org);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  org	23	None	replace
357	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
358	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  noUTF8Flag);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  noUTF8Flag);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class,  noUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
359	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1  +  fileNameLen);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1  +  fileNameLen);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1  +  fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
360	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileName  +  1);  [CE]  cannot  find  symbol  fileName  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileName  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileName  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  cannot  find  symbol  fileName	48	None	replace
361	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString());  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	70	None	replace
362	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.toString());  [CE]  cannot  find  symbol  ce  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ce	70	None	replace
363	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_SIZE);  [CE]  cannot  find  symbol  OPTIONAL_SIZE  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_SIZE);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OPTIONAL_SIZE);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol  OPTIONAL_SIZE	16	None	replace
364	[BUG]  [BUGGY]  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  nc  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nc  =  entryEntriesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryEntriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	36	None	replace
365	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  4);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  4);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    	compilable	  [FE]  NullPointerException  	5	2	replace
366	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  4);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  4);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  4);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    	compilable	  [FE]  NullPointerException  	5	2	replace
367	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
368	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  mc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  mc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  mc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
369	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  src  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  NameAndComment  src  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    NameAndComment  src  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	10	None	add
370	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.valueOf(orig));  [CE]  cannot  find  symbol  OriginalName  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.valueOf(orig));  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.valueOf(orig));	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
371	[BUG]  [BUGGY]  NameAndComment  nc  =  offsetEntry.get(ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  offsetEntry.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  offsetEntry.get(ze);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
372	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntry.get(orig);  [CE]  cannot  find  symbol  entryEntry  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntry.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntry.get(orig);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEntry	86	None	replace
373	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    NameAndComment  c  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
374	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ce);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
375	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entry);  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entry);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(entry);	  NameAndComment    nc    =    entryEncoding.get(org);    	non-compiled	[CE]  cannot  find  symbol  entry	29	None	replace
376	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entriesWithOUTUTF8Flag  [FE]    AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithOUTUTF8Flag.get(orig);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithOUTUTF8Flag	8	None	replace
377	[BUG]  [BUGGY]  NameAndComment  nc  =  entries.get(orig);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entries.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entries.get(orig);	  NameAndComment    nc    =    entryEncoding.get(orig);    	non-compiled	[CE]  incompatible  types	26	None	replace
378	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File    f    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  incompatible  types	67	None	replace
379	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1L);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	52	None	replace
380	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	compilable	  [FE]  NullPointerException  	52	2	replace
381	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1L);  [FE]  NullPointerException  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	compilable	  [FE]  NullPointerException  	52	2	replace
382	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1L);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1L);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1L);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	52	None	replace
383	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entryEntriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	11	None	replace
384	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(og);  [CE]  cannot  find  symbol  og  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(og);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(og);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  og	11	None	replace
385	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryEncoding.get(offset  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  NameAndComment  nc  =  entryEncoding.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    NameAndComment  nc  =  entryEncoding.get(offset  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	46	None	add
386	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
387	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag)  {  nameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
388	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(archiveName))  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(archiveName))  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(archiveName))  {  nameMap.put(ze.getName(),  orig);  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    nameMap.put(ze.getName(),    orig);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
389	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.DOUBLE);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.DOUBLE);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.DOUBLE);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
390	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.OFFSET);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.OFFSET);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset.OFFSET);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	80	None	replace
391	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH	30	None	replace
392	[BUG]  [BUGGY]  NameAndComment  nc  =  entries.get(offset);  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entries.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entries.get(offset);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  incompatible  types	30	None	replace
393	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.CFD_LOCATOR_OFFSET);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.CFD_LOCATOR_OFFSET);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET	30	None	replace
394	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.BYTE_SHIFT);  [CE]  cannot  find  symbol  BYTE_SHIFT  [FE]                            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.BYTE_SHIFT);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OffsetEntry.BYTE_SHIFT);	  NameAndComment    nc    =    entryEncoding.get(offset);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SHIFT	30	None	replace
395	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  orig);  [CE]  cannot  find  symbol  Orig  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  +  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol  Orig	16	None	replace
396	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  -  1);  [CE]  cannot  find  symbol  Orig  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  -  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT  -  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.FONT);    	non-compiled	[CE]  cannot  find  symbol  Orig	16	None	replace
397	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(orig);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
398	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(Orig.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(Orig.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
399	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origer.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origer.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Origer.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.class);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
400	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    entryEntriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	36	None	replace
401	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  1);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	38	None	replace
402	[BUG]  [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);  [CE]  cannot  find  symbol  nc  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  nc	66	None	replace
403	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  TitleAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  TitleAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.remove(orig);    TitleAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
404	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  SHORT;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  SHORT;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  SHORT;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
405	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    	compilable	  [FE]  NullPointerException  	47	2	replace
406	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  3);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset    +    1);    	compilable	  [FE]  NullPointerException  	47	2	replace
407	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.encode(ze.name);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.encode(ze.name);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.encode(ze.name);	  NameAndComment    nc    =    entryEncoding.get(Orig.name);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	76	None	replace
408	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ce);  [CE]  cannot  find  symbol  ce  [FE]                  NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ce);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(ce);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  ce	23	None	replace
409	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ordinal);  [CE]  cannot  find  symbol  ordinal  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ordinal);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(ordinal);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    entryWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  ordinal	23	None	replace
410	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName  +  1);  [CE]  cannot  find  symbol  fileName  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileName  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  cannot  find  symbol  fileName	48	None	replace
411	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileNameLen  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileNameLen  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  fileNameLen  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
412	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  offset  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  offset  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig,  offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    orig    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	48	None	replace
413	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(0);  [CE]  cannot  find  symbol  entryEncoding  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(0);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	31	None	replace
414	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(offset);  [CE]  cannot  find  symbol  namesWithoutUTF8Flag  [FE]                NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    namesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  namesWithoutUTF8Flag	22	None	replace
415	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalRelativeHeaderOffset);  [CE]  cannot  find  symbol  OriginalRelativeHeaderOffset  [FE]                          AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalRelativeHeaderOffset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalRelativeHeaderOffset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ceiling);    	non-compiled	[CE]  cannot  find  symbol  OriginalRelativeHeaderOffset	45	None	replace
416	[BUG]  [BUGGY]  NameAndComment  c  =  filesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  c  =  filesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  c  =  filesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    c    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	71	None	replace
417	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig);  [CE]  cannot  find  symbol  Orig  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(Orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment    nc    =    filesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  Orig	20	None	replace
418	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryEncoding.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  entryEncoding.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  entryEncoding.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
419	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.toString()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze.toString()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	69	None	add
420	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getName(orig);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getName(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getName(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
421	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(element);  [CE]  cannot  find  symbol  element  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(element);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(element);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(original);    	non-compiled	[CE]  cannot  find  symbol  element	2	None	replace
422	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.length);  [CE]  cannot  find  symbol  OriginalFileName  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.length);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalFileName.length);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(original);    	non-compiled	[CE]  cannot  find  symbol  OriginalFileName	2	None	replace
423	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.getName());  [CE]  cannot  find  symbol  entryEncoding  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.getName());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(ze.getName());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	50	None	replace
424	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toUpperCase());  [CE]  cannot  find  symbol  OriginalName  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toUpperCase());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toUpperCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
425	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase()  +  1);  [CE]  cannot  find  symbol  OriginalName  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase()  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol  OriginalName	78	None	replace
426	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig).comment;  [CE]  cannot  find  symbol  entryEncoding  [FE]        NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig).comment;  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(orig).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig).comment;    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	82	None	replace
427	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.keySet().get(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
428	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(OriginalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
429	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class),  orig);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class),  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class),  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  ';'  expected	79	None	replace
430	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OrdinalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OrdinalPrettyPrinter.class);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OrdinalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
431	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  return;  }  [CE]  cannot  find  symbol  nc  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  nc	13	None	replace
432	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  return;  }  [CE]  cannot  find  symbol  nc  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  return;  }  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName()))  {  return;  }	  if(orig!=    null)    {    if(!orig.equals(ze.getName()))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  nc	13	None	replace
433	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  orig);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME  +  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.NAME);    	non-compiled	[CE]  cannot  find  symbol  Orig	15	None	replace
434	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NodeAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  NodeAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    NodeAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
435	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  Entry  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  Entry  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig    +    1);    Entry  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
436	[BUG]  [BUGGY]  NameAndComment  nc  =  entries.get(ze);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entries.get(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entries.get(ze);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  incompatible  types	86	None	replace
437	[BUG]  [BUGGY]  NameAndComment  nc  =  entry.get(offset);  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entry.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entry.get(offset);	  NameAndComment    nc    =    entry.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	86	None	replace
438	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.find(ze);  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.find(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.find(ze);	  NameAndComment    nc    =    zipEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	27	None	replace
439	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    TitleAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
440	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  Entry  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  Entry  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(orig);    Entry  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
441	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.toString());  [CE]  cannot  find  symbol  entryEncoding  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze.toString());  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(ze.toString());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.toString()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	70	None	replace
442	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(2);    	compilable	  [FE]  NullPointerException  	33	2	replace
443	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(3);  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(3);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(3);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment    nc    =    entriesWithoutUTF8Flag.get(2);    	compilable	  [FE]  NullPointerException  	33	2	replace
444	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(originalElement);  [CE]  cannot  find  symbol  originalElement  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(originalElement);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(originalElement);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(i);    	non-compiled	[CE]  cannot  find  symbol  originalElement	1	None	replace
445	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(signatureBytes);  [CE]  cannot  find  symbol  signatureBytes  [FE]          NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(signatureBytes);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(signatureBytes);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ordinalHeaderOffset);    	non-compiled	[CE]  cannot  find  symbol  signatureBytes	81	None	replace
446	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);  [CE]  cannot  find  symbol  Orig  [FE]    AssertionFailedError    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(Orig);	  NameAndComment    nc    =(NameAndComment)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  Orig	8	None	replace
447	[BUG]  [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(ordinal);  [CE]  cannot  find  symbol  ordinal  [FE]                    NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  File  nc  =  entriesWithoutUTF8Flag.get(ordinal);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	File  nc  =  entriesWithoutUTF8Flag.get(ordinal);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  ordinal	24	None	replace
448	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(org);  [CE]  cannot  find  symbol  org  [FE]                              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(org);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(org);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol  org	58	None	replace
449	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key(ze);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.key(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.key(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
450	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(ze);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.getKey();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
451	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryEncoding.get(ze.getName()  +  1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  NameAndComment  nc  =  entryEncoding.get(ze.getName()  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze.getName()    +    1);    NameAndComment  nc  =  entryEncoding.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	49	None	add
452	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(offset);  [CE]  cannot  find  symbol  entryEncoding  [FE]              AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.remove(offset);	  NameAndComment    nc    =    entryEncoding.remove(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	84	None	replace
453	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  ze  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  ze  +  1);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset,  ze  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze,    offset    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
454	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(offset);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(offset);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  nc.get(offset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
455	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.read(orig);  [CE]  no  suitable  method  found  for  read(String)  [FE]                  AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.read(orig);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.read(orig);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	28	None	replace
456	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.nameAndComment(ze);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.nameAndComment(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.nameAndComment(ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
457	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.list(ze);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  archive.list(ze);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.list(ze);	  NameAndComment    nc    =    archive.get(ze);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
458	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  Orig.BYTE_SHIFT);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]            AssertionFailedError      [CONTEXT]      lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  Orig.BYTE_SHIFT);  [BUGGY]      ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name,  Orig.BYTE_SHIFT);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name,    ze);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	63	None	replace
