bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(i);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(org);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
2	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(original);  [CE]  cannot  find  symbol  original  [FE]            AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(original);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(original);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(org);    	non-compiled	[CE]  cannot  find  symbol  original	3	None	replace
3	[BUG]  [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(orig);  [CE]  cannot  find  symbol  noUTF8Flag  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  noUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  noUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	2	None	replace
4	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	2	2	replace
5	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	compilable	  [FE]  NullPointerException  	2	2	replace
6	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	2	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	      	compilable	  [FE]  AssertionFailedError  	10	1	replace
8	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(ze);	      	compilable	  [FE]  AssertionFailedError  	10	1	replace
9	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  orig);  }	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	      	compilable	  [FE]  NullPointerException  	10	2	replace
11	[BUG]  [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [FE]  NullPointerException  [FE]                        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =(NameAndComment)entriesWithoutUTF8Flag.get(orig);	      	compilable	  [FE]  NullPointerException  	10	2	replace
12	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getName();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getName();  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getName();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  return;  }  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName()))  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name);  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	11	None	replace
15	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME);  [CE]  cannot  find  symbol  Orig  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.NAME);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
16	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT);  [CE]  cannot  find  symbol  Orig  [FE]            AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.FONT);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
17	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  orig);  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
18	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
19	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
20	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  filesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
21	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryEncoding.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryEncoding.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  entryEncoding.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
22	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  namesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
23	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
24	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File  nc  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
25	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(id);  [CE]  cannot  find  symbol  id  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(id);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(id);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig);    	non-compiled	[CE]  cannot  find  symbol  id	12	None	replace
26	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig);  [CE]  cannot  find  symbol  entryEncoding  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEncoding.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(orig);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	13	None	replace
27	[BUG]  [BUGGY]  NameAndComment  nc  =  zipEncoding.get(ze);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  zipEncoding.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  zipEncoding.get(ze);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
28	[BUG]  [BUGGY]  NameAndComment  nc  =  archive.get(ze);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  archive.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  archive.get(ze);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
29	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(org);  [CE]  cannot  find  symbol  org  [FE]                AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEncoding.get(org);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(org);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol  org	13	None	replace
30	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(offset);  [CE]  cannot  find  symbol  entryEncoding  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEncoding.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(offset);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	13	None	replace
31	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
32	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(1);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
33	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(2);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
34	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get();  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get();  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get();	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
35	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
36	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
37	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryEncoding.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryEncoding.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  entryEncoding.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
38	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  filesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
39	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
40	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File  nc  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
41	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]              AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	6	None	replace
42	[BUG]  [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  namesWithoutUTF8Flag  [FE]                AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  namesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  namesWithoutUTF8Flag	6	None	replace
43	[BUG]  [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  filesWithoutUTF8Flag  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  filesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  filesWithoutUTF8Flag	6	None	replace
44	[BUG]  [BUGGY]  NameAndComment  nc  =  entrysWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entrysWithoutUTF8Flag  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entrysWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entrysWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entrysWithoutUTF8Flag	6	None	replace
45	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ceiling);  [CE]  cannot  find  symbol  ceiling  [FE]                      AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ceiling);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ceiling);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  ceiling	6	None	replace
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	5	2	replace
47	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	compilable	  [FE]  NullPointerException  	5	2	replace
48	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	9	None	replace
49	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	compilable	  [FE]  NullPointerException  	9	2	replace
50	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [FE]  NullPointerException  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.getName()  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	compilable	  [FE]  NullPointerException  	9	2	replace
51	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  2);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  2);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  2);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
52	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1L);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1L);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1L);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
53	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1;  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);	      	compilable	  [FE]  NullPointerException  	10	2	replace
55	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [FE]  NullPointerException  [FE]                    AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.remove(orig);	      	compilable	  [FE]  NullPointerException  	10	2	replace
56	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get();  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get();	      	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	10	None	replace
57	[BUG]  [BUGGY]  nameMap.put(ze.getName(),  orig);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  nameMap.put(ze.getName(),  orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	nameMap.put(ze.getName(),  orig);	      	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	10	None	replace
58	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey();  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.getKey();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
59	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index);  [CE]  cannot  find  symbol  index  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(index);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  index	8	None	replace
60	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(array);  [CE]  cannot  find  symbol  array  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(array);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(array);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  array	8	None	replace
61	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(oldog);  [CE]  cannot  find  symbol  oldog  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(oldog);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(oldog);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(org);    	non-compiled	[CE]  cannot  find  symbol  oldog	3	None	replace
62	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  ze);  [CE]  cannot  find  symbol  Orig  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig.name,  ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
64	[BUG]  [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]              AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	6	None	replace
65	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
66	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
67	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  File  f  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    File  f  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  incompatible  types	4	None	add
68	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(offset);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  nc  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    nc  =  entriesWithoutUTF8Flag.get(offset);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	compilable	  [FE]  NullPointerException  	9	2	replace
70	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [FE]  NullPointerException  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze.toString()  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	compilable	  [FE]  NullPointerException  	9	2	replace
71	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  c  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
72	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    nc  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
73	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  File  f  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    File  f  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  incompatible  types	1	None	add
74	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entryWithoutUTF8Flag.get(0);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
75	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  [CE]  cannot  find  symbol  ce  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig);    	non-compiled	[CE]  cannot  find  symbol  ce	12	None	replace
76	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.name);  [CE]  cannot  find  symbol  Orig  [FE]        AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEncoding.get(Orig.name);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.get(Orig.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(Orig.name);    	non-compiled	[CE]  cannot  find  symbol  Orig	11	None	replace
77	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  offset  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze    +    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	9	None	replace
78	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());  [CE]  cannot  find  symbol  OriginalName  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalName.toLowerCase());	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(org);    	non-compiled	[CE]  cannot  find  symbol  OriginalName	3	None	replace
79	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalPrettyPrinter.class);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(org);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
80	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset);  [CE]  cannot  find  symbol  OriginalHeaderOffset  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(OriginalHeaderOffset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  OriginalHeaderOffset	5	None	replace
81	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinalHeaderOffset);  [CE]  cannot  find  symbol  ordinalHeaderOffset  [FE]      NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinalHeaderOffset);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ordinalHeaderOffset);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(offset);    	non-compiled	[CE]  cannot  find  symbol  ordinalHeaderOffset	5	None	replace
82	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).comment;  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).comment;  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig).comment;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    	non-compiled	[CE]  incompatible  types	2	None	replace
83	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(0);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	7	None	add
84	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(ze);  [CE]  cannot  find  symbol  entryEncoding  [FE]          AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entryEncoding.remove(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entryEncoding.remove(ze);	  NameAndComment    nc    =    entryEncoding.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	13	None	replace
85	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    NullPointerException    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment    nc    =    entriesWithoutUTF8Flag.get(orig);    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(Orig);	  	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	1	None	add
86	[BUG]  [BUGGY]  NameAndComment  nc  =  entry.get(ze);  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError    [CONTEXT]    lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();    [BUGGY]  NameAndComment  nc  =  entry.get(ze);  [BUGGY]    ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	NameAndComment  nc  =  entry.get(ze);	  NameAndComment    nc    =    noUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	6	None	replace
