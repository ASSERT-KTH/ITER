bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(offsetEntry.getLength(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getLength(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getLength(),  bis)  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  ')'  expected	50	None	replace
2	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset.getLength())  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset.getLength())  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	50	None	replace
3	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getLength())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getLength())  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  ')'  expected	50	None	replace
4	[BUG]  [BUGGY]  switch(offsetEntry.getLength()  -  1)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getLength()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getLength()  -  1)  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
5	[BUG]  [BUGGY]  switch(ze.getLength())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getLength())  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
6	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  entries.get(0);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
7	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  entries.get(offsetEntry);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
8	[BUG]  [BUGGY]  final  Entry  <  K,  V>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Entry  <  K,  V>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Entry  <  K,  V>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
9	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(start);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(start);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  entries.get(start);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
10	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValue();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValue();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  offsetEntry.getValue();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
11	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  bis.getCompressedSize())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  bis.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  bis.getCompressedSize())  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
12	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1)  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
13	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getSize())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getSize())  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
14	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getCompressedSize()  -  1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getCompressedSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getCompressedSize()  -  1)  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
15	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getRemaining())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getRemaining())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getRemaining())  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
16	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offset.getMethod())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offset.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offset.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
17	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  start.getMethod())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  start.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  start.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
18	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  z.getMethod())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  z.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  z.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
19	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset.getMethod(),  bis)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset.getMethod(),  bis)  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
20	[BUG]  [BUGGY]  switch(dataOffset.getMethod())  {  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(dataOffset.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(dataOffset.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	31	None	replace
21	[BUG]  [BUGGY]  switch  (entry.getMethod(),  start)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (entry.getMethod(),  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (entry.getMethod(),  start)  {	  switch    (entry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
22	[BUG]  [BUGGY]  switch  (start.getMethod(),  bis)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (start.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (start.getMethod(),  bis)  {	  switch    (entry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
23	[BUG]  [BUGGY]  Switch(offsetEntry.getCompressedSize(),  bis)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getCompressedSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getCompressedSize(),  bis)  {	  Switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
24	[BUG]  [BUGGY]  Switch(offsetEntry.getRequestedSize())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getRequestedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getRequestedSize())  {	  Switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
25	[BUG]  [BUGGY]  Switch(offsetEntry.getCompressedSize()  +  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getCompressedSize()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getCompressedSize()  +  1)  {	  Switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
26	[BUG]  [BUGGY]  Switch(offsetEntry.getLowerCase())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getLowerCase())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getLowerCase())  {	  Switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
27	[BUG]  [BUGGY]  Switch(offsetEntry.getCompressedSize()  -  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getCompressedSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getCompressedSize()  -  1)  {	  Switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
28	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
29	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
30	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
31	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
32	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
33	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
34	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
35	[BUG]  [BUGGY]  switch(offset,  ze.getMethod())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset,  ze.getMethod())  {	  switch(start.getMethod())    {    	non-compiled	[CE]  ')'  expected	47	None	replace
36	[BUG]  [BUGGY]  switch(start,  bis.getMethod())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  bis.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  bis.getMethod())  {	  switch(start.getMethod())    {    	non-compiled	[CE]  ')'  expected	47	None	replace
37	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset(),  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset(),  bis)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
38	[BUG]  [BUGGY]  Switch(start,  offsetEntry.dataOffset())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start,  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start,  offsetEntry.dataOffset())  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
39	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  +  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  +  1)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
40	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
41	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  -  start)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  -  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  -  start)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
42	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset(),  start)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset(),  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset(),  start)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
43	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
44	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
45	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
46	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
47	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
48	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
49	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  return  bis;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
51	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entriesWithoutUTF8Flag.entrySet();  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entriesWithoutUTF8Flag.entrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entriesWithoutUTF8Flag.entrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
52	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  new  HashMap();  return  entriesWithoutUTF8Flag.entrySet();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  new  HashMap();  return  entriesWithoutUTF8Flag.entrySet();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  new  HashMap();  return  entriesWithoutUTF8Flag.entrySet();	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
53	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  return  bis;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
54	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entrySet.entrySet();  return  bis;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entrySet.entrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entrySet.entrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
55	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntrySet();  return  bis;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
56	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  ze.entrySet();  return  bis;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  ze.entrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  ze.entrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
57	[BUG]  [BUGGY]  Switch(offsetEntry.getSize(),  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getSize(),  bis)  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
58	[BUG]  [BUGGY]  Switch(offsetEntry.getSize()  -  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getSize()  -  1)  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
59	[BUG]  [BUGGY]  Switch(offsetEntry.getSize()  +  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getSize()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getSize()  +  1)  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
60	[BUG]  [BUGGY]  Switch(offsetEntry.getStart())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getStart())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getStart())  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
61	[BUG]  [BUGGY]  Switch(offsetEntry.getEnd())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getEnd())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getEnd())  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
62	[BUG]  [BUGGY]  switch(start,  bis.getSize())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  bis.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  bis.getSize())  {	  switch(start,    ze.getSize())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
63	[BUG]  [BUGGY]  switch(start,  offsetEntry.getSize())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.getSize())  {	  switch(start,    ze.getSize())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
64	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offset.getSize())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offset.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offset.getSize())  {	  switch(start,    ze.getSize())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
65	[BUG]  [BUGGY]  switch(offsetEntry.next(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.next(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.next(),  bis)  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  ')'  expected	52	None	replace
66	[BUG]  [BUGGY]  switch(offsetEntry.getValue())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getValue())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getValue())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
67	[BUG]  [BUGGY]  switch(offsetEntry.nextToken())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.nextToken())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.nextToken())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
68	[BUG]  [BUGGY]  switch(offsetEntry.getKey())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getKey())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getKey())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
69	[BUG]  [BUGGY]  switch(offsetEntry.getName())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getName())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getName())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
70	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
71	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  ||  offsetEntry.dataOffset())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  ||  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  ||  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
72	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  &&  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
73	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  /|  offsetEntry.dataOffset())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  /|  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  /|  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
74	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  offsetEntry.dataOffset())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	35	None	replace
75	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  bis)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  bis)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
76	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset  +  1)  {  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset  +  1)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
77	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset  -  start)  {  [CE]  possible  loss  of  precision  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset  -  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset  -  start)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
78	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  remaining)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  remaining)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
79	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  start)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  start)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
80	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset  -  1)  {  [CE]  possible  loss  of  precision  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset  -  1)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
81	[BUG]  [BUGGY]  switch(offset.getCompressedSize())  {  [CE]  cannot  find  symbol  offset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset.getCompressedSize())  {	  switch(entry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol  offset	16	None	replace
82	[BUG]  [BUGGY]  switch(obj.getCompressedSize())  {  [CE]  cannot  find  symbol  obj  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(obj.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(obj.getCompressedSize())  {	  switch(entry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol  obj	16	None	replace
83	[BUG]  [BUGGY]  switch(entries.getCompressedSize())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entries.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entries.getCompressedSize())  {	  switch(entry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
84	[BUG]  [BUGGY]  switch(offset.dataOffset())  {  [CE]  cannot  find  symbol  offset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset.dataOffset())  {	  switch(ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  offset	70	None	replace
85	[BUG]  [BUGGY]  switch(offset,  ze.dataOffset())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset,  ze.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset,  ze.dataOffset())  {	  switch(ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	70	None	replace
86	[BUG]  [BUGGY]  switch(dataOffset.dataOffset())  {  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(dataOffset.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(dataOffset.dataOffset())  {	  switch(ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	70	None	replace
87	[BUG]  [BUGGY]  switch(pos.dataOffset())  {  [CE]  cannot  find  symbol  pos  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(pos.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(pos.dataOffset())  {	  switch(ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  pos	70	None	replace
88	[BUG]  [BUGGY]  switch(start,  bis.getCompressedSize())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  bis.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  bis.getCompressedSize())  {	  switch(start,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
89	[BUG]  [BUGGY]  switch(offsetEntry,  ze.getCompressedSize())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry,  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry,  ze.getCompressedSize())  {	  switch(start,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
90	[BUG]  [BUGGY]  switch(start,  offsetEntry.getCompressedSize())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.getCompressedSize())  {	  switch(start,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
91	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  start.getCompressedSize())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  start.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  start.getCompressedSize())  {	  switch(start,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
92	[BUG]  [BUGGY]  switch(start,  offsetEntry.dataOffset()  -  1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.dataOffset()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.dataOffset()  -  1)  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
93	[BUG]  [BUGGY]  switch(start,  offsetEntry.dataOffset)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.dataOffset)  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
94	[BUG]  [BUGGY]  switch(start,  bis.dataOffset())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  bis.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  bis.dataOffset())  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
95	[BUG]  [BUGGY]  switch(start,  offsetEntry.dataOffset(),  bis)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.dataOffset(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.dataOffset(),  bis)  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
96	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  start,  ze.getMethod())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  start,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  start,  ze.getMethod())  {	  switch(offsetEntry.dataOffset,    ze.getMethod())    {    	non-compiled	[CE]  ')'  expected	28	None	replace
97	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  bis.getMethod())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  bis.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  bis.getMethod())  {	  switch(offsetEntry.dataOffset,    ze.getMethod())    {    	non-compiled	[CE]  ')'  expected	28	None	replace
98	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {	  switch(offsetEntry.dataOffset,    ze.getMethod())    {    	non-compiled	[CE]  ')'  expected	28	None	replace
99	[BUG]  [BUGGY]  switch(offsetEntry.getSize()  -  1)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getSize()  -  1)  {	  switch(ze.getSize()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
100	[BUG]  [BUGGY]  switch(start.getSize()  -  1)  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start.getSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start.getSize()  -  1)  {	  switch(ze.getSize()    -    1)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
101	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
102	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
103	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
104	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
105	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
106	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
107	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.values();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
108	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entrySet();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
109	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
110	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.cloneTree();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.cloneTree();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.cloneTree();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
111	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
112	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entryMap();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entryMap();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.entryMap();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entryMap();    break;    	non-compiled	[CE]  orphaned  case	65	None	replace
113	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entryMap();    break;    	non-compiled	[CE]  orphaned  case	65	None	replace
114	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  +  ';',  bis)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  +  ';',  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  +  ';',  bis)  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
115	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  /  ';')  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  /  ';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  /  ';')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
116	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  +  ':')  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  +  ':')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  +  ':')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
117	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  *  ';')  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  *  ';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  *  ';')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
118	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()).append(';')  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()).append(';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()).append(';')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
119	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  +  ',')  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  +  ',')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  +  ',')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
120	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
121	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
122	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
123	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
124	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
125	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
126	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
127	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
128	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
129	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
130	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
131	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  /  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  /  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  /  1)  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
132	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()).startsWith( "Archive ")  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()).startsWith( "Archive ")  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()).startsWith( "Archive ")  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  	10	None	replace
133	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()).returnNull();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()).returnNull();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()).returnNull();	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
134	[BUG]  [BUGGY]  switch(offsetEntry.getCompressedSize()  -  1)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getCompressedSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getCompressedSize()  -  1)  {	  switch(ze.getCompressedSize()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
135	[BUG]  [BUGGY]  switch(z.getCompressedSize())  {  [CE]  cannot  find  symbol  z  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(z.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(z.getCompressedSize())  {	  switch(ze.getCompressedSize()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol  z	72	None	replace
136	[BUG]  [BUGGY]  Switch(entry.getMethod(),  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod(),  bis)  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
137	[BUG]  [BUGGY]  Switch(start,  entry.getMethod())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start,  entry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start,  entry.getMethod())  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
138	[BUG]  [BUGGY]  Switch(start.getMethod())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start.getMethod())  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
139	[BUG]  [BUGGY]  Switch(entry.getMethod()),  bis)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()),  bis)  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
140	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
141	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
142	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
143	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(line,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(line,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(line,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
144	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze,  bis);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze,  bis);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze,  bis);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
145	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
146	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
147	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
148	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze  +  1);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze  +  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze  +  1);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
149	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
150	[BUG]  [BUGGY]  switch(remaining.getMethod())  {  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(remaining.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(remaining.getMethod())  {	  switch(offsets.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  remaining	32	None	replace
151	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
152	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
153	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
154	[BUG]  [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
155	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
156	[BUG]  [BUGGY]  Switch(start,  ze.getMethod())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start,  ze.getMethod())  {	  Switch(ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
157	[BUG]  [BUGGY]  Switch(ze.getMethod(),  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod(),  bis)  {	  Switch(ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
158	[BUG]  [BUGGY]  Switch(z.getMethod())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(z.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(z.getMethod())  {	  Switch(ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
159	[BUG]  [BUGGY]  Switch(options.getMethod())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(options.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(options.getMethod())  {	  Switch(ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
160	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
161	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryCount.keySet();  return  bis;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryCount.keySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entryCount.keySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
162	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  return  bis;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
163	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.dataSet();  return  bis;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.dataSet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.dataSet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
164	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  start)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  start)  {	  switch    (ze.getMethod(),    start)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
165	[BUG]  [BUGGY]  switch  (ze.getMethod(),  remaining)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (ze.getMethod(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (ze.getMethod(),  remaining)  {	  switch    (ze.getMethod(),    start)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
166	[BUG]  [BUGGY]  switch  (offset.getMethod(),  start)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offset.getMethod(),  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offset.getMethod(),  start)  {	  switch    (ze.getMethod(),    start)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
167	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  &&  offsetEntry.getMethod())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  &&  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  &&  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
168	[BUG]  [BUGGY]  switch(offsetEntry.getMethod(),  offsetEntry.getMethod())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod(),  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod(),  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
169	[BUG]  [BUGGY]  switch(offsetEntry.getMethod(),  start  ||  offsetEntry.getMethod())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod(),  start  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod(),  start  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
170	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  /  ||  offsetEntry.getMethod())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  /  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  /  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
171	[BUG]  [BUGGY]  switch(offsetEntry.getMethod(),  ze.getMethod())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod(),  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod(),  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
172	[BUG]  [BUGGY]  switch(offset.getSize())  {  [CE]  cannot  find  symbol  offset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset.getSize())  {	  switch(entry.getSize())    {    	non-compiled	[CE]  cannot  find  symbol  offset	21	None	replace
173	[BUG]  [BUGGY]  switch(obj.getSize())  {  [CE]  cannot  find  symbol  obj  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(obj.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(obj.getSize())  {	  switch(entry.getSize())    {    	non-compiled	[CE]  cannot  find  symbol  obj	21	None	replace
174	[BUG]  [BUGGY]  switch(entries.getSize())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entries.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entries.getSize())  {	  switch(entry.getSize())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
175	[BUG]  [BUGGY]  switch(offsetEntry.getSize(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getSize(),  bis)  {	  switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
176	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset.getSize())  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset.getSize())  {	  switch(offsetEntry.getSize())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	14	None	replace
177	[BUG]  [BUGGY]  switch(start,  ze.dataOffset())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  ze.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  ze.dataOffset())  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
178	[BUG]  [BUGGY]  switch(offsetEntry,  bis.dataOffset())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry,  bis.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry,  bis.dataOffset())  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
179	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  bis.length())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  bis.length())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  bis.length())  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
180	[BUG]  [BUGGY]  switch(start.dataOffset())  {  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start.dataOffset())  {	  switch(zip.dataOffset())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	71	None	replace
181	[BUG]  [BUGGY]  switch(frame.dataOffset())  {  [CE]  cannot  find  symbol  frame  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(frame.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(frame.dataOffset())  {	  switch(zip.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  frame	71	None	replace
182	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  null)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  null)  {	  switch    (ze.getMethod(),    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
183	[BUG]  [BUGGY]  switch(entry.getMethod(),  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getMethod(),  null)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getMethod(),  null)  {	  switch    (ze.getMethod(),    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
184	[BUG]  [BUGGY]  switch(entries.getMethod(),  bis)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entries.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entries.getMethod(),  bis)  {	  switch(entries.getMethod())    {    	non-compiled	[CE]  ')'  expected	23	None	replace
185	[BUG]  [BUGGY]  switch(entrys.getMethod())  {  [CE]  cannot  find  symbol  entrys  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entrys.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entrys.getMethod())  {	  switch(entries.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  entrys	23	None	replace
186	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  +  1,  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  +  1,  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  +  1,  bis)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
187	[BUG]  [BUGGY]  switch(offsetEntry.dataLength(),  bis)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataLength(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataLength(),  bis)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
188	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  bis),  this)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  bis),  this)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  bis),  this)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
189	[BUG]  [BUGGY]  switch(offsetEntry.dataLength(),  dataOffset)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataLength(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataLength(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
190	[BUG]  [BUGGY]  switch(offsetEntry.getSize(),  dataOffset)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getSize(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getSize(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
191	[BUG]  [BUGGY]  switch(dataOffset.dataOffset(),  offsetEntry.dataOffset)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(dataOffset.dataOffset(),  offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(dataOffset.dataOffset(),  offsetEntry.dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
192	[BUG]  [BUGGY]  switch(offsetEntry.getValue(),  dataOffset)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getValue(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getValue(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
193	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  dataOffset)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  -  1,  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
194	[BUG]  [BUGGY]  switch(offset,  ze.getCompressedSize())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset,  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset,  ze.getCompressedSize())  {	  switch(start.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	17	None	replace
195	[BUG]  [BUGGY]  switch(obj.getMethod())  {  [CE]  cannot  find  symbol  obj  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(obj.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(obj.getMethod())  {	  switch(type.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  obj	74	None	replace
196	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.keySet();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    break;    	non-compiled	[CE]  orphaned  case	64	None	replace
197	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getValue();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getValue();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getValue();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    break;    	non-compiled	[CE]  orphaned  case	64	None	replace
198	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  remaining)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  remaining)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
199	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  start,  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  start,  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  start,  bis)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
200	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  start,  remaining)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  start,  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  start,  remaining)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
201	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  main)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  main)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  main)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
202	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  rest)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  rest)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  rest)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
203	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  end)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  end)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  end)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
204	[BUG]  [BUGGY]  Switch(offsetEntry.getCompressedSize()),  bis)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getCompressedSize()),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getCompressedSize()),  bis)  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
205	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()),  bis,  false)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()),  bis,  false)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()),  bis,  false)  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
206	[BUG]  [BUGGY]  Switch(offsetEntry.getSize()),  bis)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getSize()),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getSize()),  bis)  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
207	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()))  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()))  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
208	[BUG]  [BUGGY]  switch(pos.getMethod())  {  [CE]  cannot  find  symbol  pos  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(pos.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(pos.getMethod())  {	  switch(offset.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  pos	22	None	replace
209	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  bis;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
210	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  return  bis;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
211	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
212	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  return  bis;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
213	[BUG]  [BUGGY]  InputStream  ab  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  ab;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  ab  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  ab;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  ab  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  return  ab;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
214	[BUG]  [BUGGY]  switch(offsetEntry.getCompressedSize(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getCompressedSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getCompressedSize(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
215	[BUG]  [BUGGY]  switch(offsetEntry.getRequestedSize(),  bis)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getRequestedSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getRequestedSize(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
216	[BUG]  [BUGGY]  switch(entry.getCompressedSize(),  bis)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getCompressedSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getCompressedSize(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
217	[BUG]  [BUGGY]  switch(offsetEntry.getLowerBound(),  bis)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getLowerBound(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getLowerBound(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
218	[BUG]  [BUGGY]  switch(start.dataOffset(),  offsetEntry.dataOffset)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start.dataOffset(),  offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start.dataOffset(),  offsetEntry.dataOffset)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
219	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  main)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  main)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  main)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
220	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  remainder)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  remainder)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  remainder)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
221	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  rest)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  rest)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  rest)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
222	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  &&  ze.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  &&  ze.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  &&  ze.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
223	[BUG]  [BUGGY]  switch(ze.dataOffset()  ||  offsetEntry.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.dataOffset()  ||  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.dataOffset()  ||  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
224	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  ||  dataOffset.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  ||  dataOffset.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  ||  dataOffset.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
225	[BUG]  [BUGGY]  switch(dataOffset.dataOffset()  ||  offsetEntry.dataOffset())  {  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(dataOffset.dataOffset()  ||  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(dataOffset.dataOffset()  ||  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
226	[BUG]  [BUGGY]  switch(ze.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
227	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  &&  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  &&  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  &&  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
228	[BUG]  [BUGGY]  switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  METHOD  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD	46	None	replace
229	[BUG]  [BUGGY]  switch(entry.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol  entry	46	None	replace
230	[BUG]  [BUGGY]  switch(zip.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol  zip	46	None	replace
231	[BUG]  [BUGGY]  switch(zip.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  zip  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.getMethod()  ||  offsetEntry.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol  zip	46	None	replace
232	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
233	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
234	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
235	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
236	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
237	[BUG]  [BUGGY]  Switch(start,  offsetEntry.getMethod(),  bis)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start,  offsetEntry.getMethod(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start,  offsetEntry.getMethod(),  bis)  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
238	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset,  offsetEntry.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
239	[BUG]  [BUGGY]  Switch(offsetEntry,  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry,  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry,  offsetEntry.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
240	[BUG]  [BUGGY]  Switch(offsetEntry,  ze.getMethod())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry,  ze.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
241	[BUG]  [BUGGY]  Switch(start,  bis.getMethod())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(start,  bis.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(start,  bis.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
242	[BUG]  [BUGGY]  switch(ze.getMethod()  ||  offsetEntry.getMethod())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getMethod()  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getMethod()  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
243	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  &&  ze.getMethod())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  &&  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  &&  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
244	[BUG]  [BUGGY]  switch(entry.getMethod()  ||  offsetEntry.getMethod())  {  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getMethod()  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getMethod()  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  entry	29	None	replace
245	[BUG]  [BUGGY]  switch(entry.getMethod()  ||  ze.getMethod())  {  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getMethod()  ||  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getMethod()  ||  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  entry	29	None	replace
246	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getCompressedSize())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  ||  ze.getCompressedSize())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
247	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  false)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  false)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  bis,  false)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
248	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  null)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  null)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
249	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  bis,  1)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
250	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  bis,  0)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  bis,  0)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
251	[BUG]  [BUGGY]  switch(offset,  ze.getSize())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offset,  ze.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offset,  ze.getSize())  {	  switch(start.getSize())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
252	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry.dataOffset!=  null)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
253	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
254	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
255	[BUG]  [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
256	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
257	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.getValue();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.getValue();	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
258	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
259	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
260	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
261	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
262	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  ze)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  ze)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  ze)  {	  switch    (offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
263	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  1)  {	  switch    (offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
264	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  bis,  false)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  bis,  false)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  bis,  false)  {	  switch    (offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
265	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset.getCompressedSize())  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset.getCompressedSize())  {	  switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  long  cannot  be  dereferenced	13	None	replace
266	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset().getCompressedSize())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset().getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset().getCompressedSize())  {	  switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
267	[BUG]  [BUGGY]  switch(offsetEntry.getCompressedSize()  ||  ze.getCompressedSize())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getCompressedSize()  ||  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getCompressedSize()  ||  ze.getCompressedSize())  {	  switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
268	[BUG]  [BUGGY]  switch(offsetEntry.getCompressedSize()  ||  offsetEntry.dataOffset  <  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getCompressedSize()  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getCompressedSize()  ||  offsetEntry.dataOffset  <  0)  {	  switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
269	[BUG]  [BUGGY]  switch(remaining.dataOffset(),  offsetEntry.dataOffset)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(remaining.dataOffset(),  offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(remaining.dataOffset(),  offsetEntry.dataOffset)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
270	[BUG]  [BUGGY]  switch(remaining.dataOffset(),  offsetEntry)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(remaining.dataOffset(),  offsetEntry)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(remaining.dataOffset(),  offsetEntry)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
271	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  remaining)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  -  1,  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
272	[BUG]  [BUGGY]  switch(offsetEntry.getSize(),  remaining)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getSize(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getSize(),  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
273	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  +  1,  remaining)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  +  1,  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  +  1,  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
274	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  /  ')')  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  /  ')')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  /  ')')  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
275	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  +  ')',  bis)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  +  ')',  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  +  ')',  bis)  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
276	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  *  ')')  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  *  ')')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  *  ')')  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
277	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  +  ')'  ||  offsetEntry.getMethod()  ==  ';')  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  +  ')'  ||  offsetEntry.getMethod()  ==  ';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  +  ')'  ||  offsetEntry.getMethod()  ==  ';')  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
278	[BUG]  [BUGGY]  switch  (offsetEntry.getMethod(),  end)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch  (offsetEntry.getMethod(),  end)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch  (offsetEntry.getMethod(),  end)  {	  switch    (ze.getMethod(),    end)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
279	[BUG]  [BUGGY]  switch(entry.getMethod(),  end)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getMethod(),  end)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getMethod(),  end)  {	  switch    (ze.getMethod(),    end)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
280	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntry(start);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntry(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  offsetEntry.getEntry(start);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
281	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  bis);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  bis);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  bis);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
282	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
283	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(ze);  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(ze);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
284	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start);  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
285	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start,  bis);  break;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start,  bis);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entryWithoutUTF8Flag.getEntry(start,  bis);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
286	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(ze);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(ze);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
287	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start,  bis);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start,  bis);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start,  bis);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
288	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
289	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  +  1);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  +  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  +  1);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
290	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry);  break;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offsetEntry);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
291	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(limit);  break;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(limit);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(limit);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
292	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(start);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
293	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.get(ze);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
294	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  ze.get(start);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
295	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ze.getRequestedSize())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ze.getRequestedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ze.getRequestedSize())  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
296	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getCompressedSize())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offsetEntry.getCompressedSize())  {	  switch(offsetEntry.dataOffset,    ze.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	51	None	replace
297	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  return  bis;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
298	[BUG]  [BUGGY]  Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.entrySet();  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.entrySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.entrySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
299	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  -  1)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  -  1)  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
300	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()),  bis,  zipEncoding)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()),  bis,  zipEncoding)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()),  bis,  zipEncoding)  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
301	[BUG]  [BUGGY]  switch(remaining,  offsetEntry.dataOffset())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(remaining,  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(remaining,  offsetEntry.dataOffset())  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
302	[BUG]  [BUGGY]  toggle(offsetEntry.dataOffset())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  toggle(offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	toggle(offsetEntry.dataOffset())  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
303	[BUG]  [BUGGY]  switch(start,  offsetEntry.dataOffset()  -  start)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.dataOffset()  -  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.dataOffset()  -  start)  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
304	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getMethod()  >=  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getMethod()  >=  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  ||  ze.getMethod()  >=  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
305	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
306	[BUG]  [BUGGY]  Switch(ze.getMethod()  +  ';')  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()  +  ';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()  +  ';')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
307	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  ||  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
308	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  ||!offsetEntry.getMethod())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  ||!offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  ||!offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
309	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()  ||  ze.getMethod())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()  ||  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()  ||  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
310	[BUG]  [BUGGY]  switch(offsetEntry.getMethod()  ||  z.getMethod())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod()  ||  z.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod()  ||  z.getMethod())  {	  switch(offsetEntry.getMethod()    ||    offsetEntry.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
311	[BUG]  [BUGGY]  Switch(remaining,  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(remaining,  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(remaining,  offsetEntry.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
312	[BUG]  [BUGGY]  Switch(options,  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(options,  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(options,  offsetEntry.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
313	[BUG]  [BUGGY]  Switch(offsetEntry.getSize()  -  start)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getSize()  -  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getSize()  -  start)  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
314	[BUG]  [BUGGY]  Switch(offsetEntry.getLength())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getLength())  {	  Switch(offsetEntry.getSize())    {    	non-compiled	[CE]  ';'  expected	18	None	replace
315	[BUG]  [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
316	[BUG]  [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  else  {  return  null;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  else  {  return  null;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
317	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
318	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
319	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getMethod();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getMethod();  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getMethod();	  Switch(entry.getMethod())    {    	non-compiled	[CE]  orphaned  case	61	None	replace
320	[BUG]  [BUGGY]  Switch(entry.getMethod(),  start)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod(),  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod(),  start)  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
321	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
322	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
323	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  bis),  false)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  bis),  false)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  bis),  false)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
324	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  bis),  this)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  bis),  this)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  bis),  this)  {	  Switch(offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
325	[BUG]  [BUGGY]  switch(version.dataOffset())  {  [CE]  cannot  find  symbol  version  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(version.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(version.dataOffset())  {	  switch(zip.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  version	71	None	replace
326	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  ||  ze.dataOffset())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  ||  ze.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  ||  ze.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  ';'  expected	40	None	replace
327	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  ||  z.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  ||  z.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  ||  z.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
328	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  ||  ze.getDataOffset())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  ||  ze.getDataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  ||  ze.getDataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
329	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(date);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(date);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(date);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
330	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ce);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ce);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ce);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
331	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
332	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offset.getCompressedSize())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offset.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offset.getCompressedSize())  {	  switch(offsetEntry.getCompressedSize())    {    	non-compiled	[CE]  ')'  expected	13	None	replace
333	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset,  ze.getCompressedSize())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset,  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset,  ze.getCompressedSize())  {	  switch(start,    ze.getCompressedSize())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
334	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  offsetEntry.get(ze);  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
335	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
336	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
337	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
338	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  bis);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
339	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
340	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
341	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
342	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
343	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  1);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  1);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
344	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  start);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start  -  start);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
345	[BUG]  [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
346	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(date);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(date);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(date);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
347	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
348	[BUG]  [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  >=  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
349	[BUG]  [BUGGY]  if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
350	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  case  ZipArchiveEntry.FOR_FILENAME_LENGTH:  bis.addDummy();  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.FOR_FILENAME_LENGTH:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	5	None	replace
351	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset  +  CFH_SIG)  {  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset  +  CFH_SIG)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset  +  CFH_SIG)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
352	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset  +  start)  {  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset  +  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset  +  start)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
353	[BUG]  [BUGGY]  switch(version.getMethod())  {  [CE]  cannot  find  symbol  version  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(version.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(version.getMethod())  {	  switch(zip.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  version	24	None	replace
354	[BUG]  [BUGGY]  switch(offsetEntry.enext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.enext())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.enext())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
355	[BUG]  [BUGGY]  switch(offsetEntry.ext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.ext())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.ext())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
356	[BUG]  [BUGGY]  switch(offsetEntry.trim())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.trim())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.trim())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
357	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntrySet();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
358	[BUG]  [BUGGY]  switch(pos.getCompressedSize())  {  [CE]  cannot  find  symbol  pos  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(pos.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(pos.getCompressedSize())  {	  switch(start.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol  pos	17	None	replace
359	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  ze.getValue();  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
360	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
361	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    break;    	non-compiled	[CE]  orphaned  case	64	None	replace
362	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset,  ze.getMethod())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset,  ze.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
363	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  ZERO.getMethod())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  ZERO.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  ZERO.getMethod())  {	  switch(offsetEntry.dataOffset.getMethod())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
364	[BUG]  [BUGGY]  switch(remainingOffset(),  offsetEntry.dataOffset)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(remainingOffset(),  offsetEntry.dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(remainingOffset(),  offsetEntry.dataOffset)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
365	[BUG]  [BUGGY]  switch(offsetEntry.getCompressedSize(),  remaining)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getCompressedSize(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getCompressedSize(),  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
366	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start  +  1);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start  +  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start  +  1);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
367	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry.dataOffset);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry.dataOffset);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(offsetEntry.dataOffset);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
368	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset()  -  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset()  -  1)  {	  Switch(offsetEntry.dataOffset())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
369	[BUG]  [BUGGY]  switch(offsetEntry.getMethod(),  bis),  false)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod(),  bis),  false)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod(),  bis),  false)  {	  switch    (offsetEntry.getMethod(),    bis)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
370	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset(),  remaining)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset(),  remaining)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
371	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  -  1,  bis)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
372	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  end)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  end)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  end)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
373	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  ||  bis.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  ||  bis.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  ||  bis.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
374	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  ||  start.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  ||  start.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  ||  start.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    offsetEntry.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
375	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start);  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start);  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(start);  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
376	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  return  bis;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
377	[BUG]  [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  return  bis;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
378	[BUG]  [BUGGY]  switch(start,  ze.getMethod())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  ze.getMethod())  {	  switch(start.getMethod())    {    	non-compiled	[CE]  ')'  expected	47	None	replace
379	[BUG]  [BUGGY]  switch(offsetEntry.length(),  dataOffset)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.length(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.length(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
380	[BUG]  [BUGGY]  switch(ze.dataOffset(),  dataOffset)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.dataOffset(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.dataOffset(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
381	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()).startsWith(';')  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()).startsWith(';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()).startsWith(';')  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
382	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()).append(';');  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()).append(';');  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()).append(';');	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
383	[BUG]  [BUGGY]  switch(offsetEntry.getName(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getName(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getName(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
384	[BUG]  [BUGGY]  switch(offsetEntry.getData(),  bis)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getData(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getData(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
385	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(offsetEntry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
386	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(zip);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
387	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
388	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntryMap();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntryMap();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntryMap();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entryMap();    break;    	non-compiled	[CE]  orphaned  case	65	None	replace
389	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(start,  bis);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
390	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(start);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entry.get(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entry.get(start);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
391	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(start  +  1);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
392	[BUG]  [BUGGY]  switch(ze.getMethod()  ||  ze.getMethod())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getMethod()  ||  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getMethod()  ||  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
393	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getSize())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  offsetEntry.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  offsetEntry.getSize())  {	  switch(start,    ze.getSize())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
394	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  start)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset()  -  1,  start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset()  -  1,  start)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
395	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  start  +  1)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  start  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  start  +  1)  {	  switch(offsetEntry.dataOffset(),    start)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
396	[BUG]  [BUGGY]  switch(zip.getCompressedSize())  {  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.getCompressedSize())  {	  switch(start.getCompressedSize())    {    	non-compiled	[CE]  cannot  find  symbol  zip	17	None	replace
397	[BUG]  [BUGGY]  switch(offsetEntry.getSize()  ||  ze.getSize())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getSize()  ||  ze.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getSize()  ||  ze.getSize())  {	  switch(offsetEntry.getSize())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
398	[BUG]  [BUGGY]  switch(ce.getMethod())  {  [CE]  cannot  find  symbol  ce  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ce.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ce.getMethod())  {	  switch(type.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  ce	74	None	replace
399	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
400	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	ZipArchiveEntry  offsetEntry  =  entries.get(ze);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
401	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  return  bis;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.clone();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
402	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  return  bis;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.size();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
403	[BUG]  [BUGGY]  Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.keySet();  return  bis;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.keySet();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Set  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.keySet();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    return    bis;    	non-compiled	[CE]  orphaned  case	67	None	replace
404	[BUG]  [BUGGY]  Switch(ze.getMethod()),  bis)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()),  bis)  {	  Switch(offsetEntry.getMethod()),    bis)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
405	[BUG]  [BUGGY]  Switch(entry.getMethod()  +  ';')  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()  +  ';')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()  +  ';')  {	  Switch(offsetEntry.getMethod()    +    ';')    {    	non-compiled	[CE]  ';'  expected	45	None	replace
406	[BUG]  [BUGGY]  if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(start  <  0)  {  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  case  ZipArchiveEntry.BYTE_SHIFT:  bis.addDummy();  }	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
407	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
408	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getDataSize());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getDataSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getDataSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    	non-compiled	[CE]  orphaned  case	6	None	replace
409	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  return  bis;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray();  return  bis;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    return    bis;    	non-compiled	[CE]  orphaned  case	66	None	replace
410	[BUG]  [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    case    ZipArchiveEntry.BYTE_SHIFT:    bis.addDummy();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
411	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray(new  HashMap());  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray(new  HashMap());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.toArray(new  HashMap());  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.entrySet();    break;    	non-compiled	[CE]  orphaned  case	63	None	replace
412	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(start);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    	non-compiled	[CE]  orphaned  case	59	None	replace
413	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  bis.getCompressedSize())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  bis.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  bis.getCompressedSize())  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
414	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset(),  bis.getSize())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset(),  bis.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset(),  bis.getSize())  {	  switch(offsetEntry,    ze.dataOffset())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
415	[BUG]  [BUGGY]  Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.STORED ")  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.STORED ")  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.STORED ")  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  	61	None	replace
416	[BUG]  [BUGGY]  Switch(entry.getMethod()),  ze.getCompressedSize())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()),  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()),  ze.getCompressedSize())  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  ';'  expected	61	None	replace
417	[BUG]  [BUGGY]  Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.SIG "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.SIG "))  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()).startsWith( "ZipArchiveEntry.SIG "))  {	  Switch(entry.getMethod())    {    	non-compiled	[CE]  	61	None	replace
418	[BUG]  [BUGGY]  Switch(offsetEntry.dataOffset,  start.getMethod())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.dataOffset,  start.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.dataOffset,  start.getMethod())  {	  Switch(start,    offsetEntry.getMethod())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
419	[BUG]  [BUGGY]  Switch(ze.getMethod()  ||  offsetEntry.getMethod())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()  ||  offsetEntry.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()  ||  offsetEntry.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
420	[BUG]  [BUGGY]  switch(entries.getMethod()  ||  ze.getMethod())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entries.getMethod()  ||  ze.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entries.getMethod()  ||  ze.getMethod())  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
421	[BUG]  [BUGGY]  switch(ze.getCompressedSize(),  dataOffset)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getCompressedSize(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getCompressedSize(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
422	[BUG]  [BUGGY]  switch(offsetEntry.zip(),  dataOffset)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.zip(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.zip(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
423	[BUG]  [BUGGY]  switch(ze.getSize(),  dataOffset)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getSize(),  dataOffset)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getSize(),  dataOffset)  {	  switch(offsetEntry.dataOffset(),    dataOffset)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
424	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offset);  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offset);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.get(offset);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.get(start);    break;    	non-compiled	[CE]  orphaned  case	68	None	replace
425	[BUG]  [BUGGY]  switch(offsetEntry.dataOffset,  start.getSize())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.dataOffset,  start.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.dataOffset,  start.getSize())  {	  switch(start,    ze.getSize())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
426	[BUG]  [BUGGY]  switch(ze.dataOffset(),  remaining)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.dataOffset(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.dataOffset(),  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
427	[BUG]  [BUGGY]  switch(offsetEntry.getMethod(),  remaining)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.getMethod(),  remaining)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.getMethod(),  remaining)  {	  switch(offsetEntry.dataOffset(),    remaining)    {    	non-compiled	[CE]  ')'  expected	34	None	replace
428	[BUG]  [BUGGY]  switch(z.getMethod())  {  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(z.getMethod())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(z.getMethod())  {	  switch(zip.getMethod())    {    	non-compiled	[CE]  cannot  find  symbol  z	24	None	replace
429	[BUG]  [BUGGY]  Switch(ze.getCompressedSize())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getCompressedSize())  {	  Switch(ze.getMethod())    {    	non-compiled	[CE]  ';'  expected	60	None	replace
430	[BUG]  [BUGGY]  switch(optionsWithoutUTF8Flag)  {  [CE]  cannot  find  symbol  optionsWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(optionsWithoutUTF8Flag)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(optionsWithoutUTF8Flag)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  optionsWithoutUTF8Flag	36	None	replace
431	[BUG]  [BUGGY]  switch(start)  {  [CE]  possible  loss  of  precision  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start)  {	  switch(offsetEntry.dataOffset)    {    	non-compiled	[CE]  possible  loss  of  precision	36	None	replace
432	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
433	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  break;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
434	[BUG]  [BUGGY]  switch(ze.getCompressedSize(),  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getCompressedSize(),  null)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getCompressedSize(),  null)  {	  switch    (ze.getMethod(),    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
435	[BUG]  [BUGGY]  switch(ze.getSize(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getSize(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getSize(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
436	[BUG]  [BUGGY]  switch(ze.getName(),  bis)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getName(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getName(),  bis)  {	  switch(ze.getCompressedSize(),    bis)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
437	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  offsetEntry.dataOffset);  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  offsetEntry.dataOffset);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  offsetEntry.dataOffset);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
438	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  start);  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  start);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  start);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
439	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  ze);  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.getEntry(start,  ze);  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.getEntry(start);    break;    	non-compiled	[CE]  orphaned  case	69	None	replace
440	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
441	[BUG]  [BUGGY]  switch(entry.dataOffset())  {  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.dataOffset())  {	  switch(zip.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  entry	71	None	replace
442	[BUG]  [BUGGY]  switch(ceilingEntry.dataOffset())  {  [CE]  cannot  find  symbol  ceilingEntry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ceilingEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ceilingEntry.dataOffset())  {	  switch(zip.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  ceilingEntry	71	None	replace
443	[BUG]  [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.pop();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.pop();  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  Map  entriesWithoutUTF8Flag  =  entriesWithoutUTF8Flag.pop();  break;	  final    Map    entriesWithoutUTF8Flag    =    entriesWithoutUTF8Flag.keySet();    break;    	non-compiled	[CE]  orphaned  case	64	None	replace
444	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod(),  ze)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod(),  ze)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod(),  ze)  {	  Switch(offsetEntry.getMethod(),    start)    {    	non-compiled	[CE]  ';'  expected	43	None	replace
445	[BUG]  [BUGGY]  Switch(offsetEntry.getMethod()),  ze.getCompressedSize())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(offsetEntry.getMethod()),  ze.getCompressedSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(offsetEntry.getMethod()),  ze.getCompressedSize())  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
446	[BUG]  [BUGGY]  Switch(ze.getMethod()  +  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()  +  1)  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
447	[BUG]  [BUGGY]  Switch(entry.getMethod()  +  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()  +  1)  {	  Switch(offsetEntry.getMethod()    +    1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
448	[BUG]  [BUGGY]  switch(entry.getCompressedSize()  -  1)  {  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getCompressedSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getCompressedSize()  -  1)  {	  switch(ze.getCompressedSize()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol  entry	72	None	replace
449	[BUG]  [BUGGY]  switch(ze.next())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.next())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.next())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
450	[BUG]  [BUGGY]  switch(entry.next())  {  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.next())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.next())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol  entry	52	None	replace
451	[BUG]  [BUGGY]  switch(offsetEntry.separator())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.separator())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.separator())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
452	[BUG]  [BUGGY]  switch(offsetEntry.zip())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.zip())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.zip())  {	  switch(offsetEntry.next())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
453	[BUG]  [BUGGY]  Switch(ze.getMethod()  +  ')')  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()  +  ')')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()  +  ')')  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
454	[BUG]  [BUGGY]  Switch(entry.getMethod()  +  ')')  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(entry.getMethod()  +  ')')  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(entry.getMethod()  +  ')')  {	  Switch(offsetEntry.getMethod()    +    ')')    {    	non-compiled	[CE]  ';'  expected	44	None	replace
455	[BUG]  [BUGGY]  switch(zip.getSize())  {  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.getSize())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.getSize())  {	  switch(entry.getSize())    {    	non-compiled	[CE]  cannot  find  symbol  zip	21	None	replace
456	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  return  bis;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  return  bis;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  return  bis;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    return    bis;    	non-compiled	[CE]  orphaned  case	3	None	replace
457	[BUG]  [BUGGY]  switch(offsetEntry,  start.dataOffset())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry,  start.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry,  start.dataOffset())  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
458	[BUG]  [BUGGY]  switch(offsetEntry.remainderOffset())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(offsetEntry.remainderOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(offsetEntry.remainderOffset())  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
459	[BUG]  [BUGGY]  switch(start,  offsetEntry.dataOffset()  +  1)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(start,  offsetEntry.dataOffset()  +  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(start,  offsetEntry.dataOffset()  +  1)  {	  switch(start,    offsetEntry.dataOffset())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
460	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
461	[BUG]  [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze)-  1;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze)-  1;  break;  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	final  ZipArchiveEntry  offsetEntry  =  entries.get(ze)-  1;  break;	  final    ZipArchiveEntry    offsetEntry    =    entries.get(ze);    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
462	[BUG]  [BUGGY]  switch(ze.dataOffset()  ||  ze.dataOffset())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.dataOffset()  ||  ze.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.dataOffset()  ||  ze.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
463	[BUG]  [BUGGY]  switch(zip.dataOffset()  ||  offsetEntry.dataOffset())  {  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.dataOffset()  ||  offsetEntry.dataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.dataOffset()  ||  offsetEntry.dataOffset())  {	  switch(offsetEntry.dataOffset()    ||    ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol  zip	40	None	replace
464	[BUG]  [BUGGY]  if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
465	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
466	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
467	[BUG]  [BUGGY]  if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entries!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
468	[BUG]  [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(start);  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  else  {  return  bis;  }	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  orphaned  case	54	None	replace
469	[BUG]  [BUGGY]  switch(entry.getSize()  -  1)  {  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getSize()  -  1)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getSize()  -  1)  {	  switch(ze.getSize()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol  entry	62	None	replace
470	[BUG]  [BUGGY]  switch(ze.getDataOffset())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.getDataOffset())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.getDataOffset())  {	  switch(ze.dataOffset())    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
471	[BUG]  [BUGGY]  Switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Switch(ze.getMethod()  ||  ze.getMethod()  <  ZipArchiveEntry.METHOD)  {	  switch(offsetEntry.getMethod()    ||    ze.getMethod()    <    ZipArchiveEntry.METHOD)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
472	[BUG]  [BUGGY]  switch(entry.getLength())  {  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(entry.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(entry.getLength())  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  entry	50	None	replace
473	[BUG]  [BUGGY]  switch(zip.getLength())  {  [CE]  cannot  find  symbol  zip  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(zip.getLength())  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(zip.getLength())  {	  switch(offsetEntry.getLength())    {    	non-compiled	[CE]  cannot  find  symbol  zip	50	None	replace
474	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getEntry();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getEntry();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	Entry  <  K,  V>  entry  =  offsetEntry.getEntry();  if(entry!=  null)  {  return  new  BoundedInputStream(start,  entry.getCompressedSize());  }	  Entry    <    K,    V>    entry    =    entries.get(ze);    if(entry!=    null)    {    return    new    BoundedInputStream(start,    entry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	7	None	replace
475	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
476	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  orphaned  case	1	None	replace
477	[BUG]  [BUGGY]  switch(ze.dataOffset(),  bis)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  switch(ze.dataOffset(),  bis)  {  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	switch(ze.dataOffset(),  bis)  {	  switch(offsetEntry.dataOffset(),    bis)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
478	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	ZipArchiveEntry  offsetEntry  =  entries.get(ze);	  final    ZipArchiveEntry    offsetEntry    =    entries.get(start);    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    bis);    	non-compiled	[CE]  orphaned  case	58	None	replace
479	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());      [BUGGY]  if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }  [BUGGY]      case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  super.close();  inflater.end();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	if(entry.getValue()!=  null)  {  final  ZipArchiveEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  }	  final    ZipArchiveEntry    offsetEntry    =    entry.getValue();    if(offsetEntry!=    null)    {    return    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    }    	non-compiled	[CE]  orphaned  case	55	None	replace
