bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
2	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
3	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	17	None	replace
4	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_SIG)  {  [CE]  cannot  find  symbol  ZERO_SIG  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	17	None	replace
5	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  start)  {  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  start)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  start)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  start	17	None	replace
6	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_LENGTH)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	17	None	replace
7	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	14	None	replace
8	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	14	None	replace
9	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	14	None	replace
10	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
11	[BUG]  [BUGGY]  if(OffsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(OffsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(OffsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	14	None	replace
12	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
13	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
15	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
17	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
18	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
19	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
20	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
21	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
22	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
23	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
25	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
26	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
27	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
28	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
29	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
30	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
31	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
32	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
38	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  =  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  =  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
40	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
41	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
42	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
43	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
44	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
45	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    If(offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
46	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	4	None	replace
47	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
48	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
49	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
50	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
51	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
52	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
54	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
56	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
57	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	16	None	replace
58	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
59	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
60	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
61	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
62	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
63	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >>  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >>  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry  ==  null  ||  offsetEntry  >>  null)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
65	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
66	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	18	None	replace
67	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze)  {  [CE]  incomparable  types:  long  and  ZipArchiveEntry  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ze)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  incomparable  types:  long  and  ZipArchiveEntry	18	None	replace
68	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	18	None	replace
69	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  start)  {  [CE]  cannot  find  symbol  start  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  start)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  start)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  start	18	None	replace
70	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
71	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
72	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
73	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
74	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
75	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
76	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
77	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
78	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
79	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
80	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
81	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
83	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
84	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
85	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
86	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  LAST_EOCD_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_EOCD_FOR_FILENAME_LENGTH	18	None	replace
87	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {  [CE]  cannot  find  symbol  DEFLATED  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  DEFLATED	18	None	replace
88	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {  [CE]  cannot  find  symbol  LAST_SIG  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_SIG	18	None	replace
89	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN)  {  [CE]  cannot  find  symbol  RETURN  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  RETURN	18	None	replace
90	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
91	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
94	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(offsetEntry);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	17	None	replace
96	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFLATED)  {  [CE]  cannot  find  symbol  DEFLATED  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFLATED)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFLATED)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  DEFLATED	17	None	replace
97	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHIFT_SIG)  {  [CE]  cannot  find  symbol  SHIFT_SIG  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHIFT_SIG)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHIFT_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_SIG	17	None	replace
98	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  RETURN)  {  [CE]  cannot  find  symbol  RETURN  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  RETURN)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  RETURN)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  RETURN	17	None	replace
99	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  incomparable  types:  long  and  String  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  String	2	None	replace
100	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	replace
101	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
102	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
104	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
105	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	      	non-compiled	[CE]  incomparable  types:  long  and  <null>	13	None	replace
106	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	      	non-compiled	[CE]  incomparable  types:  long  and  <null>	13	None	replace
107	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  >>  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
108	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
109	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
110	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
111	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null)    {    if(offsetEntry!=  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
113	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
114	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO)  {  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO	18	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
116	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
117	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {  [CE]  cannot  find  symbol  ZERO_OFFSET  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET	18	None	replace
118	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  dataOffset)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  dataOffset)  {	  if(offsetEntry!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	2	None	replace
119	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {  [CE]  cannot  find  symbol  UTF8  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {	  if(offsetEntry!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	2	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
121	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
122	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO)  {  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO	17	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
124	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
125	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET)  {  [CE]  cannot  find  symbol  ZERO_OFFSET  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET	17	None	replace
126	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  {  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ')'  expected	9	None	add
127	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);    [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]    return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
