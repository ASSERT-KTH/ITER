bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
2	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
3	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
4	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
5	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(OffsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(OffsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
6	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >=  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry  >=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry  >=  null  &&  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
7	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
8	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
9	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SHIFT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SHIFT)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
11	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SHIFT)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SHIFT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SHIFT)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
12	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIG)  {  [CE]  cannot  find  symbol  HASH_SIG  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HASH_SIG	125	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
14	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIZE)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  HASH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	125	1	replace
15	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
16	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
17	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	111	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  BYTE_SHIFT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  BYTE_SHIFT)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
19	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  BYTE_SHIFT)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  BYTE_SHIFT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  BYTE_SHIFT)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
21	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIZE)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
22	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  DEFAULT_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_LOCATOR_OFFSET	117	None	replace
23	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIG)  {  [CE]  cannot  find  symbol  HASH_SIG  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  HASH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  HASH_SIG	117	None	replace
24	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFAULT_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  DEFAULT_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFAULT_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  DEFAULT_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_FOR_FILENAME_LENGTH	6	None	replace
25	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  dataOffset.length)  {  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  dataOffset.length)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  dataOffset.length)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	6	None	replace
26	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
27	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(0);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  ze.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
29	[BUG]  [BUGGY]  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
30	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
31	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  loc)  {  [CE]  cannot  find  symbol  loc  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  loc)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  loc)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    start)    {    	non-compiled	[CE]  cannot  find  symbol  loc	5	None	replace
32	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  location)  {  [CE]  cannot  find  symbol  location  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  location)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  location)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    start)    {    	non-compiled	[CE]  cannot  find  symbol  location	5	None	replace
33	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  remaining)  {  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  remaining)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  remaining)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    start)    {    	non-compiled	[CE]  cannot  find  symbol  remaining	5	None	replace
34	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  If(offsetEntry  ==  null)  {	  if(offsetEntry!=    null)    {    If(offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
35	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry!=  null)  {	  if(offsetEntry!=    null)    {    If(offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
36	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null)  {	  if(offsetEntry!=    null)    {    If(offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
37	[BUG]  [BUGGY]  If(offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null)  {	  if(offsetEntry!=    null)    {    If(offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
38	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
39	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
40	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
41	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
42	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
43	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	120	None	add
44	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
45	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	66	None	replace
46	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH	66	None	replace
47	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	66	None	replace
48	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  incomparable  types:  long  and  String  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  incomparable  types:  long  and  String	99	None	replace
49	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  File.separator)  {  [CE]  incomparable  types:  long  and  String  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  incomparable  types:  long  and  String	99	None	replace
50	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {  [CE]  cannot  find  symbol  Separator  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  cannot  find  symbol  Separator	99	None	replace
51	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {  [CE]  cannot  find  symbol  Separator  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.Separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  cannot  find  symbol  Separator	99	None	replace
52	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  incomparable  types:  long  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	99	None	replace
53	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {  [CE]  cannot  find  symbol  SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  cannot  find  symbol  SEPARATOR	99	None	replace
54	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
55	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  loc)  {  [CE]  cannot  find  symbol  loc  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  loc)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  loc)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    start)    {    	non-compiled	[CE]  cannot  find  symbol  loc	69	None	replace
56	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  location)  {  [CE]  cannot  find  symbol  location  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  location)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  location)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    start)    {    	non-compiled	[CE]  cannot  find  symbol  location	69	None	replace
57	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  remaining)  {  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  remaining)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  remaining)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    start)    {    	non-compiled	[CE]  cannot  find  symbol  remaining	69	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
59	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry!=    null)    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
60	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
61	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this)  {  [CE]  incomparable  types:  long  and  ZipFile  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  this)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    DEFLATED)    {    	non-compiled	[CE]  incomparable  types:  long  and  ZipFile	96	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_SIG)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
63	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIZE)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_SIG)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
64	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_SIG)  {  [CE]  cannot  find  symbol  LFH_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  LFH_SIG	4	None	replace
65	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIG)  {  [CE]  cannot  find  symbol  MAX_EOCD_SIG  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  MAX_EOCD_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_EOCD_SIG	4	None	replace
66	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
67	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
68	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
69	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
70	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(OffsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
71	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  ==  null  ||  offsetEntry  >=  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
72	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
73	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
74	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
75	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
76	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
77	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  POS_0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  POS_0)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
78	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	8	None	replace
79	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	8	None	replace
80	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
81	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	105	None	replace
82	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  cannot  find  symbol  inflater  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  cannot  find  symbol  inflater	105	None	replace
83	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	105	None	replace
84	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	105	None	replace
85	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null  ||!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null  ||!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null  ||!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
86	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
87	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
88	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
89	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
90	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(entry);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(entry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(entry);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
91	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.name);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.name);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.name);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
92	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
93	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
94	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
95	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(ze);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(ze);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
96	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(offsetEntry);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(offsetEntry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag(offsetEntry);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
97	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
98	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
99	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
100	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
101	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
102	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
103	[BUG]  [BUGGY]  if(OffsetEntry.FOR_FILENAME_LENGTH  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(OffsetEntry.FOR_FILENAME_LENGTH  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(OffsetEntry.FOR_FILENAME_LENGTH  ==  null  ||  offsetEntry.dataOffset!=  null)  {	  if(OffsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	11	None	replace
104	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null)  {	  if(OffsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	11	None	replace
105	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	106	None	replace
106	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	106	None	replace
107	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null)  {  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	106	None	replace
108	[BUG]  [BUGGY]  OffsetEntry.dataOffset  =  offsetEntry.dataOffset;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry.dataOffset  =  offsetEntry.dataOffset;	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
109	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
110	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >>    null)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
111	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
112	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
113	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
114	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
115	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  If(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  If(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    If(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
116	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  DEFAULT_EOCD_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    LAST_EOCD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_EOCD_FOR_FILENAME_LENGTH	86	None	replace
117	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  RETURN_EOCD_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  RETURN_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    LAST_EOCD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  RETURN_EOCD_FOR_FILENAME_LENGTH	86	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  MAX_EOCD_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  MAX_EOCD_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_SIG)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
119	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  MAX_EOCD_SIZE)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  MAX_EOCD_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  MAX_EOCD_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_SIG)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
120	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIG)  {  [CE]  cannot  find  symbol  LFH_SIG  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  LFH_SIG	68	None	replace
121	[BUG]  [BUGGY]  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    >=    null    ||    offsetEntry.dataOffset!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	46	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
123	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
124	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIZE)  {  [CE]  cannot  find  symbol  NIBLET_SIZE  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	non-compiled	[CE]  cannot  find  symbol  NIBLET_SIZE	124	None	replace
125	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIG)  {  [CE]  cannot  find  symbol  NIBLET_SIG  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	non-compiled	[CE]  cannot  find  symbol  NIBLET_SIG	124	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
127	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
128	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
129	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
130	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
131	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
132	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  this)  {  [CE]  incomparable  types:  long  and  ZipFile  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  this)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  this)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    DEFLATED)    {    	non-compiled	[CE]  incomparable  types:  long  and  ZipFile	87	None	replace
133	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(OffsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
134	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(OffsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(OffsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
136	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
138	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
139	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCDL_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  CFD_EOCDL_LOCATOR_OFFSET  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCDL_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCDL_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  CFD_EOCDL_LOCATOR_OFFSET	113	None	replace
140	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
141	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
142	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    If(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
143	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
144	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
145	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
147	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
149	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
151	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1  ||  offsetEntry.dataOffset  ==  -1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1  ||  offsetEntry.dataOffset  ==  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
152	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	44	None	replace
153	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
154	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
155	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
156	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze)+  1;	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
158	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
159	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
160	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
161	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
162	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
163	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
164	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
165	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
166	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
167	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
168	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
169	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
170	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
171	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(offsetEntry!=  null  ||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
172	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffsetEntry();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffsetEntry();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  ze.getOffsetEntry();	  OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
173	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entryCount.get(ze);	  OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
174	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze)  {  [CE]  incomparable  types:  long  and  ZipArchiveEntry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ze)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze)    {    	non-compiled	[CE]  incomparable  types:  long  and  ZipArchiveEntry	67	None	replace
175	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze)  {  [CE]  incomparable  types:  long  and  ZipArchiveEntry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ze)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze)    {    	non-compiled	[CE]  incomparable  types:  long  and  ZipArchiveEntry	67	None	replace
176	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZERO_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	67	None	replace
177	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	7	None	replace
178	[BUG]  [BUGGY]  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >>  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	7	None	replace
179	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
180	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
181	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    If(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
182	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
183	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
184	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
185	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
186	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
187	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
188	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_SIG)  {  [CE]  cannot  find  symbol  DEFAULT_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  DEFAULT_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    LAST_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIG	88	None	replace
189	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  ze.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	3	None	replace
190	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	3	None	replace
191	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH	3	None	replace
192	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  this.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  dataOffset	95	None	replace
193	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {  [CE]  cannot  find  symbol  UTF8  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.UTF8)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	119	None	replace
194	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	119	None	replace
195	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.DEFAULT)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	119	None	replace
196	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {  [CE]  cannot  find  symbol  US_ASCII  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  US_ASCII	119	None	replace
197	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {  [CE]  cannot  find  symbol  US_ASCII  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.US_ASCII)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  US_ASCII	119	None	replace
198	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.BLOCK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.BLOCK)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	119	None	replace
199	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
200	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue());	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
201	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getValue());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getValue());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getValue());	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
202	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue(),  offsetEntry.getMethod());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue(),  offsetEntry.getMethod());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  new  ZipArchiveEntry(offsetEntry.getValue(),  offsetEntry.getMethod());	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
203	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    SHIFT_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	97	None	replace
204	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIG)  {  [CE]  cannot  find  symbol  BYTE_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  BYTE_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    SHIFT_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIG	97	None	replace
205	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
206	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
207	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  If(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  If(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    If(offsetEntry!=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
208	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
209	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
210	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
211	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	41	None	replace
212	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entries.get(offsetEntry);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
213	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entries.get(0);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
214	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValue();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  offsetEntry.getValue();	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
215	[BUG]  [BUGGY]  OffsetEntry  <  K,  V>  entry  =  entries.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  <  K,  V>  entry  =  entries.get(offsetEntry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  <  K,  V>  entry  =  entries.get(offsetEntry);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
216	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entries.get(offsetEntry.dataOffset);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
217	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValues();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  offsetEntry.getValues();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  offsetEntry.getValues();	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
218	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
219	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
220	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  If(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    If(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
221	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
222	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
223	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >>  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
224	[BUG]  [BUGGY]  if(offsetEntry  [Delete]  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  [Delete]  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  [Delete]  null  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry    >=    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  ')'  expected	10	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	121	1	replace
226	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	121	1	replace
227	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  CFD_EOCDL_LOCATOR_OFFSET  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  CFD_EOCDL_LOCATOR_OFFSET	121	None	replace
228	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
229	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
230	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
231	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
232	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
233	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  NIBLET_MASK)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
234	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
236	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
238	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.DEFLATED)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
240	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
241	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
242	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
243	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
244	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
245	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFH_SIG)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
246	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
247	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  ze.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
248	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getKey();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.getKey();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
249	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  +  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  +  1;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.getValue()  +  1;	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
250	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
251	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
252	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
253	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	102	1	replace
254	[BUG]  [BUGGY]  if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  &&  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	102	1	replace
255	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry    >=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	100	None	replace
256	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
257	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    If(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
258	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
259	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
260	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    if(OffsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
261	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIG)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
263	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
264	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    {    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  ';'  expected	127	None	replace
265	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(0);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(0);	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
266	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entry.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entry.getValue();	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
267	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
268	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
269	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze  +  1);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze  +  1);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze  +  1);	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
270	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    If(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	non-compiled	[CE]  ';'  expected	71	None	replace
271	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	47	1	replace
272	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  0)  {  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	47	1	replace
273	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  start)  {  [CE]  cannot  find  symbol  start  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  start)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  start)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  start	118	None	replace
274	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {  [CE]  cannot  find  symbol  ZERO_SIG  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_SIG)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	118	None	replace
275	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  CFD_EOCD_CFD_LOCATOR_OFFSET  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  CFD_EOCD_CFD_LOCATOR_OFFSET	113	None	replace
276	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFD_LOCATOR_OFFSET)  {	  	non-compiled	[CE]  ';'  expected	112	None	add
277	[BUG]  [BUGGY]  If(offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry!=  null)  {	  if(offsetEntry!=    null)    {    If(offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
278	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
279	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.length);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.length);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
280	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.info);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.info);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.info);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
281	[BUG]  [BUGGY]  if(OffsetEntry.SIG  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [CE]  cannot  find  symbol  SIG  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(OffsetEntry.SIG  ==  null  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(OffsetEntry.SIG  ==  null  ||  offsetEntry.dataOffset!=  null)  {	  if(OffsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  SIG	11	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
283	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
284	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {  [CE]  cannot  find  symbol  SEPARATOR  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  File.SEPARATOR)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  cannot  find  symbol  SEPARATOR	99	None	replace
285	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	99	None	replace
286	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.STRING)  {  [CE]  cannot  find  symbol  STRING  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.STRING)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.STRING)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	119	None	replace
287	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  EOCD_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FILENAME_LENGTH)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  EOCD_FILENAME_LENGTH	119	None	replace
288	[BUG]  [BUGGY]  if(offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(ze))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
289	[BUG]  [BUGGY]  if(!inflater.isEnabled(ZipArchiveEntry.DEFLATED))  {  [CE]  cannot  find  symbol  inflater  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(!inflater.isEnabled(ZipArchiveEntry.DEFLATED))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(!inflater.isEnabled(ZipArchiveEntry.DEFLATED))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  inflater	39	None	replace
290	[BUG]  [BUGGY]  if(OffsetEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(OffsetEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(OffsetEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
291	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    if(OffsetEntry!=  null  ||  offsetEntry.dataOffset!=  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
292	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZE)  {  [CE]  cannot  find  symbol  ZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  ZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze)    {    	non-compiled	[CE]  cannot  find  symbol  ZE	67	None	replace
293	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZE)  {  [CE]  cannot  find  symbol  ZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ze)    {    	non-compiled	[CE]  cannot  find  symbol  ZE	67	None	replace
294	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getKey();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getKey();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getKey();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
295	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.removeValue();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.removeValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.removeValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
296	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.next();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.next();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.next();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
297	[BUG]  [BUGGY]  if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  cannot  find  symbol  inflater  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  cannot  find  symbol  inflater	106	None	replace
298	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset  +  1;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset  +  1;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset  +  1;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  incomparable  types:  long  and  <null>	106	None	replace
299	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(OffsetEntry!=  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(OffsetEntry!=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(OffsetEntry!=  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
300	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >>  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  >>  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  >>  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
301	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(2);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
302	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
303	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(offsetEntry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entryCount.get(offsetEntry);	  OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
305	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_MASK)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    NIBLET_MASK)    {    	compilable	  [FE]  AssertionFailedError  	124	1	replace
306	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  null)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry    >=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	100	None	replace
307	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    {    null    ||    offsetEntry.dataOffset    <    0)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
308	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    {    null    ||    offsetEntry.dataOffset    <    0)    {    	non-compiled	[CE]  ';'  expected	126	None	replace
309	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  -1)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  -1)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
310	[BUG]  [BUGGY]  If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    If(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
311	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {  if(offsetEntry!=  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
312	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  CFD_EOCD_CFD_LOCATOR_OFFSET  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  CFD_EOCD_CFD_LOCATOR_OFFSET	121	None	replace
313	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LENGTH)  {  [CE]  cannot  find  symbol  CFD_EOCDL_LENGTH  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFD_EOCDL_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  CFD_EOCDL_LENGTH	121	None	replace
314	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  cannot  find  symbol  inflater  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  cannot  find  symbol  inflater	105	None	replace
315	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
316	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_SIG)  {  [CE]  cannot  find  symbol  NIBLET_SIG  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  NIBLET_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  NIBLET_SIG	89	None	replace
317	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
318	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag;	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
319	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag;	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
320	[BUG]  [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >>    null)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
321	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIZE)  {  [CE]  cannot  find  symbol  LFH_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  LFH_SIZE	68	None	replace
322	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze);	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
323	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(offset);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(offset);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(offset);	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
324	[BUG]  [BUGGY]  OffsetEntry  <?>  offsetEntry  =  entries.get(ze);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  <?>  offsetEntry  =  entries.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  <?>  offsetEntry  =  entries.get(ze);	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
325	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.getMethod()  ==  ZipArchiveEntry.METHOD_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
326	[BUG]  [BUGGY]  if(OffsetEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(OffsetEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(OffsetEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
327	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
328	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  <  0)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
329	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    if(OffsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
330	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
331	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag(ze);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag(ze);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
332	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  LAST_EOCD_FOR_FILENAME_LENGTH  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_EOCD_FOR_FILENAME_LENGTH	118	None	replace
333	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {  [CE]  cannot  find  symbol  DEFLATED  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  DEFLATED)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  DEFLATED	118	None	replace
334	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {  [CE]  cannot  find  symbol  LAST_SIG  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  LAST_SIG)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_SIG	118	None	replace
335	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	95	None	replace
336	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  zip64_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	95	None	replace
337	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET	95	None	replace
338	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH	95	None	replace
339	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  offsetEntry.getValue();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  offsetEntry.getValue();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  offsetEntry.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
340	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >>  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
341	[BUG]  [BUGGY]  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
342	[BUG]  [BUGGY]  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
343	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [CE]  cannot  find  symbol  inflater  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry.dataOffset;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry.dataOffset;    }    	non-compiled	[CE]  cannot  find  symbol  inflater	106	None	replace
344	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  null)  {  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	8	None	replace
345	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIZE)  {  [CE]  cannot  find  symbol  CFH_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  CFH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    SHIFT_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  CFH_SIZE	97	None	replace
346	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LIVE_SIG)  {  [CE]  cannot  find  symbol  LIVE_SIG  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LIVE_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LIVE_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE_SIG	87	None	replace
347	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  -1)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  -1)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  -1)  {	  	non-compiled	[CE]  ')'  expected	82	None	add
348	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    >=    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	84	1	replace
349	[BUG]  [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    >=    null    ||    offsetEntry.dataOffset    ==    0)    {    	compilable	  [FE]  NullPointerException  	84	1	replace
350	[BUG]  [BUGGY]  if(entry  ==  null)  {  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    >=    null    ||    offsetEntry.dataOffset    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  entry	84	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
352	[BUG]  [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	70	1	replace
353	[BUG]  [BUGGY]  if(entry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null  ||  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null  ||  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  entry	70	None	replace
354	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHORT_OFFSET)  {  [CE]  cannot  find  symbol  SHORT_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHORT_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  SHORT_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_OFFSET)    {    	non-compiled	[CE]  cannot  find  symbol  SHORT_OFFSET	125	None	replace
355	[BUG]  [BUGGY]  if(entry  ==  null  ||  offsetEntry!=  null)  {  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >>    null)    {    	non-compiled	[CE]  cannot  find  symbol  entry	63	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >>    null)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
357	[BUG]  [BUGGY]  if(ze  ==  null  ||  offsetEntry!=  null)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null  ||  offsetEntry!=  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    if(offsetEntry    ==    null    ||    offsetEntry    >>    null)    {    	compilable	  [FE]  AssertionFailedError  	63	1	replace
358	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  EOCD_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  EOCD_FOR_FILENAME_LENGTH	119	None	replace
359	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZipEncoding.EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    ZipEncoding.UTF8)    {    	non-compiled	[CE]  cannot  find  symbol  EOCD_CFD_LOCATOR_OFFSET	119	None	replace
360	[BUG]  [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
361	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null)  {  If(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    If(offsetEntry    ==    null    ||    offsetEntry!=    null)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
363	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  1)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
365	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset!=  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
366	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getData());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getData());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getData());	  Entry    <?>    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
367	[BUG]  [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  >=  null  ||  offsetEntry  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	42	None	replace
368	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    {    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  NullPointerException  	126	1	replace
369	[BUG]  [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [FE]  NullPointerException  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null  ||  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    if(offsetEntry    {    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  NullPointerException  	126	1	replace
370	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	110	None	replace
371	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	110	None	replace
372	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	compilable	  [FE]  NullPointerException  	110	1	replace
373	[BUG]  [BUGGY]  if(ze  ==  null)  {  [FE]  NullPointerException  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	compilable	  [FE]  NullPointerException  	110	1	replace
374	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	110	None	replace
375	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipUtil.checkRequestedFeatures(ze))  {  [CE]  'void'  type  not  allowed  here  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipUtil.checkRequestedFeatures(ze))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZipUtil.checkRequestedFeatures(ze))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	110	None	replace
376	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()!=  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()!=  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset)||  offsetEntry.getMethod()!=  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset))    {    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	110	None	replace
377	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  {  null  ||  offsetEntry  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null)  {  if(offsetEntry  {  null  ||  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    if(offsetEntry  {  null  ||  offsetEntry  ==  null)  {	  	non-compiled	[CE]  ')'  expected	53	None	add
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
379	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
381	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
383	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  CFH_SIG)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	65	1	replace
384	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(offsetEntry  {  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ')'  expected	103	None	add
385	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >  0)  {  if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  >  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >    0)    {    if(offsetEntry  >=  null  ||  offsetEntry.dataOffset  >  0)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
386	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  0)  {  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=    null    &&    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {	  	non-compiled	[CE]  ';'  expected	101	None	add
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
388	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
389	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIZE)  {  [CE]  cannot  find  symbol  CFH_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  CFH_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    LAST_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  CFH_SIZE	88	None	replace
390	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIZE)  {  [CE]  cannot  find  symbol  LAST_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIZE)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  LAST_SIZE)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    LAST_SIG)    {    	non-compiled	[CE]  cannot  find  symbol  LAST_SIZE	88	None	replace
391	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.remove();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.remove();  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.remove();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
392	[BUG]  [BUGGY]  if(entry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(entry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(entry  ==  null  ||  offsetEntry.dataOffset  ==  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  entry	51	None	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    	compilable	  [FE]  AssertionFailedError  	116	1	replace
394	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POS_0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    	compilable	  [FE]  AssertionFailedError  	116	1	replace
395	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
396	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
398	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  -1)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  -1)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  -1)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    -1)    {    	compilable	  [FE]  AssertionFailedError  	83	1	replace
399	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  entry;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  entry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  if(entry!=  null)  {  return  entry;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
401	[BUG]  [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze  ==  null  ||  offsetEntry.dataOffset  >=  0)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    >=    0)    {    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    0)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
402	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LINE_OFFSET)  {  [CE]  cannot  find  symbol  LINE_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LINE_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LINE_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    start)    {    	non-compiled	[CE]  cannot  find  symbol  LINE_OFFSET	5	None	replace
403	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  ZERO_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ze.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH	3	None	replace
404	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(offsetEntry);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(offsetEntry);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(offsetEntry);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
405	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ce);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ce);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ce);	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
406	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  =  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  =  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
407	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entries.get(ce);	  OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
409	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    CFH_SIG)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
410	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCDL_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCDL_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  Zip64_EOCDL_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    this.dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET	95	None	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
412	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  AssertionFailedError  	109	1	replace
413	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  NullPointerException  	109	1	replace
414	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [FE]  NullPointerException  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.DEFLATED)    {    	compilable	  [FE]  NullPointerException  	109	1	replace
415	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  &&  offsetEntry  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    	compilable	  [FE]  NullPointerException  	56	1	replace
416	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry  ==  null)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry  ==  null)  {	  if(offsetEntry!=    null    ||    offsetEntry    ==    null)    {    	compilable	  [FE]  NullPointerException  	56	1	replace
417	[BUG]  [BUGGY]  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(!inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
418	[BUG]  [BUGGY]  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(inflater.useUnicodeExtraFields)  {  return  offsetEntry;  }	  if(offsetEntry.dataOffset    ==    null)    {    if(!inflater.useUnicodeExtraFields)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
419	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  POJO_EOCD_CFD_LOCATOR_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    ZERO_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  POJO_EOCD_CFD_LOCATOR_OFFSET	6	None	replace
420	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
421	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
422	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
423	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
424	[BUG]  [BUGGY]  if(ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
425	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  null)  {  [CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_FOR_FILENAME_LENGTH	108	None	replace
426	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  incomparable  types:  long  and  String  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  incomparable  types:  long  and  String	99	None	replace
427	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  File.separator)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    File.separator)    {    	non-compiled	[CE]  incomparable  types:  long  and  <null>	99	None	replace
428	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  null)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  null)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	57	None	replace
429	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  POS_0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    POS_0)    {    if(offsetEntry  {  null  ||  offsetEntry.dataOffset  ==  POS_0)  {	  	non-compiled	[CE]  ')'  expected	115	None	add
430	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_FOR_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  POJO_EOCD_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_FOR_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  POJO_EOCD_FOR_FILENAME_LENGTH)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol  POJO_EOCD_FOR_FILENAME_LENGTH	96	None	replace
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
432	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFD_LOCATOR_OFFSET)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
433	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  CFD_LOCATOR_OFFSET)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  =  CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    CFD_LOCATOR_OFFSET)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
434	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null  ||!offsetEntry.dataOffset)  {  [CE]  bad  operand  type  long  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry  ==  null  ||!offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry  ==  null  ||!offsetEntry.dataOffset)  {	  if(offsetEntry    ==    null    ||    offsetEntry    ==    null)    {    	non-compiled	[CE]  bad  operand  type  long  for  unary  operator  '!'	54	None	replace
435	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
436	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
437	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH!=  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
438	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  null)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
439	[BUG]  [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ==  offsetEntry.dataOffset)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
440	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ||  offsetEntry.dataOffset!=  null)  {  [CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ||  offsetEntry.dataOffset!=  null)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH  ||  offsetEntry.dataOffset!=  null)  {	  if(offsetEntry!=    null)    {    if(offsetEntry!=    null    ||    ze.getMethod()    ==    ZipArchiveEntry.METHOD_EOCDL_FILENAME_LENGTH)    {    	non-compiled	[CE]  cannot  find  symbol  METHOD_EOCDL_FILENAME_LENGTH	111	None	replace
441	[BUG]  [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POJO_EOCD_CFD_LOCATOR_OFFSET)  {  [CE]  cannot  find  symbol  POJO_EOCD_CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POJO_EOCD_CFD_LOCATOR_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  POJO_EOCD_CFD_LOCATOR_OFFSET)  {	  if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    ZERO)    {    	non-compiled	[CE]  cannot  find  symbol  POJO_EOCD_CFD_LOCATOR_OFFSET	114	None	replace
442	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
443	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  new  ZipArchiveEntry  <  K,  V>(ze);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  new  ZipArchiveEntry  <  K,  V>(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  new  ZipArchiveEntry  <  K,  V>(ze);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
444	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset()  :  null;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset()  :  null;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset()  :  null;	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
445	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset  :  entries.get(ze);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset  :  entries.get(ze);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.dataOffset  :  entries.get(ze);	  Entry    <    K,    V>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
446	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
447	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO)  {  [CE]  cannot  find  symbol  ZERO  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO	118	None	replace
448	[BUG]  [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {  [CE]  cannot  find  symbol  ZERO_OFFSET  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  ZERO_OFFSET)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    dataOffset)    {    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET	118	None	replace
449	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  NullPointerException  	25	1	replace
450	[BUG]  [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {	  if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    	compilable	  [FE]  NullPointerException  	25	1	replace
451	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  null;	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
452	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  ze;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  ze;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getValue()  :  ze;	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
453	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getZip()  :  null;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getZip()  :  null;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.getZip()  :  null;	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
454	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.get(ze):  null;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.get(ze):  null;  [BUGGY]      return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  offsetEntry.get(ze):  null;	  Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
