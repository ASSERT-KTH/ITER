bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    long  start  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
2	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  CFH_SIG  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
3	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  start  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  start  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  start  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
4	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  offset  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  offset  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  offset  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
5	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  fh  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  fh  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  fh  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
6	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  offsetEntry.dataOffset  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  ';'  expected	4	None	add
7	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  f  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  f  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  f  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
8	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    long  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
9	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
10	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
11	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  offset  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  offset  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  offset  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
12	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  fh  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  fh  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  fh  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
13	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
14	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  f  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  f  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  f  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
15	[BUG]  [BUGGY]  long  start  =  ze.getDataOffset();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getDataOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.getDataOffset();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  int  start  =  offsetEntry.getDataOffset();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.getDataOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.getDataOffset();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
17	[BUG]  [BUGGY]  long  start  =  offsetEntry.getDataLength();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getDataLength();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getDataLength();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  long  start  =  offsetEntry.getSize();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getSize();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
19	[BUG]  [BUGGY]  int  start  =  offsetEntry.dataOffset  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.dataOffset  -  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  -  2;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
21	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  -  2;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1L;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  -  1L;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
23	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1L;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1L;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  -  1L;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  /  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  /  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
25	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  /  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  /  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  /  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  *  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  *  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
27	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  *  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  *  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  *  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
28	[BUG]  [BUGGY]  int  start  =  offsetEntry.dataOffset  +  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.dataOffset  +  1;	  long    start    =    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  3;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  +  3;	  long    start    =    offsetEntry.dataOffset    +    1;    	compilable	  [FE]  AssertionFailedError  	3	1	replace
30	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  3;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  +  3;	  long    start    =    offsetEntry.dataOffset    +    1;    	compilable	  [FE]  AssertionFailedError  	3	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1L;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  +  1L;	  long    start    =    offsetEntry.dataOffset    +    1;    	compilable	  [FE]  AssertionFailedError  	3	1	replace
32	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1L;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1L;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  +  1L;	  long    start    =    offsetEntry.dataOffset    +    1;    	compilable	  [FE]  AssertionFailedError  	3	1	replace
33	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataLength;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataLength;	  long    start    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataLength	12	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getCompressedSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  ze.getCompressedSize();	  long    start    =    ze.dataOffset;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
35	[BUG]  [BUGGY]  long  start  =  ze.getCompressedSize();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getCompressedSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.getCompressedSize();	  long    start    =    ze.dataOffset;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
36	[BUG]  [BUGGY]  int  start  =  ze.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  ze.dataOffset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  ze.dataOffset;	  long    start    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	12	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  ze.getSize();	  long    start    =    ze.dataOffset;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
38	[BUG]  [BUGGY]  long  start  =  ze.getSize();  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.getSize();	  long    start    =    ze.dataOffset;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
39	[BUG]  [BUGGY]  long  start  =  ze.getStartOffset();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getStartOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.getStartOffset();	  long    start    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
40	[BUG]  [BUGGY]  long  start  =  ze.getOffset();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.getOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.getOffset();	  long    start    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
41	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    long  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
42	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
43	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  CFH_SIG  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
44	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  offset  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  offset  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  offset  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
45	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  CFH_SIG  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
46	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  fh  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  fh  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  fh  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
47	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    long  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
48	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.getInputStream();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  inflater  =  offsetEntry.getInputStream();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  inflater  =  offsetEntry.getInputStream();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
49	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.getMethod());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
50	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  File  ze  =  offsetEntry.getFile();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	File  ze  =  offsetEntry.getFile();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	10	None	replace
51	[BUG]  [BUGGY]  ze.setCompressedSize(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  ze.setCompressedSize(remaining);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	ze.setCompressedSize(remaining);	      	non-compiled	[CE]  cannot  find  symbol  remaining	10	None	replace
52	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
53	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
54	[BUG]  [BUGGY]  double  start  =  offsetEntry.dataOffset;  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  double  start  =  offsetEntry.dataOffset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	double  start  =  offsetEntry.dataOffset;	  int    start    =    offsetEntry.dataOffset;    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	1	None	replace
55	[BUG]  [BUGGY]  short  start  =  offsetEntry.dataOffset;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  short  start  =  offsetEntry.dataOffset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	short  start  =  offsetEntry.dataOffset;	  int    start    =    offsetEntry.dataOffset;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
56	[BUG]  [BUGGY]  byte  start  =  offsetEntry.dataOffset;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  byte  start  =  offsetEntry.dataOffset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	byte  start  =  offsetEntry.dataOffset;	  int    start    =    offsetEntry.dataOffset;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
57	[BUG]  [BUGGY]  long  start  =  offsetEntry.getOffset();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getOffset();	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
58	[BUG]  [BUGGY]  long  start  =  offsetEntry.length;  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.length;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.length;	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
59	[BUG]  [BUGGY]  long  start  =  offsetEntry.getLength();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getLength();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getLength();	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
60	[BUG]  [BUGGY]  int  start  =  offsetEntry.offset;  [CE]  cannot  find  symbol  offset  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.offset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.offset;	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol  offset	9	None	replace
61	[BUG]  [BUGGY]  int  start  =  offsetEntry.dataOffset  +  2;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.dataOffset  +  2;	  long    start    =    offsetEntry.dataOffset    +    2;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  /  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  /  2;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
63	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  /  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  /  2;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  0;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  +  0;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
65	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  0;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  +  0;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
66	[BUG]  [BUGGY]  long  start  =  offsetEntry.getEndOffset();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getEndOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getEndOffset();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  int  start  =  offsetEntry.getStartOffset();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  int  start  =  offsetEntry.getStartOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	int  start  =  offsetEntry.getStartOffset();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
68	[BUG]  [BUGGY]  long  start  =  offsetEntry.getStartOffset(),  ze.getCompressedSize();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getStartOffset(),  ze.getCompressedSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getStartOffset(),  ze.getCompressedSize();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  long  start  =  offsetEntry.getStartOffset()  -  ze.getCompressedSize();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getStartOffset()  -  ze.getCompressedSize();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getStartOffset()  -  ze.getCompressedSize();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
70	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
71	[BUG]  [BUGGY]  long  start  =  offsetEntry.remainderOffset();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.remainderOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.remainderOffset();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  Long  start  =  offsetEntry.getStartOffset();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  Long  start  =  offsetEntry.getStartOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	Long  start  =  offsetEntry.getStartOffset();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
73	[BUG]  [BUGGY]  long  start  =  offsetEntry.getStartOffset()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getStartOffset()  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getStartOffset()  -  1;	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
74	[BUG]  [BUGGY]  float  start  =  offsetEntry.dataOffset;  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  float  start  =  offsetEntry.dataOffset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	float  start  =  offsetEntry.dataOffset;	  int    start    =    offsetEntry.dataOffset;    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	1	None	replace
75	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  offsetEntry.dataOffset  -  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    long  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  ';'  expected	4	None	add
76	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  offset  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  offset  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    long  offset  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
77	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  cfg  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  cfg  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  cfg  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
78	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  ret  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  Long  ret  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    Long  ret  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  -  1  +  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
80	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  -  1  +  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
81	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  cfg  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  cfg  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  cfg  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
82	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  offset  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  offset  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    long  offset  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
83	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  ret  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  Long  ret  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    Long  ret  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  4;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  +  4;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
85	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  4;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  +  4;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  *  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	long  start  =  offsetEntry.dataOffset  *  2;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
87	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  *  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  *  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.dataOffset  *  2;	  long    start    =    offsetEntry.dataOffset    +    2;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
88	[BUG]  [BUGGY]  File  f  =  offsetEntry.getFile();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  File  f  =  offsetEntry.getFile();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	File  f  =  offsetEntry.getFile();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
89	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.getMethod());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.getMethod());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  ze  =  entries.get(offsetEntry.getMethod());	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	10	None	replace
90	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.getCompressedSize());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.getCompressedSize());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  ze  =  entries.get(offsetEntry.getCompressedSize());	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	10	None	replace
91	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);	      	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	10	None	replace
92	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  ze  =  entries.get(offsetEntry);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  ze  =  entries.get(offsetEntry);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	10	None	replace
93	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  f  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  Long  f  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    Long  f  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
94	[BUG]  [BUGGY]  long  start  =  ze.offset;  [CE]  cannot  find  symbol  offset  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.offset;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.offset;	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol  offset	9	None	replace
95	[BUG]  [BUGGY]  long  start  =  offsetEntry.getStart();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.getStart();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.getStart();	  long    start    =    offsetEntry.offset;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
96	[BUG]  [BUGGY]  long  start  =  ze.dataOffset  -  1;  [CE]  cannot  find  symbol  dataOffset  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze.dataOffset  -  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	5	None	replace
97	[BUG]  [BUGGY]  long  start  =  offsetEntry.offset  -  1;  [CE]  cannot  find  symbol  offset  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.offset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  offsetEntry.offset  -  1;	  long    start    =    offsetEntry.dataOffset    -    1;    	non-compiled	[CE]  cannot  find  symbol  offset	5	None	replace
98	[BUG]  [BUGGY]  long  start  =  entry.getDataOffset();  [CE]  cannot  find  symbol  entry  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  entry.getDataOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  entry.getDataOffset();	  long    start    =    offsetEntry.getDataOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	11	None	replace
99	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  short  start  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  short  start  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    short  start  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
100	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  double  start  =  offsetEntry.dataOffset  -  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  double  start  =  offsetEntry.dataOffset  -  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    double  start  =  offsetEntry.dataOffset  -  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
101	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  -  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  -  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    long  start  =  offsetEntry.dataOffset  -  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
102	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  -  1;  long  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    -    1;    long  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	4	None	add
103	[BUG]  [BUGGY]  long  start  =  ze,  offsetEntry.getStartOffset();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  ze,  offsetEntry.getStartOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  ze,  offsetEntry.getStartOffset();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  ';'  expected	8	None	replace
104	[BUG]  [BUGGY]  long  start  =  entry.getStartOffset();  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  entry.getStartOffset();  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long  start  =  entry.getStartOffset();	  long    start    =    offsetEntry.getStartOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	8	None	replace
105	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  short  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  short  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    short  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
106	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  3;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  long  start  =  offsetEntry.dataOffset  +  3;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    long  start  =  offsetEntry.dataOffset  +  3;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
107	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  int  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  int  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    int  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
108	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  double  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  2;  double  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    2;    double  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	6	None	add
109	[BUG]  [BUGGY]  InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getMethod());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getMethod());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
110	[BUG]  [BUGGY]  ze.setMethod(zipArchiveEntry.getMethod());  [CE]  cannot  find  symbol  zipArchiveEntry  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  ze.setMethod(zipArchiveEntry.getMethod());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	ze.setMethod(zipArchiveEntry.getMethod());	      	non-compiled	[CE]  cannot  find  symbol  zipArchiveEntry	10	None	replace
111	[BUG]  [BUGGY]  ze.setMethod(zipEncoding);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding)  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  ze.setMethod(zipEncoding);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	ze.setMethod(zipEncoding);	      	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding)	10	None	replace
112	[BUG]  [BUGGY]  InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getCompressedSize());  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	InputStream  inflater  =  ZipUtil.getInputStream(offsetEntry.getCompressedSize());	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
113	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  Entry  entry  =  entries.get(ze);  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	Entry  entry  =  entries.get(ze);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
114	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  short  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  short  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    short  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
115	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  start  =  offsetEntry.dataOffset  +  2;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  long  start  =  offsetEntry.dataOffset  +  2;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    long  start  =  offsetEntry.dataOffset  +  2;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
116	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  double  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  double  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    double  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
117	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  int  start  =  offsetEntry.dataOffset  +  1;  [CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  int  start  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    int  start  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  variable  start  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	2	None	add
118	[BUG]  [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  int  pos  =  offsetEntry.dataOffset  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);    [BUGGY]  long  start  =  offsetEntry.dataOffset  +  1;  int  pos  =  offsetEntry.dataOffset  +  1;  [BUGGY]    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	long    start    =    offsetEntry.dataOffset    +    1;    int  pos  =  offsetEntry.dataOffset  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	2	None	add
