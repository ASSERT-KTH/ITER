bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] OffsetEntry offsetEntry = entries.get(ze); [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { [BUGGY] OffsetEntry offsetEntry = entries.get(ze); [BUGGY] if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { [BUGGY] [BUGGY] OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	
3	[BUG] [BUGGY] if (offsetEntry == null) { [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); [BUGGY] if (offsetEntry == null) { [BUGGY] return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); [BUGGY] [BUGGY] if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	320	320	1	add	
5	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { [BUGGY] return null; [BUGGY] } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { [BUGGY] [BUGGY] return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	
7	[BUG] [BUGGY] ZipUtil.checkRequestedFeatures(ze); [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } [BUGGY] ZipUtil.checkRequestedFeatures(ze); [BUGGY] long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } [BUGGY] [BUGGY] ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	add	
9	[BUG] [BUGGY] long start = offsetEntry.dataOffset; [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); [BUGGY] long start = offsetEntry.dataOffset; [BUGGY] BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); [BUGGY] [BUGGY] long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	324	324	1	add	
11	[BUG] [BUGGY] BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; [BUGGY] BoundedInputStream bis =   new BoundedInputStream(start, ze.getCompressedSize()); [BUGGY] new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; [BUGGY] [BUGGY] BoundedInputStream bis =   new BoundedInputStream(start, ze.getCompressedSize()); new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	
13	[BUG] [BUGGY] switch (ze.getMethod()) { [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); [BUGGY] switch (ze.getMethod()) { [BUGGY] case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { super.close(); inflater.end(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); [BUGGY] [BUGGY] switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { super.close(); inflater.end(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	327	327	1	add	
15	[BUG] [BUGGY] return bis; [FE] AssertionFailedError [CONTEXT] OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: [BUGGY] return bis; [BUGGY] case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { super.close(); inflater.end(); } }; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: [BUGGY] [BUGGY] return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { super.close(); inflater.end(); } }; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getInputStream [RETURN_TYPE] InputStream  ZipArchiveEntry ze [VARIABLES] ZipEncoding zipEncoding InputStream $anonymous0 String archiveName encoding name int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields RandomAccessFile archive OffsetEntry offsetEntry BoundedInputStream bis ZipArchiveEntry ze Inflater $anonymous1 inflater Map entries entriesWithoutUTF8Flag nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	329	329	1	add	
17	[BUG] [BUGGY] noUTF8Flag.put(ze, new NameAndComment(fileName, comment)); [FE] AssertionFailedError [CONTEXT] archive.readFully(cdExtraData); ze.setCentralDirectoryExtra(cdExtraData); setSizesAndOffsetFromZip64Extra(ze, offset, diskStart); byte[] comment = new byte[commentLen]; archive.readFully(comment); ze.setComment(entryEncoding.decode(comment)); if (!hasUTF8Flag && useUnicodeExtraFields) { [BUGGY] noUTF8Flag.put(ze, new NameAndComment(fileName, comment)); [BUGGY] } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] readCentralDirectoryEntry [RETURN_TYPE] void  NameAndComment> noUTF8Flag [VARIABLES] byte[] cdExtraData cfh comment fileName name signatureBytes boolean addDummyByte closed hasUTF8Flag success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offset ZipArchiveEntry ze String archiveName encoding name GeneralPurposeBit gpFlag Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen diskStart extraLen fileNameLen off versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	513	513	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] archive.readFully(cdExtraData); ze.setCentralDirectoryExtra(cdExtraData); setSizesAndOffsetFromZip64Extra(ze, offset, diskStart); byte[] comment = new byte[commentLen]; archive.readFully(comment); ze.setComment(entryEncoding.decode(comment)); if (!hasUTF8Flag && useUnicodeExtraFields) { [BUGGY] [BUGGY] noUTF8Flag.put(ze, new NameAndComment(fileName, comment)); } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] readCentralDirectoryEntry [RETURN_TYPE] void  NameAndComment> noUTF8Flag [VARIABLES] byte[] cdExtraData cfh comment fileName name signatureBytes boolean addDummyByte closed hasUTF8Flag success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offset ZipArchiveEntry ze String archiveName encoding name GeneralPurposeBit gpFlag Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen diskStart extraLen fileNameLen off versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	513	513	1	add	
19	[BUG] [BUGGY] String orig = ze.getName(); [FE] AssertionFailedError [CONTEXT] } lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { [BUGGY] String orig = ze.getName(); [BUGGY] NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { [BUGGY] [BUGGY] String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	add	
21	[BUG] [BUGGY] NameAndComment nc = entriesWithoutUTF8Flag.get(ze); [FE] AssertionFailedError [CONTEXT] lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); [BUGGY] NameAndComment nc = entriesWithoutUTF8Flag.get(ze); [BUGGY] ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); [BUGGY] [BUGGY] NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	834	834	1	add	
23	[BUG] [BUGGY] ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,    nc.comment); [FE] AssertionFailedError [CONTEXT] } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); [BUGGY] ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,               nc.comment); [BUGGY] nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	835	836	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); [BUGGY] [BUGGY] ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,               nc.comment); nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	835	836	1	add	
25	[BUG] [BUGGY] if (!orig.equals(ze.getName())) { [FE] AssertionFailedError [CONTEXT] archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); [BUGGY] if (!orig.equals(ze.getName())) { [BUGGY] nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); [BUGGY] [BUGGY] if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	
27	[BUG] [BUGGY] nameMap.remove(orig); [FE] AssertionFailedError [CONTEXT] ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { [BUGGY] nameMap.remove(orig); [BUGGY] nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { [BUGGY] [BUGGY] nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	838	838	1	add	
29	[BUG] [BUGGY] nameMap.put(ze.getName(), ze); [FE] AssertionFailedError [CONTEXT] offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); [BUGGY] nameMap.put(ze.getName(), ze); [BUGGY] } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	839	839	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze); ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); [BUGGY] [BUGGY] nameMap.put(ze.getName(), ze); } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] resolveLocalFileHeaderData [RETURN_TYPE] void  NameAndComment> entriesWithoutUTF8Flag [VARIABLES] byte[] b cdExtraData cfdOffset cfh comment fileName localExtraData name sig signatureBytes zip64EocdOffset boolean addDummyByte closed found hasCompressedSize hasRelativeHeaderOffset hasUTF8Flag hasUncompressedSize success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offsetEntry ZipArchiveEntry ze String archiveName encoding name orig NameAndComment nc Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen count curr diskStart extraFieldLen extraLen fileNameLen lenToSkip off skipped skippedNow totalSkipped versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc maxDistanceFromEnd minDistanceFromEnd off offset remaining sig start stopSearching time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	839	839	1	add	
31	[BUG] [BUGGY] return nameMap.get(name); [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getEntry(String name) { [BUGGY] return nameMap.get(name); [BUGGY] } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getEntry [RETURN_TYPE] ZipArchiveEntry  String name [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.5	295	295	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getEntry(String name) { [BUGGY] [BUGGY] return nameMap.get(name); } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] getEntry [RETURN_TYPE] ZipArchiveEntry  String name [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.5	295	295	1	add	
33	[BUG] [BUGGY] throws IOException { [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) [BUGGY] throws IOException { [BUGGY] this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	197	197	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) [BUGGY] [BUGGY] throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	197	197	1	add	
35	[BUG] [BUGGY] private final Map<ZipArchiveEntry, OffsetEntry> entries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); [FE] AssertionFailedError [CONTEXT] [BUGGY] private final Map<ZipArchiveEntry, OffsetEntry> entries =  new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); [BUGGY] new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	86	87	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final Map<ZipArchiveEntry, OffsetEntry> entries =  new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	86	87	1	add	
37	[BUG] [BUGGY] private final Map<String, ZipArchiveEntry> nameMap = new HashMap<String, ZipArchiveEntry>(HASH_SIZE); [FE] AssertionFailedError [CONTEXT] [BUGGY] private final Map<String, ZipArchiveEntry> nameMap =  new HashMap<String, ZipArchiveEntry>(HASH_SIZE); [BUGGY] new HashMap<String, ZipArchiveEntry>(HASH_SIZE); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	92	93	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final Map<String, ZipArchiveEntry> nameMap =  new HashMap<String, ZipArchiveEntry>(HASH_SIZE); new HashMap<String, ZipArchiveEntry>(HASH_SIZE); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	92	93	1	add	
39	[BUG] [BUGGY] private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR = new Comparator<ZipArchiveEntry>() { [FE] AssertionFailedError [CONTEXT] [BUGGY] private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =  new Comparator<ZipArchiveEntry>() { [BUGGY] new Comparator<ZipArchiveEntry>() { public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) { if (e1 == e2) return 0; OffsetEntry off1 = entries.get(e1); OffsetEntry off2 = entries.get(e2); if (off1 == null) { return 1; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	947	948	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =  new Comparator<ZipArchiveEntry>() { new Comparator<ZipArchiveEntry>() { public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) { if (e1 == e2) return 0; OffsetEntry off1 = entries.get(e1); OffsetEntry off2 = entries.get(e2); if (off1 == null) { return 1; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	947	948	1	add	
41	[BUG] [BUGGY] this.archiveName = f.getAbsolutePath(); [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { [BUGGY] this.archiveName = f.getAbsolutePath(); [BUGGY] this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	198	198	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { [BUGGY] [BUGGY] this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	198	198	1	add	
43	[BUG] [BUGGY] this.encoding = encoding; [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); [BUGGY] this.encoding = encoding; [BUGGY] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	199	199	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); [BUGGY] [BUGGY] this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	199	199	1	add	
45	[BUG] [BUGGY] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; [BUGGY] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	200	200	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; [BUGGY] [BUGGY] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	200	200	1	add	
47	[BUG] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	201	201	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	201	201	1	add	
49	[BUG] [BUGGY] archive = new RandomAccessFile(f, "r"); [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] archive = new RandomAccessFile(f, "r"); [BUGGY] boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	202	202	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] [BUGGY] archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	202	202	1	add	
51	[BUG] [BUGGY] boolean success = false; [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); [BUGGY] boolean success = false; [BUGGY] try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	203	203	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); [BUGGY] [BUGGY] boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	203	203	1	add	
53	[BUG] [BUGGY] Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { [BUGGY] Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =    populateFromCentralDirectory(); [BUGGY] populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	205	206	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { [BUGGY] [BUGGY] Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =    populateFromCentralDirectory(); populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	205	206	1	add	
55	[BUG] [BUGGY] resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [FE] AssertionFailedError [CONTEXT] throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); [BUGGY] resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [BUGGY] success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	207	207	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); [BUGGY] [BUGGY] resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	207	207	1	add	
57	[BUG] [BUGGY] success = true; [FE] AssertionFailedError [CONTEXT] this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [BUGGY] success = true; [BUGGY] } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	208	208	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); [BUGGY] [BUGGY] success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	208	208	1	add	
59	[BUG] [BUGGY] if (!success) { [FE] AssertionFailedError [CONTEXT] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { [BUGGY] if (!success) { [BUGGY] try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	210	210	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, "r"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { [BUGGY] [BUGGY] if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD  } } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] <init> [RETURN_TYPE] String,boolean)  File f String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name IOException e2 Map entries entriesWithoutUTF8Flag nameMap File f int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	210	210	1	add	
62	[BUG] [BUGGY] private static final long CFH_SIG = ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final long CFH_SIG =  ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); [BUGGY] ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	386	387	1	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final long CFH_SIG =  ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1  [VARIABLES] 	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	386	387	1	add	
64	[BUG] [BUGGY] closed = true; [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    [BUGGY] closed = true; [BUGGY]  archive.close(); } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	238	238	1	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    [BUGGY] [BUGGY] closed = true; archive.close(); } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	238	238	1	add	
66	[BUG] [BUGGY] archive.close(); [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    closed = true; [BUGGY] archive.close(); [BUGGY] } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	240	240	1	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    closed = true; [BUGGY] [BUGGY] archive.close(); } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	240	240	1	add	
68	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    closed = true; archive.close(); [BUGGY] } [BUGGY]  [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	241	241	1	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void close() throws IOException {    closed = true; archive.close(); [BUGGY] [BUGGY] } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] close [RETURN_TYPE] void  [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	241	241	1	add	
70	[BUG] [BUGGY] if (zipfile != null) { [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { [BUGGY] if (zipfile != null) { [BUGGY] try { zipfile.close(); } catch (IOException e) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	249	249	1	replace	
71	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { [BUGGY] [BUGGY] if (zipfile != null) { try { zipfile.close(); } catch (IOException e) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	249	249	1	add	
72	[BUG] [BUGGY] zipfile.close(); [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { if (zipfile != null) { try { [BUGGY] zipfile.close(); [BUGGY] } catch (IOException e) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	251	251	1	replace	
73	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { if (zipfile != null) { try { [BUGGY] [BUGGY] zipfile.close(); } catch (IOException e) { // NOPMD  } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	251	251	1	add	
74	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { if (zipfile != null) { try { zipfile.close(); } catch (IOException e) { // NOPMD  [BUGGY] } [BUGGY] } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	254	254	1	replace	
75	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static void closeQuietly(ZipFile zipfile) { if (zipfile != null) { try { zipfile.close(); } catch (IOException e) { // NOPMD  [BUGGY] [BUGGY] } } } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] closeQuietly [RETURN_TYPE] void  ZipFile zipfile [VARIABLES] byte[] comment name boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive ZipFile zipfile String archiveName encoding name IOException e Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	254	254	1	add	
77	[BUG] [BUGGY] HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { [BUGGY] HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =   new HashMap<ZipArchiveEntry, NameAndComment>(); [BUGGY] new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	402	403	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { [BUGGY] [BUGGY] HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =   new HashMap<ZipArchiveEntry, NameAndComment>(); new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	402	403	1	add	
79	[BUG] [BUGGY] positionAtCentralDirectory(); [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); [BUGGY] positionAtCentralDirectory(); [BUGGY]  byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); }  [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	405	405	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); [BUGGY] [BUGGY] positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); }  [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	405	405	1	add	
81	[BUG] [BUGGY] byte[] signatureBytes = new byte[WORD]; [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); [BUGGY] byte[] signatureBytes = new byte[WORD]; [BUGGY] archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	407	407	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); [BUGGY] [BUGGY] byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	407	407	1	add	
83	[BUG] [BUGGY] archive.readFully(signatureBytes); [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; [BUGGY] archive.readFully(signatureBytes); [BUGGY] long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	408	408	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; [BUGGY] [BUGGY] archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	408	408	1	add	
85	[BUG] [BUGGY] long sig = ZipLong.getValue(signatureBytes); [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); [BUGGY] long sig = ZipLong.getValue(signatureBytes); [BUGGY]  if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	409	409	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); [BUGGY] [BUGGY] long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	409	409	1	add	
87	[BUG] [BUGGY] if (sig != CFH_SIG && startsWithLocalFileHeader()) { [FE] AssertionFailedError [CONTEXT] throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); [BUGGY] if (sig != CFH_SIG && startsWithLocalFileHeader()) { [BUGGY] throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	411	411	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); [BUGGY] [BUGGY] if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	411	411	1	add	
89	[BUG] [BUGGY] while (sig == CFH_SIG) { [FE] AssertionFailedError [CONTEXT] byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } [BUGGY] while (sig == CFH_SIG) { [BUGGY] readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	416	416	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } [BUGGY] [BUGGY] while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	416	416	1	add	
91	[BUG] [BUGGY] readCentralDirectoryEntry(noUTF8Flag); [FE] AssertionFailedError [CONTEXT] byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { [BUGGY] readCentralDirectoryEntry(noUTF8Flag); [BUGGY] archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	417	417	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { [BUGGY] [BUGGY] readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	417	417	1	add	
93	[BUG] [BUGGY] archive.readFully(signatureBytes); [FE] AssertionFailedError [CONTEXT] archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); [BUGGY] archive.readFully(signatureBytes); [BUGGY] sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	418	418	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); [BUGGY] [BUGGY] archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	418	418	1	add	
95	[BUG] [BUGGY] sig = ZipLong.getValue(signatureBytes); [FE] AssertionFailedError [CONTEXT] long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); [BUGGY] sig = ZipLong.getValue(signatureBytes); [BUGGY] } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	419	419	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); [BUGGY] [BUGGY] sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	419	419	1	add	
97	[BUG] [BUGGY] return noUTF8Flag; [FE] AssertionFailedError [CONTEXT] if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } [BUGGY] return noUTF8Flag; [BUGGY] } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	421	421	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException("central directory is empty, can't expand" + " corrupt archive."); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } [BUGGY] [BUGGY] return noUTF8Flag; } [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] populateFromCentralDirectory [RETURN_TYPE] Map  [VARIABLES] byte[] comment name signatureBytes boolean addDummyByte closed success useUnicodeExtraFields ZipEncoding zipEncoding RandomAccessFile archive HashMap noUTF8Flag String archiveName encoding name Map entries entriesWithoutUTF8Flag nameMap int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	421	421	1	add	
99	[BUG] [BUGGY] byte[] cfh = new byte[CFH_LEN]; [FE] AssertionFailedError [CONTEXT] throws IOException { [BUGGY] byte[] cfh = new byte[CFH_LEN]; [BUGGY]  archive.readFully(cfh); int off = 0; ZipArchiveEntry ze = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(cfh, off); off += SHORT; ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK); off += SHORT; // skip version info [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] readCentralDirectoryEntry [RETURN_TYPE] void  NameAndComment> noUTF8Flag [VARIABLES] byte[] cdExtraData cfh comment fileName name signatureBytes boolean addDummyByte closed hasUTF8Flag success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offset ZipArchiveEntry ze String archiveName encoding name GeneralPurposeBit gpFlag Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen diskStart extraLen fileNameLen off versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	436	436	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] throws IOException { [BUGGY] [BUGGY] byte[] cfh = new byte[CFH_LEN]; archive.readFully(cfh); int off = 0; ZipArchiveEntry ze = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(cfh, off); off += SHORT; ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK); off += SHORT; // skip version info [CLASS] ZipFile OffsetEntry 2 BoundedInputStream NameAndComment 1 [METHOD] readCentralDirectoryEntry [RETURN_TYPE] void  NameAndComment> noUTF8Flag [VARIABLES] byte[] cdExtraData cfh comment fileName name signatureBytes boolean addDummyByte closed hasUTF8Flag success useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding RandomAccessFile archive OffsetEntry offset ZipArchiveEntry ze String archiveName encoding name GeneralPurposeBit gpFlag Map entries entriesWithoutUTF8Flag nameMap noUTF8Flag int BYTE_SHIFT CFD_LOCATOR_OFFSET CFH_LEN HASH_SIZE MAX_EOCD_SIZE MIN_EOCD_SIZE NIBLET_MASK POS_0 POS_1 POS_2 POS_3 ZIP64_EOCDL_LENGTH ZIP64_EOCDL_LOCATOR_OFFSET ZIP64_EOCD_CFD_LOCATOR_OFFSET commentLen diskStart extraLen fileNameLen off versionMadeBy long CFH_SIG LFH_OFFSET_FOR_FILENAME_LENGTH dataOffset headerOffset loc remaining sig start time Comparator OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.2773500981126146	436	436	1	add	
