bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
2	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  0);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  0);	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
3	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
4	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
5	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
6	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
7	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	56	None	replace
8	[BUG]  [BUGGY]  File  ze  =  offsetEntry.dataOffset;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.dataOffset;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.dataOffset;	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
9	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getPath();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.getPath();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.getPath();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
10	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getName();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.getName();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.getName();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
11	[BUG]  [BUGGY]  File  ze  =  offsetEntry.dataLength;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.dataLength;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.dataLength;	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
12	[BUG]  [BUGGY]  File  ze  =  offsetEntry.dataFile;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.dataFile;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.dataFile;	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
13	[BUG]  [BUGGY]  File  ze  =  offsetEntry.dataFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.dataFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.dataFile();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
14	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO);	  ZipUtil.checkState(dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO	36	None	replace
15	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_SIG);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_SIG);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_SIG);	  ZipUtil.checkState(dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
16	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  remaining);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	51	None	replace
17	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	51	None	replace
18	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	51	None	replace
19	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	51	None	replace
20	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	51	None	replace
21	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	51	None	replace
22	[BUG]  [BUGGY]  ZipUtil.checkPermission(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(ze.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	59	None	replace
23	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataLength,  ze.dataOffset);  [CE]  cannot  find  symbol  dataLength  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataLength,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataLength,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	59	None	replace
24	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataOffset  +  1);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	59	None	replace
25	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.dataLength);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	59	None	replace
26	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataOffset;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataOffset;	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  incompatible  types	74	None	replace
27	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataOffset,  ze.getFile();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataOffset,  ze.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataOffset,  ze.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  ';'  expected	74	None	replace
28	[BUG]  [BUGGY]  File  f  =  offsetEntry.fileToFile();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.fileToFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.fileToFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
29	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataInputStream.getFile();  [CE]  cannot  find  symbol  dataInputStream  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataInputStream.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataInputStream.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataInputStream	74	None	replace
30	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataLength;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataLength;	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataLength	74	None	replace
31	[BUG]  [BUGGY]  File  f  =  offsetEntry.fileNumber();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.fileNumber();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.fileNumber();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
32	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry.dataOffset);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
33	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
34	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
35	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
36	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT_ENTRY);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT_ENTRY);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ZipArchiveEntry.DEFAULT_ENTRY);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
37	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(zip);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
38	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	39	None	replace
39	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  =  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  =  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  =  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
40	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  1);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
41	[BUG]  [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
42	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.dataOffset);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
43	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.data);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.data);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.data);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
44	[BUG]  [BUGGY]  ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
45	[BUG]  [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
46	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Lists.newHashSet();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Lists.newHashSet();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Lists.newHashSet();	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
47	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offset,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	16	None	replace
48	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  start  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(start,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(start,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	16	None	replace
49	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(entry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(entry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(entry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	16	None	replace
50	[BUG]  [BUGGY]  ZipUtil.checkPermission(dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	84	None	replace
51	[BUG]  [BUGGY]  ZipUtil.checkPermission(entry,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(entry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(entry,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	84	None	replace
52	[BUG]  [BUGGY]  ZipUtil.checkPermission(offset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offset,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	84	None	replace
53	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	17	None	replace
54	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkDeprecated(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	17	None	replace
55	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  dataOffset);	  ZipUtil.checkDeprecated(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	17	None	replace
56	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  remaining);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  remaining	57	None	replace
57	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	57	None	replace
58	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getCompressedSize());  [CE]  cannot  find  symbol  remaining  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  remaining	57	None	replace
59	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize()  +  1);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	57	None	replace
60	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getCompressedSize(),  dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	57	None	replace
61	[BUG]  [BUGGY]  ZipUtil.checkDummyByte(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummyByte(offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummyByte(offsetEntry.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
62	[BUG]  [BUGGY]  ZipUtil.checkDummy(remaining,  ze.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(remaining,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(remaining,  ze.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	107	None	replace
63	[BUG]  [BUGGY]  ZipUtil.checkDummy(offset,  ze.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offset,  ze.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	107	None	replace
64	[BUG]  [BUGGY]  ZipUtil.checkDummy(setEntry.dataOffset);  [CE]  cannot  find  symbol  setEntry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(setEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(setEntry.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  setEntry	107	None	replace
65	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	65	None	replace
66	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH	65	None	replace
67	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataLength);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	65	None	replace
68	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.DATA_OFFSET  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  DATA_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.DATA_OFFSET  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.DATA_OFFSET  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  DATA_OFFSET	65	None	replace
69	[BUG]  [BUGGY]  ZipUtil.checkPermission(remaining,  ze.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(remaining,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(remaining,  ze.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	86	None	replace
70	[BUG]  [BUGGY]  ZipUtil.checkPermission(offset,  ze.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offset,  ze.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	86	None	replace
71	[BUG]  [BUGGY]  ZipUtil.checkPermission(setEntry.dataOffset);  [CE]  cannot  find  symbol  setEntry  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(setEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(setEntry.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  setEntry	86	None	replace
72	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataLength);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	86	None	replace
73	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	55	None	replace
74	[BUG]  [BUGGY]  ZipUtil.checkDummy(start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  start  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(start,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(start,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	4	None	replace
75	[BUG]  [BUGGY]  ZipUtil.checkDummy(offset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offset,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	4	None	replace
76	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  dataOffset);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	5	None	replace
77	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	5	None	replace
78	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	5	None	replace
79	[BUG]  [BUGGY]  ZipUtil.checkDummy(entry,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(entry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(entry,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	5	None	replace
80	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	63	None	replace
81	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  dataOffset);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	63	None	replace
82	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	63	None	replace
83	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
84	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName(),  offsetEntry.dataOffset);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
85	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
86	[BUG]  [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
87	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.getName());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
88	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	26	None	replace
89	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  ze.dataOffset);  [CE]  incomparable  types:  long  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	26	None	replace
90	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset  +  1);  [CE]  incomparable  types:  long  and  <null>  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset  +  1);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	26	None	replace
91	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset));	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  ';'  expected	26	None	replace
92	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  ze.dataOffset);	  ZipUtil.checkRequestedFeatures(entry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	89	None	replace
93	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	12	None	replace
94	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
95	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	12	None	replace
96	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
97	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	83	None	replace
98	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	83	None	replace
99	[BUG]  [BUGGY]  ZipUtil.checkState(lineNumber,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  lineNumber  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(lineNumber,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(lineNumber,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  lineNumber	83	None	replace
100	[BUG]  [BUGGY]  ZipUtil.checkState(start,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  start  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(start,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(start,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  start	83	None	replace
101	[BUG]  [BUGGY]  ZipUtil.checkState(remaining,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remaining,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remaining,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	83	None	replace
102	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET	113	None	replace
103	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH	113	None	replace
104	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(ZERO_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ZERO_EOCD_CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(ZERO_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(ZERO_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_CFD_LOCATOR_OFFSET	113	None	replace
105	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	113	None	replace
106	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null);  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset!=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
107	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  null  ||  offsetEntry.dataOffset!=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	118	None	replace
108	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null);  [CE]  incomparable  types:  long  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null  ||  offsetEntry.dataOffset  ==  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
109	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  &&  offsetEntry.dataOffset!=  null);  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  &&  offsetEntry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null  &&  offsetEntry.dataOffset!=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
110	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null);  [CE]  incomparable  types:  long  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  ==  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
111	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  &&  offsetEntry.dataOffset!=  null);  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null  &&  offsetEntry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null  &&  offsetEntry.dataOffset!=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
112	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset;	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  incompatible  types	34	None	replace
113	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.inflater;  [CE]  cannot  find  symbol  inflater  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.inflater;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.inflater;	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  inflater	34	None	replace
114	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset,  ze.getInputStream();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset,  ze.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset,  ze.getInputStream();	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  ';'  expected	34	None	replace
115	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset  +  ze.getInputStream();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset  +  ze.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset  +  ze.getInputStream();	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
116	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  null  :  offsetEntry.getInputStream();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  null  :  offsetEntry.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset?  null  :  offsetEntry.getInputStream();	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  incompatible  types	34	None	replace
117	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  offsetEntry.getInputStream()  :  null;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  offsetEntry.getInputStream()  :  null;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset?  offsetEntry.getInputStream()  :  null;	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  incompatible  types	34	None	replace
118	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  start);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  start);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  start	61	None	replace
119	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
120	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
121	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getSize());	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
122	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
123	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
124	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
125	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	40	None	replace
126	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
127	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	40	None	replace
128	[BUG]  [BUGGY]  ZipUtil.checkDummy(inflater,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  inflater  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(inflater,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(inflater,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	108	None	replace
129	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
130	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
131	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
132	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
133	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
134	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
135	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry.dataOffset!=  null);  [CE]  cannot  find  symbol  setEntry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry.dataOffset!=  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  setEntry	25	None	replace
136	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength!=  null);  [CE]  cannot  find  symbol  dataLength  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataLength!=  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  dataLength	25	None	replace
137	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >>  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	replace
138	[BUG]  [BUGGY]  ZipUtil.checkState(offset.dataOffset!=  0);  [CE]  cannot  find  symbol  offset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offset.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offset.dataOffset!=  0);	  ZipUtil.checkState(line.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  offset	71	None	replace
139	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
140	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >>  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
141	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  -  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  -  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  1  -  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
142	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
143	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  ||  offsetEntry.dataOffset!=  1);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  ||  offsetEntry.dataOffset!=  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  1  ||  offsetEntry.dataOffset!=  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
144	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  2);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  2);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  2);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
145	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset!=  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset!=  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset!=  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	24	None	replace
146	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  ze.dataOffset);  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	24	None	replace
147	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  offsetEntry.dataOffset  +  1);  [CE]  incomparable  types:  long  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  offsetEntry.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null,  offsetEntry.dataOffset  +  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	24	None	replace
148	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  null,  offsetEntry.dataOffset);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	24	None	replace
149	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  +  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
150	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  +  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  +  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  +  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	116	None	replace
151	[BUG]  [BUGGY]  ZipUtil.checkState(start  +  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  start  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(start  +  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(start  +  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  start	116	None	replace
152	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  ze.dataOffset  <  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  ze.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  +  ze.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	116	None	replace
153	[BUG]  [BUGGY]  ZipUtil.checkState(lineOffset  +  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  lineOffset  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(lineOffset  +  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(lineOffset  +  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  lineOffset	116	None	replace
154	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  setEntry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry.dataOffset  ==  0);	  ZipUtil.checkState(ze.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  setEntry	99	None	replace
155	[BUG]  [BUGGY]  ZipUtil.checkState(remainingOffset  ==  0);  [CE]  cannot  find  symbol  remainingOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remainingOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remainingOffset  ==  0);	  ZipUtil.checkState(ze.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  remainingOffset	99	None	replace
156	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze.dataOffset,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	77	None	replace
157	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	77	None	replace
158	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  start  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	77	None	replace
159	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getMethod());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	77	None	replace
160	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	77	None	replace
161	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  ze.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	77	None	replace
162	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze,  offsetEntry.dataOffset);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	77	None	replace
163	[BUG]  [BUGGY]  ZipUtil.checkDummy(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(ze.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	1	None	replace
164	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	14	None	replace
165	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
166	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	14	None	replace
167	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	14	None	replace
168	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	104	None	replace
169	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkInvalidZip(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	104	None	replace
170	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze);	  ZipUtil.checkInvalidZip(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
171	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offset,  ze.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offset,  ze.dataOffset);	  ZipUtil.checkDeprecated(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	43	None	replace
172	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(entry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(entry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(entry.dataOffset);	  ZipUtil.checkDeprecated(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	43	None	replace
173	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(remaining,  ze.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(remaining,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(remaining,  ze.dataOffset);	  ZipUtil.checkDeprecated(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	43	None	replace
174	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
175	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
176	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
177	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
178	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
179	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
180	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
181	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
182	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
183	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry,  ze.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry,  ze.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry,  ze.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  ';'  expected	75	None	replace
184	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  this.entry.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  this.entry.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  this.entry.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
185	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue(ze);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue(ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.getValue(ze);	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
186	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  zipEncoding);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  zipEncoding);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  zipEncoding);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
187	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
188	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	112	None	replace
189	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  zipEncoding.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  zipEncoding.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  zipEncoding.dataOffset);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	112	None	replace
190	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  dataOffset);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	112	None	replace
191	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.keySet());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.keySet());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.keySet());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
192	[BUG]  [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
193	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet(),  offsetEntry.dataOffset);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
194	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.values());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.values());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.values());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
195	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  setEntry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry.dataOffset!=  0);	  ZipUtil.checkState(ze.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  setEntry	70	None	replace
196	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(setEntry.dataOffset);  [CE]  cannot  find  symbol  setEntry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(setEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(setEntry.dataOffset);	  ZipUtil.checkInvalidZip(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  setEntry	103	None	replace
197	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zipEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zipEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zipEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	103	None	replace
198	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(entry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(entry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(entry.dataOffset);	  ZipUtil.checkInvalidZip(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	103	None	replace
199	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
200	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
201	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
202	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
203	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
204	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(ze.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET	19	None	replace
205	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  inflater);  [CE]  cannot  find  symbol  inflater  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  inflater);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  inflater);	  ZipUtil.checkRequestedFeatures(inflater,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	90	None	replace
206	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entriesWithoutUTF8Flag,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entriesWithoutUTF8Flag,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entriesWithoutUTF8Flag,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(inflater,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	90	None	replace
207	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze);	  ZipUtil.checkDeprecated(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
208	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  start);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  start);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  start	48	None	replace
209	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
210	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getSize());	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
211	[BUG]  [BUGGY]  ZipUtil.checkPermission(zipEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zipEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zipEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	85	None	replace
212	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	91	None	replace
213	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entries,  dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	91	None	replace
214	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  entries);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  entries);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  entries);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	91	None	replace
215	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  entries);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  entries);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  entries);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	91	None	replace
216	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  dataOffset);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	91	None	replace
217	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  entries,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  entries,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  entries,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	91	None	replace
218	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  LFH_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ZERO_OFFSET_FOR_FILENAME_LENGTH);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
219	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  CFD_LOCATOR_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ZERO_OFFSET_FOR_FILENAME_LENGTH);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
220	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ZERO_OFFSET_FOR_FILENAME_LENGTH);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	105	None	replace
221	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  CFH_OFFSET_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  CFH_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ZERO_OFFSET_FOR_FILENAME_LENGTH);    	non-compiled	[CE]  cannot  find  symbol  CFH_OFFSET_FOR_FILENAME_LENGTH	105	None	replace
222	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  setEntry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry.dataOffset  <  0);	  ZipUtil.checkState(ze.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  setEntry	114	None	replace
223	[BUG]  [BUGGY]  ZipUtil.checkState(remaining  <  0);  [CE]  cannot  find  symbol  remaining  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remaining  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remaining  <  0);	  ZipUtil.checkState(ze.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	114	None	replace
224	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset!=  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	20	None	replace
225	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	20	None	replace
226	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.dataLength);	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	3	None	replace
227	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze);	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
228	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.getCompressedSize());	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
229	[BUG]  [BUGGY]  ZipUtil.checkDummy(ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(ze,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
230	[BUG]  [BUGGY]  ZipUtil.checkDummy(dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(dataOffset,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	3	None	replace
231	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze.getMethod());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	76	None	replace
232	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	76	None	replace
233	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
234	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offset.getMethod());  [CE]  cannot  find  symbol  offset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offset.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offset.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  offset	76	None	replace
235	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze);	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
236	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	110	None	replace
237	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(remaining,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(remaining,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(remaining,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	110	None	replace
238	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	49	None	replace
239	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	49	None	replace
240	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	49	None	replace
241	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  ==  null);  [CE]  cannot  find  symbol  setEntry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry.dataOffset  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry.dataOffset  ==  null);	  ZipUtil.checkState(ze.dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  setEntry	117	None	replace
242	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  null);  [CE]  cannot  find  symbol  line  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  ==  null);	  ZipUtil.checkState(ze.dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  line	117	None	replace
243	[BUG]  [BUGGY]  ZipUtil.checkState(entry.dataOffset  ==  null);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(entry.dataOffset  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(entry.dataOffset  ==  null);	  ZipUtil.checkState(ze.dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  entry	117	None	replace
244	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	38	None	replace
245	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
246	[BUG]  [BUGGY]  ZZUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ZZUtil  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZZUtil	38	None	replace
247	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset),  offsetEntry.dataOffset);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset),  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  ';'  expected	38	None	replace
248	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  >=  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	9	None	replace
249	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
250	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  start);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  start);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  start	52	None	replace
251	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	52	None	replace
252	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getSize());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	52	None	replace
253	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  line.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  line.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  line.dataOffset);	  ZipUtil.checkState(line.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	106	None	replace
254	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  dataOffset);	  ZipUtil.checkState(line.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	106	None	replace
255	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  source.dataOffset);  [CE]  cannot  find  symbol  source  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  source.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  source.dataOffset);	  ZipUtil.checkState(line.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  source	106	None	replace
256	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze),  offsetEntry.dataOffset);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
257	[BUG]  [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
258	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze,  offsetEntry.dataOffset));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze,  offsetEntry.dataOffset));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(ze,  offsetEntry.dataOffset));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
259	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.get(ze));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.get(ze));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries,  offsetEntry.get(ze));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
260	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(0));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(0));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(0));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
261	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.inflater.getInputStream();  [CE]  cannot  find  symbol  inflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.inflater.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.inflater.getInputStream();	  InputStream    inflater    =    ze.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  inflater	31	None	replace
262	[BUG]  [BUGGY]  InputStream  inflater  =  entry.getInputStream();  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  entry.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  entry.getInputStream();	  InputStream    inflater    =    ze.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  entry	31	None	replace
263	[BUG]  [BUGGY]  InputStream  inflater  =  entries.getInputStream();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  entries.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  entries.getInputStream();	  InputStream    inflater    =    ze.getInputStream();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
264	[BUG]  [BUGGY]  InputStream  inflater  =  inputStream.getInputStream();  [CE]  cannot  find  symbol  inputStream  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  inputStream.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  inputStream.getInputStream();	  InputStream    inflater    =    ze.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  inputStream	31	None	replace
265	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  <  0);  [CE]  cannot  find  symbol  dataLength  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataLength  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  dataLength	41	None	replace
266	[BUG]  [BUGGY]  ZipUtil.checkState(offsets.length  <  0);  [CE]  cannot  find  symbol  offsets  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsets.length  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsets.length  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsets	41	None	replace
267	[BUG]  [BUGGY]  ZipUtil.checkState(offsetOffset  <  0);  [CE]  cannot  find  symbol  offsetOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetOffset  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetOffset	41	None	replace
268	[BUG]  [BUGGY]  ZipUtil.checkState(offsetStart  <  0);  [CE]  cannot  find  symbol  offsetStart  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetStart  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetStart  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetStart	41	None	replace
269	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO);	  ZipUtil.checkState(dataOffset!=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO	21	None	replace
270	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_SIG);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_SIG);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_SIG);	  ZipUtil.checkState(dataOffset!=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
271	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataLength);	  ZipUtil.checkDummy(dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	6	None	replace
272	[BUG]  [BUGGY]  ZipUtil.checkDummy(offset);  [CE]  cannot  find  symbol  offset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offset);	  ZipUtil.checkDummy(dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	6	None	replace
273	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.data);  [CE]  cannot  find  symbol  data  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.data);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.data);	  ZipUtil.checkDummy(dataOffset);    	non-compiled	[CE]  cannot  find  symbol  data	6	None	replace
274	[BUG]  [BUGGY]  ZipUtil.checkDummy(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(remaining);	  ZipUtil.checkDummy(dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	6	None	replace
275	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  CFD_LOCATOR_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_OFFSET);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
276	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  BYTE_SHIFT);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  BYTE_SHIFT);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  BYTE_SHIFT);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_OFFSET);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
277	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  HASH_SIG);  [CE]  cannot  find  symbol  HASH_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  HASH_SIG);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  HASH_SIG);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  HASH_SIG	81	None	replace
278	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  >=  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  >=  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  >=  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	22	None	replace
279	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	22	None	replace
280	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  >>  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  >>  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  >>  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	22	None	replace
281	[BUG]  [BUGGY]  ZipUtil.checkState(offsetHashedOffset!=  0);  [CE]  cannot  find  symbol  offsetHashedOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetHashedOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetHashedOffset!=  0);	  ZipUtil.checkState(dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  offsetHashedOffset	7	None	replace
282	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength!=  0);  [CE]  cannot  find  symbol  dataLength  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataLength!=  0);	  ZipUtil.checkState(dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  dataLength	7	None	replace
283	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	67	None	replace
284	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
285	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	67	None	replace
286	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  1);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
287	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
288	[BUG]  [BUGGY]  ZipUtil.checkState(offset.dataOffset  <  0);  [CE]  cannot  find  symbol  offset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offset.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offset.dataOffset  <  0);	  ZipUtil.checkState(line.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offset	115	None	replace
289	[BUG]  [BUGGY]  ZipUtil.checkState(zip.dataOffset  <  0);  [CE]  cannot  find  symbol  zip  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(zip.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(zip.dataOffset  <  0);	  ZipUtil.checkState(line.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  zip	115	None	replace
290	[BUG]  [BUGGY]  ZipUtil.checkState(remainingOffset  <  0);  [CE]  cannot  find  symbol  remainingOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remainingOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remainingOffset  <  0);	  ZipUtil.checkState(line.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  remainingOffset	115	None	replace
291	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataLength,  ze.dataOffset);  [CE]  cannot  find  symbol  dataLength  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataLength,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataLength,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	2	None	replace
292	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataOffset  +  1);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	2	None	replace
293	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.dataLength);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	2	None	replace
294	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze);	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
295	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze.getMethod());	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
296	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze.getCompressedSize());	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
297	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze.dataLength);	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	18	None	replace
298	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze);	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
299	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.dataLength);	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	47	None	replace
300	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.getCompressedSize());	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
301	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.dataStart);  [CE]  cannot  find  symbol  dataStart  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.dataStart);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.dataStart);	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataStart	47	None	replace
302	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  ze.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
303	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  +  1;  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  +  1;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getValue()  +  1;	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
304	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getKey();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getKey();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getKey();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
305	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  -  1;  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue()  -  1;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entry.getValue()  -  1;	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
306	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataLength,  ze.dataOffset);  [CE]  cannot  find  symbol  dataLength  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataLength,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataLength,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	15	None	replace
307	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET	15	None	replace
308	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.dataOffset  +  1);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	15	None	replace
309	[BUG]  [BUGGY]  ZipUtil.checkState(offset.dataOffset  ==  0);  [CE]  cannot  find  symbol  offset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offset.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offset.dataOffset  ==  0);	  ZipUtil.checkState(line.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  offset	82	None	replace
310	[BUG]  [BUGGY]  ZipUtil.checkState(entry.dataOffset!=  null);  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(entry.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(entry.dataOffset!=  null);	  ZipUtil.checkState(ze.dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  entry	79	None	replace
311	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.getCompressedSize());	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
312	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.dataLength);	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	60	None	replace
313	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.getMethod());	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
314	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze);	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
315	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  offsetEntry.dataLength);	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	60	None	replace
316	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(ze.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	45	None	replace
317	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	37	None	replace
318	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET	46	None	replace
319	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.dataOffset  +  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.dataOffset  +  1);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
320	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET	46	None	replace
321	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataLength,  ze.dataOffset);  [CE]  cannot  find  symbol  dataLength  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataLength,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataLength,  ze.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	46	None	replace
322	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	13	None	replace
323	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
324	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	13	None	replace
325	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	13	None	replace
326	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset);	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  ';'  expected	33	None	replace
327	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(),  offsetEntry.dataOffset;	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  ';'  expected	33	None	replace
328	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream().openStream();  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream().openStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream().openStream();	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	33	None	replace
329	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze.getCompressedSize());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze.getCompressedSize());	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	33	None	replace
330	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	53	None	replace
331	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  remaining);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	53	None	replace
332	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(inflater,  ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  inflater  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(inflater,  ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(inflater,  ze,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	53	None	replace
333	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(remaining,  ze,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	53	None	replace
334	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
335	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  ==  null);  [CE]  cannot  find  symbol  dataLength  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataLength  ==  null);	  ZipUtil.checkState(dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  dataLength	64	None	replace
336	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataSet  ==  null);  [CE]  cannot  find  symbol  dataSet  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataSet  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataSet  ==  null);	  ZipUtil.checkState(dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  dataSet	64	None	replace
337	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  remaining);  [CE]  incomparable  types:  long  and  <null>  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  null,  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  null,  remaining);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	27	None	replace
338	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  ==  0);  [CE]  cannot  find  symbol  dataLength  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataLength  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataLength  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataLength	11	None	replace
339	[BUG]  [BUGGY]  ZipUtil.checkState(offsetHashedOffset  ==  0);  [CE]  cannot  find  symbol  offsetHashedOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetHashedOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetHashedOffset  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  offsetHashedOffset	11	None	replace
340	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getMethod(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getMethod(),  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getMethod(),  remaining);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  remaining	54	None	replace
341	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	54	None	replace
342	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getMethod());  [CE]  cannot  find  symbol  remaining  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  remaining,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  remaining	54	None	replace
343	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
344	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zip64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zip64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.zip64_EOCD_CFD_LOCATOR_OFFSET);	  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	101	None	replace
345	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET);	  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	101	None	replace
346	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LENGTH);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LENGTH);	  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH	101	None	replace
347	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  start);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  start);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  start	44	None	replace
348	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
349	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
350	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getSize());	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
351	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >>  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
352	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset!=  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset!=  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset!=  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	8	None	replace
353	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  >>  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  >>  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  >>  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	8	None	replace
354	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  start  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(start,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(start,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(zipEnd,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	73	None	replace
355	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
356	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
357	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >>  0);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >>  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >>  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	66	None	replace
358	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	66	None	replace
359	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  0  ||  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
360	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ZIP64_EOCD_CFD_LOCATOR_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ZERO_OFFSET_FOR_FILENAME_LENGTH);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
361	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry  ==  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry  ==  null);	  ZipUtil.checkState(offsetEntry!=    null);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
362	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry!=  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry!=  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry!=  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry!=    null);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
363	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry!=  0);  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry!=  0);	  ZipUtil.checkState(dataOffset!=    0);    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	7	None	replace
364	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.dataOffset,  offsetEntry.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
365	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry,  ze.getMethod());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry,  ze.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	76	None	replace
366	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	57	None	replace
367	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.keySet());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.keySet());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.keySet());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
368	[BUG]  [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.keySet());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
369	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.getMethod());	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
370	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getData());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getData());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.getData());	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
371	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.getDataOffset());	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
372	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset)  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset)  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null,  offsetEntry.dataOffset)	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  ';'  expected	26	None	replace
373	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	66	None	replace
374	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	113	None	replace
375	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	113	None	replace
376	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LENGTH	113	None	replace
377	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_OFFSET);  [CE]  cannot  find  symbol  ZERO_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_OFFSET);	  ZipUtil.checkState(dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET	36	None	replace
378	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataFile.getFile();  [CE]  cannot  find  symbol  dataFile  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataFile.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataFile.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataFile	74	None	replace
379	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataSource.getFile();  [CE]  cannot  find  symbol  dataSource  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataSource.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataSource.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataSource	74	None	replace
380	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataOffset  +  ze.getFile();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataOffset  +  ze.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataOffset  +  ze.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
381	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET	63	None	replace
382	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ZERO_EOCD_FOR_FILENAME_LENGTH);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH	63	None	replace
383	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  0,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  0,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
384	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  0,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  0,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	8	None	replace
385	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	15	None	replace
386	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getData();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.getData();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.getData();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
387	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getDestination();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.getDestination();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.getDestination();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
388	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getInputFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.getInputFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.getInputFile();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
389	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCD_CFD_LOCATOR_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_DATA_OFFSET);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
390	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_DATA_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	80	None	replace
391	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
392	[BUG]  [BUGGY]  if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
393	[BUG]  [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Collection  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(offsetEntry.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
394	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
395	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetentry.dataOffset);  [CE]  cannot  find  symbol  offsetentry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetentry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetentry.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offsetentry	107	None	replace
396	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
397	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	29	None	replace
398	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	53	None	replace
399	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  ze);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	53	None	replace
400	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  ze,  dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
401	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_LENGTH);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	65	None	replace
402	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH	65	None	replace
403	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_LENGTH);  [CE]  cannot  find  symbol  DATA_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_LENGTH);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  DATA_LENGTH	65	None	replace
404	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_OFFSET);  [CE]  cannot  find  symbol  DATA_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.DATA_OFFSET);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  DATA_OFFSET	65	None	replace
405	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_OFFSET);  [CE]  cannot  find  symbol  FOR_FILENAME_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  OffsetEntry.FOR_FILENAME_OFFSET);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_OFFSET	65	None	replace
406	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  ze.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  ze.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  ze.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	67	None	replace
407	[BUG]  [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [CE]  cannot  find  symbol  ZIPUtil  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >    0);    	non-compiled	[CE]  cannot  find  symbol  ZIPUtil	67	None	replace
408	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEnd,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEnd  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEnd,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEnd,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(ze.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEnd	19	None	replace
409	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zip,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zip,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.zip,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(zip,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	102	None	replace
410	[BUG]  [BUGGY]  ZipUtil.checkDummy(inflater);  [CE]  cannot  find  symbol  inflater  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(inflater);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(inflater);	  ZipUtil.checkDummy(dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	6	None	replace
411	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	39	None	replace
412	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
413	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffsets.getInputStream();  [CE]  cannot  find  symbol  dataOffsets  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffsets.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffsets.getInputStream();	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	34	None	replace
414	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset.getInputStream();  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset.getInputStream();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset.getInputStream();	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  long  cannot  be  dereferenced	34	None	replace
415	[BUG]  [BUGGY]  ZipUtil.checkState(offsetName.dataOffset  ==  0);  [CE]  cannot  find  symbol  offsetName  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetName.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetName.dataOffset  ==  0);	  ZipUtil.checkState(line.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  offsetName	82	None	replace
416	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	51	None	replace
417	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ze.getDataOffset());	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
418	[BUG]  [BUGGY]  ZipUtil.checkState(remaining  ==  0);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remaining  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remaining  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	11	None	replace
419	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(offsetEntry.dataOffset);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
420	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.get(ze);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
421	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze,  offsetEntry);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
422	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
423	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entries  =  offsetEntry.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entries  =  offsetEntry.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entries  =  offsetEntry.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
424	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  0,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	13	None	replace
425	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getData());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getData());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze.getData());	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
426	[BUG]  [BUGGY]  ZipUtil.checkState(inflater.dataOffset  <  0);  [CE]  cannot  find  symbol  inflater  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(inflater.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(inflater.dataOffset  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  inflater	41	None	replace
427	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.length  <  0);  [CE]  cannot  find  symbol  length  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.length  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.length  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  length	41	None	replace
428	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_LENGTH);  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ZERO_LENGTH);	  ZipUtil.checkState(line.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	106	None	replace
429	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
430	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataOffset,  ze.getDataOffset());	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
431	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.getMethod());	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
432	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.getDataOffset());	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
433	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ze.getSize());	  ZipUtil.checkInvalidZip(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
434	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataLength);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	37	None	replace
435	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  zipEncoding);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  zipEncoding);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  zipEncoding);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
436	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
437	[BUG]  [BUGGY]  ZipUtil.checkPermission(position,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  position  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(position,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(position,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  position	84	None	replace
438	[BUG]  [BUGGY]  ZipUtil.checkPermission(delete,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  delete  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(delete,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(delete,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  delete	84	None	replace
439	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.remaining,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.remaining,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.remaining,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	56	None	replace
440	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(line,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(line,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(line,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	56	None	replace
441	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetentry.dataOffset);  [CE]  cannot  find  symbol  offsetentry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetentry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetentry.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offsetentry	86	None	replace
442	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.zip,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.zip,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.zip,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	109	None	replace
443	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(line,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(line,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(line,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	109	None	replace
444	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(entry,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(entry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(entry,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	109	None	replace
445	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  offsetEntry.dataLength);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	62	None	replace
446	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.dataLength);	  ZipUtil.checkInvalidZip(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	72	None	replace
447	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ZERO_EOCD_LOCATOR_OFFSET);	  ZipUtil.checkDeprecated(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET	17	None	replace
448	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_DATA_OFFSET);  [CE]  cannot  find  symbol  ZERO_DATA_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ZERO_DATA_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ZERO_DATA_OFFSET);	  ZipUtil.checkDeprecated(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_DATA_OFFSET	17	None	replace
449	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  remaining  <  0);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  remaining  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  +  remaining  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	116	None	replace
450	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.data);  [CE]  cannot  find  symbol  data  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.data);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.data);	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol  data	33	None	replace
451	[BUG]  [BUGGY]  ZipUtil.checkDummy(zipEncoding,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zipEncoding,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zipEncoding,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
452	[BUG]  [BUGGY]  ZipUtil.checkDummy(zipEncoding,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zipEncoding,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zipEncoding,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	2	None	replace
453	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
454	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry  >=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry  >=  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	25	None	replace
455	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry  >>  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry  >>  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	replace
456	[BUG]  [BUGGY]  ZipUtil.checkState(setEntry!=  null);  [CE]  cannot  find  symbol  setEntry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(setEntry!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(setEntry!=  null);	  ZipUtil.checkState(dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  setEntry	25	None	replace
457	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
458	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
459	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
460	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  1,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
461	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  &&  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1  &&  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  1  &&  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
462	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
463	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZERO_SIG);  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ZERO_SIG);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ZERO_SIG);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	5	None	replace
464	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  OFFSET_COMPARATOR);  [CE]  incomparable  types:  long  and  Comparator<ZipArchiveEntry>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  OFFSET_COMPARATOR);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  OFFSET_COMPARATOR);	  ZipUtil.checkState(dataOffset!=    offsetEntry.dataOffset);    	non-compiled	[CE]  incomparable  types:  long  and  Comparator<ZipArchiveEntry>	21	None	replace
465	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  ze.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	38	None	replace
466	[BUG]  [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ZZipUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZZipUtil	38	None	replace
467	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	54	None	replace
468	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getMethod(),  remaining);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getMethod(),  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  offsetEntry.getMethod(),  remaining);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
469	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >>  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >>  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    >>    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	23	None	replace
470	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >>  0);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >>  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  >>  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	14	None	replace
471	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  z.dataOffset);  [CE]  cannot  find  symbol  z  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  z.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  z.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  z	20	None	replace
472	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_LENGTH);  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  ZERO_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	20	None	replace
473	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getData());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getData());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.getData());	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
474	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.getDataOffset());	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
475	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry,  ze.getSize());	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
476	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  inflater);  [CE]  cannot  find  symbol  inflater  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry,  inflater);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry,  inflater);	  ZipUtil.checkRequestedFeatures(inflater,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	90	None	replace
477	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zipEncoding,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zipEncoding,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zipEncoding,  ze.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
478	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  >=  null);  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  >=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  offsetEntry.dataOffset  >=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
479	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataLength);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataLength);	  ZipUtil.checkDeprecated(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	43	None	replace
480	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	replace
481	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSetWithoutUTF8Flag();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSetWithoutUTF8Flag();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSetWithoutUTF8Flag();	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
482	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(archiveName,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(archiveName,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(archiveName,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	77	None	replace
483	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  ze,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entries,  ze,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	91	None	replace
484	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entries,  offsetEntry.dataOffset,  remaining);	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	91	None	replace
485	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(entry,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(entry,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(entry,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(entries,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	91	None	replace
486	[BUG]  [BUGGY]  ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  <  0);  [CE]  cannot  find  symbol  offsetFor_FOR_FILENAME_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  <  0);	  ZipUtil.checkState(line.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetFor_FOR_FILENAME_LENGTH	115	None	replace
487	[BUG]  [BUGGY]  ZipUtil.checkState(offsetFor_FILENAME_LENGTH  <  0);  [CE]  cannot  find  symbol  offsetFor_FILENAME_LENGTH  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetFor_FILENAME_LENGTH  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetFor_FILENAME_LENGTH  <  0);	  ZipUtil.checkState(line.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetFor_FILENAME_LENGTH	115	None	replace
488	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ZIP64_EOCD_CFD_LOCATOR_OFFSET);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
489	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZERO_DATA_OFFSET);  [CE]  cannot  find  symbol  ZERO_DATA_OFFSET  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry,  ZERO_DATA_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry,  ZERO_DATA_OFFSET);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_DATA_OFFSET	49	None	replace
490	[BUG]  [BUGGY]  ZipUtil.checkState(lineEnd,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  lineEnd  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(lineEnd,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(lineEnd,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  lineEnd	83	None	replace
491	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry,  ze.dataOffset  ==  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry,  ze.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry,  ze.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	83	None	replace
492	[BUG]  [BUGGY]  ZipUtil.checkState(ze,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
493	[BUG]  [BUGGY]  ZipUtil.checkPermission(zipEncoding,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zipEncoding,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zipEncoding,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
494	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_DATA_OFFSET);  [CE]  cannot  find  symbol  ZERO_DATA_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_DATA_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_DATA_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_DATA_OFFSET	22	None	replace
495	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.get(ze));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.get(ze));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entriesWithoutUTF8Flag.get(ze));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
496	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(offsetEntry.dataOffset));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(offsetEntry.dataOffset));  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries.get(offsetEntry.dataOffset));	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.get(ze));    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
497	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zipEntry,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zipEntry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zipEntry,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	104	None	replace
498	[BUG]  [BUGGY]  ZipUtil.checkState(dataOffset  >>  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(dataOffset  >>  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(dataOffset  >>  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >>    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	68	None	replace
499	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  LFH_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_OFFSET);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
500	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(remaining,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(remaining,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(remaining,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(zipEnd,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	73	None	replace
501	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zipEnd,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEnd  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(offsetEntry.zipEnd,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(offsetEntry.zipEnd,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(zipEnd,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEnd	73	None	replace
502	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_OFFSET);  [CE]  cannot  find  symbol  CFH_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  CFH_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  CFH_OFFSET	81	None	replace
503	[BUG]  [BUGGY]  ZipUtil.checkPermission(ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(ze,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
504	[BUG]  [BUGGY]  ZipUtil.checkPermission(zipEntry,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zipEntry,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zipEntry,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	63	None	replace
505	[BUG]  [BUGGY]  ZipUtil.checkPermission(zip,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zip,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zip,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	63	None	replace
506	[BUG]  [BUGGY]  File  f  =  offsetEntry.file;  [CE]  cannot  find  symbol  file  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.file;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.file;	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  file	74	None	replace
507	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataOffset.getFile();  [CE]  long  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  f  =  offsetEntry.dataOffset.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  f  =  offsetEntry.dataOffset.getFile();	          File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  long  cannot  be  dereferenced	74	None	replace
508	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(ze.getCompressedSize());	  ZipUtil.checkInvalidZip(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
509	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(ze.getSize());	  ZipUtil.checkInvalidZip(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
510	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(ze.getDataOffset());	  ZipUtil.checkInvalidZip(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
511	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	78	None	replace
512	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.OFFSET_FOR_FILENAME_LENGTH  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  OFFSET_FOR_FILENAME_LENGTH	65	None	replace
513	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.CFD_LOCATOR_OFFSET  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.CFD_LOCATOR_OFFSET  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.CFD_LOCATOR_OFFSET  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET	65	None	replace
514	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.CFH_SIG  ==  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  CFH_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.CFH_SIG  ==  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.CFH_SIG  ==  offsetEntry.dataOffset);	  ZipUtil.checkState(OffsetEntry.dataOffset    ==    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  CFH_SIG	65	None	replace
515	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset!=  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset!=  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset!=  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	24	None	replace
516	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset!=  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	24	None	replace
517	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  line  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  line	14	None	replace
518	[BUG]  [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [CE]  cannot  find  symbol  ZIPUtil  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset!=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  ZIPUtil	14	None	replace
519	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  zipEntry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkDeprecated(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	110	None	replace
520	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset  -  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEntry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEntry.dataOffset  -  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEntry.dataOffset  -  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	110	None	replace
521	[BUG]  [BUGGY]  ZipUtil.checkState(inflater  ==  null);  [CE]  cannot  find  symbol  inflater  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(inflater  ==  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(inflater  ==  null);	  ZipUtil.checkState(dataOffset    ==    null);    	non-compiled	[CE]  cannot  find  symbol  inflater	64	None	replace
522	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	51	None	replace
523	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	15	None	replace
524	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	15	None	replace
525	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip,  ze.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip,  ze.dataOffset);	  ZipUtil.checkDeprecated(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	111	None	replace
526	[BUG]  [BUGGY]  ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	58	None	replace
527	[BUG]  [BUGGY]  ZipUtil.checkPermission(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	58	None	replace
528	[BUG]  [BUGGY]  ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	59	None	replace
529	[BUG]  [BUGGY]  ZipUtil.checkPermission(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	59	None	replace
530	[BUG]  [BUGGY]  ZipUtil.checkPermission(zipEncoding,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(zipEncoding,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(zipEncoding,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	59	None	replace
531	[BUG]  [BUGGY]  ZipUtil.checkState(zip.dataOffset!=  null);  [CE]  cannot  find  symbol  zip  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(zip.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(zip.dataOffset!=  null);	  ZipUtil.checkState(line.dataOffset!=    null);    	non-compiled	[CE]  cannot  find  symbol  zip	88	None	replace
532	[BUG]  [BUGGY]  ZipUtil.checkPermission(remaining  -  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(remaining  -  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(remaining  -  offsetEntry.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	86	None	replace
533	[BUG]  [BUGGY]  ZipUtil.checkPermission(position,  ze.dataOffset);  [CE]  cannot  find  symbol  position  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(position,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(position,  ze.dataOffset);	  ZipUtil.checkPermission(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  position	86	None	replace
534	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  null,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  null,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  ==  null,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	26	None	replace
535	[BUG]  [BUGGY]  ZipUtil.checkState(zipEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  zipEntry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(zipEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(zipEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEntry.dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	93	None	replace
536	[BUG]  [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  ZIPUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  ZIPUtil	66	None	replace
537	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  remaining	54	None	replace
538	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(signature,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  signature  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(signature,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(signature,  offsetEntry.dataOffset,  ze.getMethod());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  signature	54	None	replace
539	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset);  [CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(zipEncoding,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(inflater,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  checkRequestedFeatures  in  class  ZipUtil  cannot  be  applied  to  given  types;	90	None	replace
540	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(inflater,  ze.dataOffset);  [CE]  cannot  find  symbol  inflater  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(inflater,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(inflater,  ze.dataOffset);	  ZipUtil.checkRequestedFeatures(inflater,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  inflater	90	None	replace
541	[BUG]  [BUGGY]  ZipUtil.checkDummy(line,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(line,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(line,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	5	None	replace
542	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry,  ze.getDataOffset());	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
543	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(entry,  ze.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(entry,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(entry,  ze.dataOffset);	  ZipUtil.checkDeprecated(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	18	None	replace
544	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  line  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  line	12	None	replace
545	[BUG]  [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  ZIPUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZIPUtil.checkState(offsetEntry.dataOffset  ==  0  ||  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0    ||    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  ZIPUtil	12	None	replace
546	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  offsetEntry.dataOffset,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	38	None	replace
547	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	38	None	replace
548	[BUG]  [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	38	None	replace
549	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
550	[BUG]  [BUGGY]  ZipUtil.checkState(zipEntry!=  null);  [CE]  cannot  find  symbol  zipEntry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(zipEntry!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(zipEntry!=  null);	  ZipUtil.checkState(offsetEntry!=    null);    	non-compiled	[CE]  cannot  find  symbol  zipEntry	69	None	replace
551	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	13	None	replace
552	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  ==  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  ==  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	13	None	replace
553	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(ceiling,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ceiling  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(ceiling,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(ceiling,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ceiling	56	None	replace
554	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	40	None	replace
555	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  <  0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  <  0,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  <  0,  offsetEntry.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
556	[BUG]  [BUGGY]  ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  ==  0);  [CE]  cannot  find  symbol  offsetFor_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetFor_FOR_FILENAME_LENGTH  ==  0);	  ZipUtil.checkState(line.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  offsetFor_FOR_FILENAME_LENGTH	82	None	replace
557	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  1);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset!=  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset!=  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	10	None	replace
558	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset!=  1);  [CE]  cannot  find  symbol  line  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset!=  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset!=  1);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol  line	10	None	replace
559	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  1,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  1,  ze.dataOffset);	  ZipUtil.checkState(offsetEntry.dataOffset!=    1);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	10	None	replace
560	[BUG]  [BUGGY]  ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	1	None	replace
561	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	77	None	replace
562	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze.getDataOffset(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze.getDataOffset(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze.getDataOffset(),  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
563	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(ze.getMethod(),  offsetEntry.dataOffset);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(ze.getMethod(),  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(ze.getMethod(),  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	77	None	replace
564	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);	          InputStream    inflater    =    getInputStream(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	77	None	replace
565	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  remaining  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(remaining,  offsetEntry.dataOffset,  ze.getCompressedSize());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  remaining	57	None	replace
566	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  null;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
567	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ZERO);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ZERO);	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  ZERO	44	None	replace
568	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(offsetEntry.dataOffset,  ze.getDataOffset());	  ZipUtil.checkDeprecated(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
569	[BUG]  [BUGGY]  ZipUtil.checkState(entry.dataOffset  ==  0);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(entry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(entry.dataOffset  ==  0);	  ZipUtil.checkState(ze.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  entry	99	None	replace
570	[BUG]  [BUGGY]  ZipUtil.checkState(entry.dataOffset  <  0);  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(entry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(entry.dataOffset  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  entry	41	None	replace
571	[BUG]  [BUGGY]  ZipUtil.checkState(offsetHeaderOffset  <  0);  [CE]  cannot  find  symbol  offsetHeaderOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetHeaderOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetHeaderOffset  <  0);	  ZipUtil.checkState(dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetHeaderOffset	41	None	replace
572	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  ze.dataOffset!=  null);  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  ze.dataOffset!=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  ==  null  ||  ze.dataOffset!=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    ==    null    ||    offsetEntry.dataOffset!=    null);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	118	None	replace
573	[BUG]  [BUGGY]  ZipUtil.checkPermission(entry,  ze.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(entry,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(entry,  ze.dataOffset);	  ZipUtil.checkPermission(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	60	None	replace
574	[BUG]  [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(offsetEntry.dataOffset,  ZERO);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(offsetEntry.dataOffset,  ZERO);	  ZipUtil.checkPermission(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  ZERO	61	None	replace
575	[BUG]  [BUGGY]  ZipUtil.checkState(offsetentry.dataOffset  <  0);  [CE]  cannot  find  symbol  offsetentry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetentry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetentry.dataOffset  <  0);	  ZipUtil.checkState(ze.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  offsetentry	114	None	replace
576	[BUG]  [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  ZIPUtil  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZIPUtil.checkState(offsetEntry.dataOffset  <  0  ||  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(offsetEntry.dataOffset    <    0    ||    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  ZIPUtil	39	None	replace
577	[BUG]  [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  ze.getInputStream()  :  null;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  offsetEntry.dataOffset?  ze.getInputStream()  :  null;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  offsetEntry.dataOffset?  ze.getInputStream()  :  null;	  InputStream    inflater    =    offsetEntry.getInputStream();    	non-compiled	[CE]  incompatible  types	34	None	replace
578	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  =  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  <  =  1);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  <  =  1);	  ZipUtil.checkState(offsetEntry.dataOffset    <    =    0);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
579	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  remaining.length  <  0);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  +  remaining.length  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  +  remaining.length  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	116	None	replace
580	[BUG]  [BUGGY]  ZipUtil.checkState(position  +  offsetEntry.dataOffset  <  0);  [CE]  cannot  find  symbol  position  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(position  +  offsetEntry.dataOffset  <  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(position  +  offsetEntry.dataOffset  <  0);	  ZipUtil.checkState(remaining    +    offsetEntry.dataOffset    <    0);    	non-compiled	[CE]  cannot  find  symbol  position	116	None	replace
581	[BUG]  [BUGGY]  ZipUtil.checkPermission(remaining);  [CE]  cannot  find  symbol  remaining  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(remaining);	  ZipUtil.checkPermission(entry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	87	None	replace
582	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(zip.getMethod());  [CE]  cannot  find  symbol  zip  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(zip.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(zip.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	76	None	replace
583	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(offsetEntry.getMethod(),  ze.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
584	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(entry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(entry.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(entry.getMethod());	          InputStream    inflater    =    getInputStream(offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	76	None	replace
585	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  >=  0);  [CE]  cannot  find  symbol  line  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  line	9	None	replace
586	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  >=  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	9	None	replace
587	[BUG]  [BUGGY]  ZipUtil.checkState(remaining  +  offsetEntry.dataOffset  >=  0);  [CE]  cannot  find  symbol  remaining  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(remaining  +  offsetEntry.dataOffset  >=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(remaining  +  offsetEntry.dataOffset  >=  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    0);    	non-compiled	[CE]  cannot  find  symbol  remaining	9	None	replace
588	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset  >=  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	22	None	replace
589	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.deprecated);  [CE]  cannot  find  symbol  deprecated  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.deprecated);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zipEncoding,  offsetEntry.deprecated);	  ZipUtil.checkDeprecated(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  deprecated	112	None	replace
590	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.length  ==  0);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.length  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.length  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
591	[BUG]  [BUGGY]  ZipUtil.checkState(line.offset  ==  0);  [CE]  cannot  find  symbol  line  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.offset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.offset  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  line	11	None	replace
592	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.inputOffset  ==  0);  [CE]  cannot  find  symbol  inputOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.inputOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.inputOffset  ==  0);	  ZipUtil.checkState(dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  inputOffset	11	None	replace
593	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(dataOffset,  ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(dataOffset,  ze,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(dataOffset,  ze,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
594	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(line,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(line,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(line,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	49	None	replace
595	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.inputOffset!=  0);  [CE]  cannot  find  symbol  inputOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.inputOffset!=  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.inputOffset!=  0);	  ZipUtil.checkState(dataOffset!=    0);    	non-compiled	[CE]  cannot  find  symbol  inputOffset	7	None	replace
596	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entry.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entry.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entry.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
597	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entries.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entries.getValue();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.entries.getValue();	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
598	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.dataOffset;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.dataOffset;	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
599	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.separator;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.separator;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.separator;	          Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
600	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
601	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset,  ze.dataOffset  ==  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset,  ze.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset,  ze.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	83	None	replace
602	[BUG]  [BUGGY]  ZipUtil.checkState(zip,  offsetEntry.dataOffset  ==  0);  [CE]  cannot  find  symbol  zip  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(zip,  offsetEntry.dataOffset  ==  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(zip,  offsetEntry.dataOffset  ==  0);	  ZipUtil.checkState(zipEnd,    offsetEntry.dataOffset    ==    0);    	non-compiled	[CE]  cannot  find  symbol  zip	83	None	replace
603	[BUG]  [BUGGY]  File  ze  =  entry.getFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  entry.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  entry.getFile();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
604	[BUG]  [BUGGY]  File  ze  =  offsetEntry.data;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.data;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.data;	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
605	[BUG]  [BUGGY]  File  ze  =  entries.getFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  entries.getFile();  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  entries.getFile();	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
606	[BUG]  [BUGGY]  File  ze  =  offsetEntry.file;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  File  ze  =  offsetEntry.file;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	File  ze  =  offsetEntry.file;	          File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
607	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  >=  null);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  >=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  >=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    null);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	27	None	replace
608	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  >=  null);  [CE]  cannot  find  symbol  line  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  >=  null);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  >=  null);	  ZipUtil.checkState(offsetEntry.dataOffset    >=    null);    	non-compiled	[CE]  cannot  find  symbol  line	27	None	replace
609	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  null;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  null;  }  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    null;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
610	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry,  ze.getSize());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry,  ze.getSize());	  ZipUtil.checkDummy(offsetEntry,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
611	[BUG]  [BUGGY]  ZipUtil.checkState(lineOffset!=  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  lineOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(lineOffset!=  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(lineOffset!=  offsetEntry.dataOffset);	  ZipUtil.checkState(dataOffset!=    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  lineOffset	21	None	replace
612	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkInvalidZip(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	104	None	replace
613	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LENGTH);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LENGTH);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCDL_LENGTH);	  ZipUtil.checkInvalidZip(zip64_EOCD_CFD_LOCATOR_OFFSET);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	101	None	replace
614	[BUG]  [BUGGY]  InputStream  inflater  =  getInputStream(),  ze.getMethod());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  InputStream  inflater  =  getInputStream(),  ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	InputStream  inflater  =  getInputStream(),  ze.getMethod());	  InputStream    inflater    =    getInputStream();    	non-compiled	[CE]  ';'  expected	33	None	replace
615	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry,  ze.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry,  ze.getName());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entry,  ze.getName());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entry.getName());    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
616	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entries.get(ze):  null;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entries.get(ze):  null;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entries.get(ze):  null;	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
617	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
618	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(entry);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(entry);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(entry);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
619	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(ze);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(ze);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.get(ze);	          Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
620	[BUG]  [BUGGY]  ZipUtil.checkPermission(line,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  line  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(line,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(line,  offsetEntry.dataOffset);	  ZipUtil.checkPermission(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  line	84	None	replace
621	[BUG]  [BUGGY]  ZipUtil.checkState(line.dataOffset  >>  0);  [CE]  cannot  find  symbol  line  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(line.dataOffset  >>  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(line.dataOffset  >>  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >>    0);    	non-compiled	[CE]  cannot  find  symbol  line	68	None	replace
622	[BUG]  [BUGGY]  ZipUtil.checkState(ze.dataOffset  >>  0);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(ze.dataOffset  >>  0);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(ze.dataOffset  >>  0);	  ZipUtil.checkState(offsetEntry.dataOffset    >>    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	68	None	replace
623	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(ze.getMethod());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(ze.getMethod());	  ZipUtil.checkDeprecated(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
624	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ZERO);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ZERO);	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol  ZERO	52	None	replace
625	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getDataOffset());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,  ze.getDataOffset());	  ZipUtil.checkRequestedFeatures(offsetEntry.dataOffset,    remaining);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
626	[BUG]  [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  offset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkRequestedFeatures(offset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkRequestedFeatures(offset,  offsetEntry.dataOffset);	  ZipUtil.checkRequestedFeatures(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	55	None	replace
627	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(entries);	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
628	[BUG]  [BUGGY]  ZipUtil.checkPermission(pollEntry.dataOffset);  [CE]  cannot  find  symbol  pollEntry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkPermission(pollEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkPermission(pollEntry.dataOffset);	  ZipUtil.checkPermission(zipEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  pollEntry	85	None	replace
629	[BUG]  [BUGGY]  ZipUtil.checkDummy(entry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(entry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(entry.dataOffset);	  ZipUtil.checkDummy(ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	107	None	replace
630	[BUG]  [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkInvalidZip(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkInvalidZip(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	45	None	replace
631	[BUG]  [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  offsetEntry.remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(offsetEntry.dataOffset,  offsetEntry.remaining);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(offsetEntry.dataOffset,  offsetEntry.remaining);	  ZipUtil.checkDummy(remaining,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	108	None	replace
632	[BUG]  [BUGGY]  ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	2	None	replace
633	[BUG]  [BUGGY]  ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	2	None	replace
634	[BUG]  [BUGGY]  ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDummy(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  ZipUtil.checkDummy(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	2	None	replace
635	[BUG]  [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCDL_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCDL_LOCATOR_OFFSET);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkState(offsetEntry.dataOffset!=  ZIP64_EOCDL_LOCATOR_OFFSET);	  ZipUtil.checkState(offsetEntry.dataOffset!=    ZERO_DATA_OFFSET);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
636	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_FOR_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_FOR_FILENAME_LENGTH	113	None	replace
637	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	113	None	replace
638	[BUG]  [BUGGY]  Map  entries  =  Sets.newHashSet(entries.keySet());  [CE]  cannot  find  symbol  Sets  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  Map  entries  =  Sets.newHashSet(entries.keySet());  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	Map  entries  =  Sets.newHashSet(entries.keySet());	          Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(entries.keySet());    	non-compiled	[CE]  cannot  find  symbol  Sets	98	None	replace
639	[BUG]  [BUGGY]  ZipUtil.checkDeprecated(ceilingOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  ceilingOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }      [BUGGY]  ZipUtil.checkDeprecated(ceilingOffset,  offsetEntry.dataOffset);  [BUGGY]      long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	323	323	1	replace	ZipUtil.checkDeprecated(ceilingOffset,  offsetEntry.dataOffset);	  ZipUtil.checkDeprecated(zip,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ceilingOffset	109	None	replace
