bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize());	  boundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
2	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());	  boundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
3	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
4	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  start);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding,long)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  start);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding,long)	97	None	replace
6	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  offset);  [CE]  cannot  find  symbol  offset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  offset);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  cannot  find  symbol  offset	97	None	replace
7	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry.dataOffset);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding,long)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  offsetEntry.dataOffset);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding,long)	97	None	replace
8	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  archiveName);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding,String)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  archiveName);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  archiveName);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding,String)	97	None	replace
9	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  end);  [CE]  cannot  find  symbol  end  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  end);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  end);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  cannot  find  symbol  end	97	None	replace
10	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  offsetEntry.getCompressedSize());	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
11	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  file);  [CE]  cannot  find  symbol  file  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  file);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  file);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  cannot  find  symbol  file	97	None	replace
12	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  bis  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  bis	61	None	replace
13	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
14	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	14	None	replace
15	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());  [CE]  cannot  find  symbol  dataOffsets  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	14	None	replace
17	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  1);	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
18	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
19	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
20	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
21	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
22	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getSize());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
23	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getSize());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
24	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getSize());  [CE]  cannot  find  symbol  dataOffsets  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	27	None	replace
25	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	27	None	replace
26	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
27	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
28	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset(),  start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset(),  start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset(),  start,  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
29	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getRemainderOffset());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
30	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
31	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
32	[BUG]  [BUGGY]  File  file  =  offsetEntry.getFile();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  file  =  offsetEntry.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  file  =  offsetEntry.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
33	[BUG]  [BUGGY]  File  f  =  offsetEntry.file.getFile();  [CE]  cannot  find  symbol  file  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.file.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.file.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol  file	89	None	replace
34	[BUG]  [BUGGY]  File  f  =  entry.getFile();  [CE]  cannot  find  symbol  entry  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  entry.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  entry.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol  entry	89	None	replace
35	[BUG]  [BUGGY]  File  f  =  archive.getFile();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  archive.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  archive.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
36	[BUG]  [BUGGY]  File  f  =  offsetFile.getFile();  [CE]  cannot  find  symbol  offsetFile  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetFile.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetFile.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol  offsetFile	89	None	replace
37	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(remaining,  ze.getRemaining(),  start);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(remaining,  ze.getRemaining(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(remaining,  ze.getRemaining(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	69	None	replace
38	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  remaining);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
39	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	69	None	replace
40	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
41	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  loc);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  loc);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  loc);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
42	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize(),  ze.getMethod());  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	91	None	replace
43	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	91	None	replace
44	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start.getCompressedSize());  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	91	None	replace
45	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	77	None	replace
46	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	77	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
48	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	compilable	  [FE]  AssertionFailedError  	77	1	replace
49	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ')'  expected	77	None	replace
50	[BUG]  [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ';'  expected	77	None	replace
51	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
52	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(offset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(offset);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
53	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(start  +  1);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(start  +  1);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
54	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(start,  start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(start,  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(start,  start);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
55	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(start,  offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(start,  offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(start,  offsetEntry);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
56	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(entry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(entry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(entry);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
57	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(),  start);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(),  start);	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  ';'  expected	26	None	replace
58	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(start);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(start);	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
59	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(),  start;  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(),  start;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(),  start;	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
60	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(),  offsetEntry.dataOffset);  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(),  offsetEntry.dataOffset);	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  ';'  expected	26	None	replace
61	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(start,  offsetEntry.dataOffset);  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(start,  offsetEntry.dataOffset);	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
62	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(start,  ze.getCompressedSize());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(start,  ze.getCompressedSize());	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
63	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(),  start  +  1;  [CE]  ';'  expected  [FE]                                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(),  start  +  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(),  start  +  1;	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  ';'  expected	26	None	replace
64	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(ze);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
65	[BUG]  [BUGGY]  Entry  entry  =  entries.get(start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(start,  offsetEntry.dataOffset);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
66	[BUG]  [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(start);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entriesWithoutUTF8Flag.get(start);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
67	[BUG]  [BUGGY]  Entry  entry  =  entries.get(offsetEntry);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(offsetEntry);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
68	[BUG]  [BUGGY]  Entry  entry  =  entries.get(start,  ze);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(start,  ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(start,  ze);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
69	[BUG]  [BUGGY]  Entry  entry  =  entries.get(start  +  1);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(start  +  1);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
71	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
72	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
74	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
75	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	31	None	replace
76	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
77	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
78	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
79	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getMethod());  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ZE.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  bis  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  bis	40	None	replace
81	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
82	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
83	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  ZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
86	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
87	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
88	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MAX_EOCD_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  MAX_EOCD_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
90	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MAX_EOCD_SIZE  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MAX_EOCD_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  MAX_EOCD_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  HASH_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  HASH_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
92	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  HASH_SIZE  +  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  HASH_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  HASH_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  start  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
94	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start  +  1);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  start  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
96	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  1);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MIN_EOCD_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  MIN_EOCD_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
98	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MIN_EOCD_SIZE  +  1);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  MIN_EOCD_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  MIN_EOCD_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	compilable	  [FE]  AssertionFailedError  	44	1	replace
99	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getStart());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getStart());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getStart());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEnd());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
100	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEnd());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEnd(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEnd());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
102	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
103	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
104	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
105	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
106	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	add
107	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	add
108	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  +  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  +  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	add
109	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
110	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  +  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  +  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	add
111	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  2);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  2);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	add
112	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
113	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
114	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	compilable	  [FE]  AssertionFailedError  	1	1	replace
116	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	compilable	  [FE]  AssertionFailedError  	1	1	replace
117	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntry());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntry());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntry());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntry());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
118	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry(),  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntry());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
119	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntry());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntry());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntry());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntry());    	non-compiled	[CE]  cannot  find  symbol  zip	78	None	replace
120	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    +    1);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
121	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  2);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    +    1);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
122	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    +    1);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
123	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  3);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  3);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  +  3);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    +    1);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
124	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemaining());  [CE]  cannot  find  symbol  offset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  offset	103	None	replace
125	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemaining());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
126	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(false,  ze.getRemaining());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(false,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(false,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
127	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemaining());  [CE]  cannot  find  symbol  line  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  line	103	None	replace
128	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemaining());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  zip	103	None	replace
129	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	19	None	replace
130	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize(),  start);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize(),  start);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	19	None	replace
131	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize(),  offsetEntry.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	19	None	replace
132	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.dataOffset);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
133	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.dataOffset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
134	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	19	None	replace
135	[BUG]  [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
136	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
137	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
138	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(in,  ze.getSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(in,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(in,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	72	None	replace
139	[BUG]  [BUGGY]  InputStream  insert  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(insert,  ze.getSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  insert  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(insert,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  insert  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(insert,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	72	None	replace
140	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
141	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
142	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
143	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
144	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
145	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.bytes.getCompressedSize());  [CE]  cannot  find  symbol  bytes  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.bytes.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.bytes.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffsets.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  bytes	55	None	replace
146	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.info.getCompressedSize());  [CE]  cannot  find  symbol  info  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.info.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.info.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffsets.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  info	55	None	replace
147	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());  [CE]  cannot  find  symbol  dataSize  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffsets.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataSize	55	None	replace
148	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  2);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
149	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  /  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
150	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
151	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
152	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  2  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  2  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  *  2  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
153	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  cannot  find  symbol  z	36	None	replace
154	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  cannot  find  symbol  z	36	None	replace
155	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  -  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
156	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  *  1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
157	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZERO.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZERO.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ZERO.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	73	None	replace
158	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  z	73	None	replace
159	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	73	None	replace
160	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offset.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	73	None	replace
161	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
162	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
163	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2  -  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
164	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  offset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  -  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  offset	74	None	replace
165	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.getValue();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  offsetEntry.getValue();	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	87	None	replace
166	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entry.getValue()  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entry.getValue()  +  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entry.getValue()  +  1;	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	87	None	replace
167	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  offsetEntry.getValue();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  entry  =  offsetEntry.getValue();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  entry  =  offsetEntry.getValue();	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
168	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.getKey();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.getKey();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  offsetEntry.getKey();	  ZipArchiveEntry    ze    =    entry.getKey();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	98	None	replace
169	[BUG]  [BUGGY]  ZipArchiveEntry  entry  =  offsetEntry.getKey();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  entry  =  offsetEntry.getKey();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  entry  =  offsetEntry.getKey();	  ZipArchiveEntry    ze    =    entry.getKey();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
170	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	add
171	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	add
172	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  Final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  Final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    Final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  	non-compiled	[CE]  ';'  expected	30	None	add
173	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	add
174	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  zer.getSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  zer.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  zer.getSize());	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	30	None	add
175	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remainderOffset());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remainderOffset());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
176	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  remaining);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remainderOffset());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
177	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remainderOffset());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
178	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset()  +  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remainderOffset());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
179	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getTranspressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getTranspressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getTranspressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
180	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
181	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
182	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getTranspressedSize(),  ze.getTranspressedSize());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getTranspressedSize(),  ze.getTranspressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getTranspressedSize(),  ze.getTranspressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
183	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
184	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
185	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
186	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  dataOffset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
187	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  start);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
188	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
189	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
190	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
191	[BUG]  [BUGGY]  InputStream  ab  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  bis  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ab  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ab  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  bis	33	None	replace
192	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
193	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  incompatible  types	106	None	replace
194	[BUG]  [BUGGY]  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  incompatible  types	106	None	replace
195	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  incompatible  types	106	None	replace
196	[BUG]  [BUGGY]  InputStream  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  bis  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  bis	106	None	replace
197	[BUG]  [BUGGY]  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  f  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  f	106	None	replace
198	[BUG]  [BUGGY]  Integer  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Integer  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Integer  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  incompatible  types	106	None	replace
199	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
200	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  +  1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
201	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  2);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
202	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  /  1);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
203	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
204	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
205	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
206	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
207	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
208	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	54	None	replace
209	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
210	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
211	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  start);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize()  +  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
212	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
213	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize(),  offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
214	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
215	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
216	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	16	None	replace
217	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zip.getCompressedSize(),  offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	16	None	replace
218	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  dataOffset,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
219	[BUG]  [BUGGY]  ParserInputStream  bis  =  new  ParserInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ParserInputStream  bis  =  new  ParserInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ParserInputStream  bis  =  new  ParserInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
220	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  cannot  find  symbol  bis  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  cannot  find  symbol  bis	107	None	replace
221	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  cannot  find  symbol  bis  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  cannot  find  symbol  bis	107	None	replace
222	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
223	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
224	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
225	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
226	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
228	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
230	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
231	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  *  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
233	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  *  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
234	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());  [CE]  cannot  find  symbol  offset  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  offset	93	None	replace
235	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	93	None	replace
236	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	93	None	replace
237	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getEntrySize());  [CE]  cannot  find  symbol  ZERO  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offset.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	83	None	replace
238	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getEntrySize());  [CE]  cannot  find  symbol  z  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offset.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  z	83	None	replace
239	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getEntrySize());  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  start.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offset.getEntrySize());    	non-compiled	[CE]  long  cannot  be  dereferenced	83	None	replace
240	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetentry.getEntrySize());  [CE]  cannot  find  symbol  offsetentry  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetentry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetentry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offset.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  offsetentry	83	None	replace
241	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
242	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
243	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	47	None	replace
244	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod(),  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
245	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
246	[BUG]  [BUGGY]  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
247	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
248	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  start  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  start  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
249	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  +  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
250	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
251	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(ze);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(ze);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  incompatible  types	24	None	replace
252	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start,  offsetEntry.dataOffset);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start,  offsetEntry.dataOffset);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	24	None	replace
253	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start,  start);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start,  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start,  start);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	24	None	replace
254	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(offsetEntry.dataOffset);  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(offsetEntry.dataOffset);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  incompatible  types	24	None	replace
255	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start  +  1);  [CE]  incompatible  types  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start  +  1);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  incompatible  types	24	None	replace
256	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start,  ze);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start,  ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start,  ze);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	24	None	replace
257	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemaining());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
258	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemaining());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
259	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemaining());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemaining());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
260	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
261	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  offsetEntry.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
262	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start.getMethod());  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  start.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
263	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	53	None	replace
264	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start,  ze.getCompressedSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	53	None	replace
265	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
266	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.dataOffset,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	53	None	replace
267	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
268	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
269	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
270	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	102	None	replace
271	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.dataOffset,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
272	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());  [CE]  cannot  find  symbol  dataSize  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataSize.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataSize	102	None	replace
273	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataLength.getCompressedSize());  [CE]  cannot  find  symbol  dataLength  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataLength.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataLength.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataLength	102	None	replace
274	[BUG]  [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
275	[BUG]  [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
276	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [CE]  cannot  find  symbol  end  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  end	79	None	replace
277	[BUG]  [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
278	[BUG]  [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
279	[BUG]  [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
280	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
281	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
282	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
283	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(in,  ze.getCompressedSize()  -  1);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(in,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(in,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	99	None	replace
284	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
285	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
286	[BUG]  [BUGGY]  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
287	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	add
288	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	add
289	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  *  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  *  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	add
290	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	add
291	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
292	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  *  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  *  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	add
293	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset()  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
294	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  +  2);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  +  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
295	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  remaining  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  remaining  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  remaining  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
296	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  *  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  *  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  *  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
297	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  bis  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  bis	32	None	replace
298	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getPath();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getPath();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getPath();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
299	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getName();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getName();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getName();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
300	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getDestination();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getDestination();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getDestination();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
301	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getInputStream();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getInputStream();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getInputStream();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
302	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getFileName();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getFileName();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getFileName();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
303	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getFiles();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getFiles();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getFiles();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
304	[BUG]  [BUGGY]  OffsetEntry  ze  =  offsetEntry.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  offsetEntry.getValue();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  offsetEntry.getValue();	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
305	[BUG]  [BUGGY]  OffsetEntry  ze  =  entry.getValue()  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entry.getValue()  +  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entry.getValue()  +  1;	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
306	[BUG]  [BUGGY]  OffsetEntry  ze  =  entry.getValue()  +  start;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entry.getValue()  +  start;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entry.getValue()  +  start;	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
307	[BUG]  [BUGGY]  OffsetEntry  ze  =  entry.getKey();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entry.getKey();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entry.getKey();	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
308	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
309	[BUG]  [BUGGY]  ze.close();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.close();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.close();	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
310	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(start,  ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  Inflater(long,long)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(start,  ze.getCompressedSize());	  inflater.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  Inflater(long,long)	25	None	replace
311	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(false);  [CE]  cannot  find  symbol  bis  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(false);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(false);	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  bis	25	None	replace
312	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(start,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(start,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(start,  offsetEntry.getCompressedSize());	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
313	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(start,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  Inflater(long,long)  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(start,  offsetEntry.dataOffset);	  inflater.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  Inflater(long,long)	25	None	replace
314	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(start);  [CE]  no  suitable  constructor  found  for  Inflater(long)  [FE]                                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(start);	  inflater.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  Inflater(long)	25	None	replace
315	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getDelimiter());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getDelimiter());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getDelimiter());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getDelimiter());    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
316	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getName());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getName());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getName());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getDelimiter());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	92	None	replace
317	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getDelimiter());    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
318	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
319	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
320	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  -  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize()  -  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
321	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
322	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  -  1);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize()  -  1);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
323	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  2);  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  2);	  	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
324	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
325	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
326	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  dataOffset,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  dataOffset,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
327	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	52	None	replace
328	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.toString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.toString());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  ze.toString());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
329	[BUG]  [BUGGY]  File  f  =  offsetEntry.fileToFile();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.fileToFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.fileToFile();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
330	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.dataOffset;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.dataOffset;	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  incompatible  types	86	None	replace
331	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataFile();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.dataFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.dataFile();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
332	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataSource.getFile();  [CE]  cannot  find  symbol  dataSource  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.dataSource.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.dataSource.getFile();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataSource	86	None	replace
333	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataInputStream.getFile();  [CE]  cannot  find  symbol  dataInputStream  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.dataInputStream.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.dataInputStream.getFile();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataInputStream	86	None	replace
334	[BUG]  [BUGGY]  File  f  =  offsetEntry.fileExists();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.fileExists();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.fileExists();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
335	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	76	None	replace
336	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
337	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	replace
338	[BUG]  [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  ==  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	replace
339	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
340	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	replace
341	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	42	None	replace
342	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod(),  offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
343	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zip,  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	18	None	replace
344	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCOMpressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCOMpressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCOMpressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
345	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	95	None	replace
346	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(start,  offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(start,  offsetEntry.dataOffset);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
347	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(offsetEntry.dataOffset);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
348	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(offsetEntry);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
349	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(start  +  1);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(start  +  1);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
350	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(start,  start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(start,  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(start,  start);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
351	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(start,  offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(start,  offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(start,  offsetEntry);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
352	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
353	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  remaining);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
354	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	71	None	replace
355	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemaining(),  ze);  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemaining(),  ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemaining(),  ze);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	71	None	replace
356	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getRemaining());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemaining(),  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
357	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
358	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  z	66	None	replace
359	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(ze.getEntrySize(),  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(ze.getEntrySize(),  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(ze.getEntrySize(),  offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
360	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  ze.getEntrySize());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  entry	82	None	replace
361	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getEntrySize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
362	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  ze.getEntrySize());  [CE]  cannot  find  symbol  zip  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  zip	82	None	replace
363	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  start,  ze.getEntrySize());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  start,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  start,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
364	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  entry  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(entry.getEntrySize(),  offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  entry	82	None	replace
365	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
366	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEntrySize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
367	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  offset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  offset	105	None	replace
368	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  zip	105	None	replace
369	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  line  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  line	105	None	replace
370	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  end  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  end	105	None	replace
371	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
372	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  /  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
373	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  3);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  3);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  3);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
374	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	replace
375	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	replace
376	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
377	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getSize());  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ZE.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ZE.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
378	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [CE]  cannot  find  symbol  ZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
379	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
380	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
381	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
382	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  +  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
383	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntrySize());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zip,  ze.getEntrySize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  zip	75	None	replace
384	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	64	None	replace
385	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  remaining);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
386	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(remainder,  ze.getRemainderOffset(),  start);  [CE]  cannot  find  symbol  remainder  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(remainder,  ze.getRemainderOffset(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(remainder,  ze.getRemainderOffset(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    remaining);    	non-compiled	[CE]  cannot  find  symbol  remainder	2	None	replace
387	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  loc);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  loc);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  loc);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
388	[BUG]  [BUGGY]  ze.setCompressedSize(start);  [CE]  cannot  find  symbol  bis  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(start);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  bis	22	None	replace
389	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  bis  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.dataOffset);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  bis	22	None	replace
390	[BUG]  [BUGGY]  ze.setCompressedSize(end);  [CE]  cannot  find  symbol  end  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(end);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(end);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  end	22	None	replace
391	[BUG]  [BUGGY]  ze.setCompressedSize(offset);  [CE]  cannot  find  symbol  offset  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offset);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  offset	22	None	replace
392	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.getCompressedSize());	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
393	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.length);  [CE]  cannot  find  symbol  length  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.length);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.length);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  length	22	None	replace
394	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.remaining);  [CE]  cannot  find  symbol  remaining  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.remaining);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  remaining	22	None	replace
395	[BUG]  [BUGGY]  InputStream  inflater  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  bis  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  inflater  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  inflater  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  bis	38	None	replace
396	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
397	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemainderOffset(),  ze);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemainderOffset(),  ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getRemainderOffset(),  ze);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	4	None	replace
398	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  remaining);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
399	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getRemainderOffset());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
400	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart()  -  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
401	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  zip	50	None	replace
402	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());  [CE]  cannot  find  symbol  end  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  end	50	None	replace
403	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getEntrySize());  [CE]  cannot  find  symbol  offset  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offset,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  offset	50	None	replace
404	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getEntrySize());  [CE]  cannot  find  symbol  line  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(line,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  line	50	None	replace
405	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getEntrySize());  [CE]  cannot  find  symbol  length  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  length	50	None	replace
406	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remaining());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.remaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
407	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
408	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  remaining);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  remaining);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
409	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining()  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
410	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  remaining);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	101	None	replace
411	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.length);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.length);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.length);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  length	101	None	replace
412	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataLength);  [CE]  cannot  find  symbol  dataLength  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataLength);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataLength);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataLength	101	None	replace
413	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.remaining);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	101	None	replace
414	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  loc);  [CE]  cannot  find  symbol  loc  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  loc);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  loc);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  loc	101	None	replace
415	[BUG]  [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
416	[BUG]  [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
417	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ze  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
418	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
419	[BUG]  [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(in,  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(in,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  in  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(in,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	80	None	replace
420	[BUG]  [BUGGY]  InputStream  insert  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(insert,  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  insert  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(insert,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  insert  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(insert,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	80	None	replace
421	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
422	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
423	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offsetEntry);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
424	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry.dataOffset);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
425	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(ze);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(ze);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(ze);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
426	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offset);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
427	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.get(start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  offsetEntry.get(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  offsetEntry.get(start);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
428	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start  +  1);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(start  +  1);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
429	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemainderOffset());  [CE]  long  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	non-compiled	[CE]  long  cannot  be  dereferenced	1	None	replace
430	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset());	  InputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
431	[BUG]  [BUGGY]  File  f  =  offsetEntry.file;  [CE]  cannot  find  symbol  file  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.file;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.file;	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  file	86	None	replace
432	[BUG]  [BUGGY]  File  f  =  offsetEntry.dataFile.getFile();  [CE]  cannot  find  symbol  dataFile  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.dataFile.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.dataFile.getFile();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  dataFile	86	None	replace
433	[BUG]  [BUGGY]  File  f  =  offsetEntry.files();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.files();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.files();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
434	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getEntrySize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getEntrySize(),  ze.getEntrySize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
435	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize());  [CE]  cannot  find  symbol  offset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  offset	75	None	replace
436	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());  [CE]  cannot  find  symbol  end  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(end,  ze.getEntrySize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  end	75	None	replace
437	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	107	None	replace
438	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	107	None	replace
439	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  ';'  expected	107	None	replace
440	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	107	None	replace
441	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  ';'  expected	107	None	replace
442	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
443	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
444	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ';'  expected	65	None	replace
445	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  remaining);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  remaining);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	19	None	replace
446	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize(),  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getCompressedSize(),  offsetEntry.dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	19	None	replace
447	[BUG]  [BUGGY]  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entries.get(offsetEntry.dataOffset);	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
448	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
449	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getRemainderOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getRemainderOffset(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getRemainderOffset(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	104	None	replace
450	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream().openStream();  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream().openStream();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream().openStream();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
451	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.dataOffset,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	53	None	replace
452	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
453	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	56	None	replace
454	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	56	None	replace
455	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
456	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
457	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
458	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ')'  expected	56	None	replace
459	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  /  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining()    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
460	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getMethod());  [CE]  cannot  find  symbol  dataOffsets  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	47	None	replace
461	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
462	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ZERO_SIZE);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remaining(),  ZERO_SIZE);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remaining());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
463	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	93	None	replace
464	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	replace
465	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	replace
466	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	replace
467	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  offset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offset.getCompressedSize()  +  1);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  offset	15	None	replace
468	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  ze  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  ze  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    ze  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  	non-compiled	[CE]  incompatible  types	28	None	add
469	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	67	None	replace
470	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	67	None	replace
471	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  ';'  expected	67	None	replace
472	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	67	None	replace
473	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  CFH_SIZE  +  1);  [CE]  cannot  find  symbol  CFH_SIZE  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  CFH_SIZE  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  CFH_SIZE  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	non-compiled	[CE]  cannot  find  symbol  CFH_SIZE	44	None	replace
474	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset  +  1);  [CE]  cannot  find  symbol  dataOffset  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  dataOffset  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZERO_SIZE    +    1);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	44	None	replace
475	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ZERO.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ZERO.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getEntrySize(),  ZERO.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
476	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	57	None	replace
477	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	57	None	replace
478	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
479	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
480	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	57	None	replace
481	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  entry.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  entry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  entry.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    offset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	73	None	replace
482	[BUG]  [BUGGY]  File  f  =  offsetEntry.fileFile();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.fileFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.fileFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
483	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
484	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
485	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
486	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
487	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
488	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  dataOffsets  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffsets.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	55	None	replace
489	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    ze    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  incompatible  types	99	None	replace
490	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getPosition()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getPosition()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getPosition()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
491	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  4);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  4);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
493	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  4);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  4);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  4);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	compilable	  [FE]  AssertionFailedError  	13	1	replace
494	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZERO	29	None	replace
495	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getFullSize());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getFullSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getFullSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
496	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getLength());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
497	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
498	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
499	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  ';'  expected	32	None	replace
500	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  ';'  expected	32	None	replace
501	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
502	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start  +  start);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start  +  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start  +  start);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  incompatible  types	24	None	replace
503	[BUG]  [BUGGY]  InputStream  bis  =  entries.get(start  -  start);  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  entries.get(start  -  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  entries.get(start  -  start);	  InputStream    bis    =    entries.get(start);    	non-compiled	[CE]  incompatible  types	24	None	replace
504	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
505	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
506	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	63	None	replace
507	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  getZipEntry(offsetEntry.getValue());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  getZipEntry(offsetEntry.getValue());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  getZipEntry(offsetEntry.getValue());	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	87	None	replace
508	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	36	None	replace
509	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  cannot  find  symbol  z	36	None	replace
510	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  ';'  expected	36	None	replace
511	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	36	None	replace
512	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  return;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	36	None	replace
513	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	40	None	replace
514	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
515	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  ';'  expected	40	None	replace
516	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  ';'  expected	40	None	replace
517	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  ';'  expected	40	None	replace
518	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
519	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  zip  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  zip	50	None	replace
520	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(date,  ze.getEntrySize());  [CE]  cannot  find  symbol  date  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(date,  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(date,  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(zip,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  date	50	None	replace
521	[BUG]  [BUGGY]  if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
522	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
523	[BUG]  [BUGGY]  if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	79	None	replace
524	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	79	None	replace
525	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
526	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	64	None	replace
527	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	64	None	replace
528	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	64	None	replace
529	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	64	None	replace
530	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  }  [CE]  cannot  find  symbol  ZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	64	None	replace
531	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	54	None	replace
532	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getRemaining());  [CE]  cannot  find  symbol  dataOffsets  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	68	None	replace
533	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemaining());  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemaining());    	non-compiled	[CE]  long  cannot  be  dereferenced	68	None	replace
534	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
535	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
536	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
537	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
538	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	77	None	replace
539	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	77	None	replace
540	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ';'  expected	77	None	replace
541	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ';'  expected	77	None	replace
542	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ';'  expected	77	None	replace
543	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ')'  expected	77	None	replace
544	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.offset);  [CE]  cannot  find  symbol  offset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.offset);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  offset	22	None	replace
545	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	42	None	replace
546	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  ';'  expected	42	None	replace
547	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  ';'  expected	42	None	replace
548	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [CE]  cannot  find  symbol  z  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	42	None	replace
549	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
550	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.remainderOffset(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.remainderOffset());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
551	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDataOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
552	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
553	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
554	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
555	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
556	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  entry.getKey();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  offsetEntry  =  entry.getKey();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  offsetEntry  =  entry.getKey();	  ZipArchiveEntry    ze    =    entry.getKey();    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	98	None	replace
557	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getSize());  [CE]  long  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	27	None	replace
558	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getISOControl());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getISOControl());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getISOControl());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntry());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
559	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
560	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
561	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  cannot  find  symbol  ZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
562	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
563	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  ';'  expected	34	None	replace
564	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(start  +  start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(start  +  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(start  +  start);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
565	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  start);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	101	None	replace
566	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  end);  [CE]  cannot  find  symbol  end  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  end);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  end);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  end	101	None	replace
567	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  cache);  [CE]  cannot  find  symbol  cache  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  cache);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  cache);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  cache	101	None	replace
568	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this.headerOffset);  [CE]  cannot  find  symbol  headerOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this.headerOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this.headerOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  headerOffset	101	None	replace
569	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getTranspressedSize());  [CE]  cannot  find  symbol  offset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getTranspressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getTranspressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol  offset	100	None	replace
570	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
571	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater(start,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  Inflater(long,int)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater(start,  ze.getMethod());	  inflater.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  Inflater(long,int)	25	None	replace
572	[BUG]  [BUGGY]  Inflater  inflater  =  new  Inflater();  [CE]  cannot  find  symbol  bis  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Inflater  inflater  =  new  Inflater();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Inflater  inflater  =  new  Inflater();	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  bis	25	None	replace
573	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
574	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
575	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getCompressedSize(),  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	17	None	replace
576	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffsets.getMethod());  [CE]  cannot  find  symbol  dataOffsets  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffsets.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffsets.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	17	None	replace
577	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ZERO_SIG);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ZERO_SIG);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ZERO_SIG);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
578	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getRemainderOffset(),  start);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getRemainderOffset(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(offsetEntry,  ze.getRemainderOffset(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
579	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	61	None	replace
580	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	61	None	replace
581	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
582	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
583	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
584	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSource());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSource());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSource());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
585	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize())  -  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize())  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize())  -  1);	  	non-compiled	[CE]  ';'  expected	9	None	add
586	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
587	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
588	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
589	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start.getCompressedSize(),  ze.getCompressedSize());  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start.getCompressedSize(),  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  long  cannot  be  dereferenced	16	None	replace
590	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
591	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(offsetEntry.getCompressedSize(),  ze.getCompressedSize()  +  1);	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
592	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
593	[BUG]  [BUGGY]  Integer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Integer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Integer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	43	None	replace
594	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
595	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(end,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
596	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntry());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
597	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getTransformer());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getTransformer());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getTransformer());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
598	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  zipEnd  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  zipEnd	105	None	replace
599	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	39	None	replace
600	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	39	None	replace
601	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	39	None	replace
602	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	39	None	replace
603	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	39	None	replace
604	[BUG]  [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incomparable  types:  int  and  <null>	41	None	replace
605	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
606	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
607	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  Byte  f  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    Byte    f    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  incompatible  types	106	None	replace
608	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start.getEntrySize(),  ze.getEntrySize());  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start.getEntrySize(),  ze.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start.getEntrySize(),  ze.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  long  cannot  be  dereferenced	82	None	replace
609	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip.getEntrySize(),  offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  zip	82	None	replace
610	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(z.getEntrySize(),  offsetEntry.getEntrySize());  [CE]  cannot  find  symbol  z  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(z.getEntrySize(),  offsetEntry.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(z.getEntrySize(),  offsetEntry.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getEntrySize(),    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  z	82	None	replace
611	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  dataOffset,  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
612	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  dataOffset,  offsetEntry.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
613	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
614	[BUG]  [BUGGY]  Integer  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Integer  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Integer  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	37	None	replace
615	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
616	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  start);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  start);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
617	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCOMpressedSize());  [CE]  cannot  find  symbol  offset  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCOMpressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getCOMpressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize());    	non-compiled	[CE]  cannot  find  symbol  offset	95	None	replace
618	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	replace
619	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	replace
620	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  z	66	None	replace
621	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	replace
622	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	60	None	replace
623	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  z	60	None	replace
624	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	60	None	replace
625	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [CE]  cannot  find  symbol  z  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  z	60	None	replace
626	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
627	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
628	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ZERO.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ZERO.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ZERO.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	91	None	replace
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	91	1	replace
630	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset  +  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	91	1	replace
631	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  /  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  /  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  /  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
632	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset()    +    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
633	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
634	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
635	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
636	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	replace
637	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
638	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ze.getSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
639	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	58	None	replace
640	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
641	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [CE]  cannot  find  symbol  ZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
642	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	58	None	replace
643	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	58	None	replace
644	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  ';'  expected	58	None	replace
645	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  z.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  z.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getCompressedSize(),  z.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
646	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getEntrySize());  [CE]  cannot  find  symbol  dataOffsets  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getEntrySize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getEntrySize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	48	None	replace
647	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize()  +  1);  [CE]  long  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    +    1);    	non-compiled	[CE]  long  cannot  be  dereferenced	46	None	replace
648	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  dataOffsets  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffsets.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	46	None	replace
649	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getDirectory();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getDirectory();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getDirectory();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
650	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getSize();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getSize();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getSize();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
651	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemaining());  [CE]  cannot  find  symbol  end  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  end	103	None	replace
652	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemaining());  [CE]  cannot  find  symbol  zipEnd  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zipEnd,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  zipEnd	103	None	replace
653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	add	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
654	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	compilable	  [FE]  AssertionFailedError  	31	1	replace
655	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getDelimiter());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
656	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEnd());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEnd());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEnd());	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
657	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  zipEncoding);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding,ZipEncoding)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  zipEncoding);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  zipEncoding);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding,ZipEncoding)	97	None	replace
658	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry);  [CE]  no  suitable  method  found  for  setMethod(ZipEncoding,OffsetEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  offsetEntry);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  no  suitable  method  found  for  setMethod(ZipEncoding,OffsetEntry)	97	None	replace
659	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize()  -  1);  [CE]  cannot  find  symbol  offset  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offset.getEntrySize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  offset	84	None	replace
660	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offsetEntry.dataOffset);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
661	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(start,  offsetEntry);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
662	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offsetEntry.start);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
663	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(offsetEntry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(offsetEntry);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
664	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(offsetEntry.dataOffset);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
665	[BUG]  [BUGGY]  OffsetEntry  ze  =  entries.get(start  +  start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entries.get(start  +  start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entries.get(start  +  start);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
666	[BUG]  [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
667	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
668	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
669	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
670	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  ';'  expected	33	None	replace
671	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  ';'  expected	33	None	replace
672	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getName());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getName());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntry());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
673	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getCompressedSize()  -  1);  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getCompressedSize()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
674	[BUG]  [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  start;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  start;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  start;	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
675	[BUG]  [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  null;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  null;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	Entry  entry  =  entriesWithoutUTF8Flag?  entries.get(start):  null;	  Entry    entry    =    entries.get(start);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
676	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
677	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);	  boundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
678	[BUG]  [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	boundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);	  boundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
679	[BUG]  [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  ze  =  entries.get(offsetEntry.start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  ze  =  entries.get(offsetEntry.start);	  InputStream    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	88	None	replace
680	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  this.dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  this.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  this.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
681	[BUG]  [BUGGY]  OffsetEntry  ze  =  entry.get(start);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  entry.get(start);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  entry.get(start);	  OffsetEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	20	None	replace
682	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  2);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
683	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ZERO_SIG);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ZERO_SIG);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset(),  ZERO_SIG);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
684	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(zip);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(zip);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(zip);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
685	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(entry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(entry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(entry);	  ZipArchiveEntry    ze    =    entries.get(start);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	85	None	replace
686	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  offsetEntry.dataOffset,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
687	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  dataOffset,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  dataOffset,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  dataOffset,  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
688	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  zipEncoding.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  zipEncoding.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize(),  zipEncoding.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize(),    offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
689	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.getValue());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.getValue());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offsetEntry.getValue());	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	87	None	replace
690	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(entry.getValue());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(entry.getValue());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(entry.getValue());	  ZipArchiveEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	87	None	replace
691	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  zipEncoding);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  zipEncoding);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemaining(),  zipEncoding);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemaining(),    remaining);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
692	[BUG]  [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  [CE]  cannot  find  symbol  inflater  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater!=  null)  {  inflater.close();  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
693	[BUG]  [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  inflater  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
694	[BUG]  [BUGGY]  if(inflater  ==  null)  {  inflater.close();  }  [CE]  cannot  find  symbol  inflater  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater  ==  null)  {  inflater.close();  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater  ==  null)  {  inflater.close();  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
695	[BUG]  [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IOException( " ");  }  [CE]  cannot  find  symbol  inflater  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IOException( " ");  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
696	[BUG]  [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  cannot  find  symbol  inflater  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  RuntimeException( " ");  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
697	[BUG]  [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  inflater  [FE]                                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(inflater!=  null)  {  inflater.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  inflater.close();    	non-compiled	[CE]  cannot  find  symbol  inflater	25	None	replace
698	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	107	None	replace
699	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	107	None	replace
700	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    2);    	non-compiled	[CE]  ')'  expected	107	None	replace
701	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
702	[BUG]  [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  >=  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())-  1);  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize())    -    1);    	non-compiled	[CE]  ';'  expected	76	None	replace
703	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [CE]  cannot  find  symbol  bis  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  bis	65	None	replace
704	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	65	None	replace
705	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  this.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  this.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  this.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
706	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIG,  ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIG,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIG,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	53	None	replace
707	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	53	None	replace
708	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  start,  ze.getCompressedSize());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffset,    ze.getCompressedSize());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	53	None	replace
709	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	62	None	replace
710	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	42	None	replace
711	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  ';'  expected	42	None	replace
712	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  ';'  expected	42	None	replace
713	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  break;  }  [CE]  cannot  find  symbol  z  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	42	None	replace
714	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return  new  ZipArchiveEntry  [CE]  '('  or  '['  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return  new  ZipArchiveEntry  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getMethod());  }  else  {  return  new  ZipArchiveEntry	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getMethod());    	non-compiled	[CE]  '('  or  '['  expected	42	None	replace
715	[BUG]  [BUGGY]  if(ze.getSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
716	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream(start,  ze.getMethod());  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream(start,  ze.getMethod());	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
717	[BUG]  [BUGGY]  InputStream  bis  =  getInputStream().readLine();  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  getInputStream().readLine();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  getInputStream().readLine();	  InputStream    bis    =    getInputStream();    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	26	None	replace
718	[BUG]  [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()));  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()));	  	non-compiled	[CE]  ';'  expected	30	None	add
719	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
720	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  cannot  find  symbol  end  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  ByteBuffer  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ByteBuffer    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  end	43	None	replace
721	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  dataOffset,  offsetEntry.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	17	None	replace
722	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	17	None	replace
723	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	17	None	replace
724	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  zipEncoding.getMethod());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  zipEncoding.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  zipEncoding.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
725	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zipEncoding,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
726	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemainderOffset());  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemainderOffset());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemainderOffset());	  BoundedInputStream    bis    =    new    BoundedInputStream(remainder,    ze.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol  length	105	None	replace
727	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ZERO_SIZE,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
728	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getCompressedSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  ze.getCompressedSize()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
729	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  z.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  z.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  z.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
730	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
731	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	67	None	replace
732	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getHeaderOffset()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getHeaderOffset()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getHeaderOffset()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
733	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderSize()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
734	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
735	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCOMpressedSize()  -  1);  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	61	None	replace
736	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemaining());  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(length,  ze.getRemaining());	  BoundedInputStream    bis    =    new    BoundedInputStream(remaining,    ze.getRemaining());    	non-compiled	[CE]  cannot  find  symbol  length	103	None	replace
737	[BUG]  [BUGGY]  ze.setCompressedSize(offsetEntry.compressedSize);  [CE]  cannot  find  symbol  compressedSize  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setCompressedSize(offsetEntry.compressedSize);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setCompressedSize(offsetEntry.compressedSize);	  ze.setCompressedSize(remaining);    	non-compiled	[CE]  cannot  find  symbol  compressedSize	22	None	replace
738	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  -  2);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  -  2);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize()  -  2);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
739	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
740	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
741	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  ZipArchiveEntry(ZipArchiveEntry.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  ZipArchiveEntry(ZipArchiveEntry.  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  ZipArchiveEntry(ZipArchiveEntry.	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  <identifier>  expected	33	None	replace
742	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	39	None	replace
743	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	39	None	replace
744	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	39	None	replace
745	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  new  ZipArchiveEntry  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  new  ZipArchiveEntry  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  new  ZipArchiveEntry	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
746	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  Byte  f  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  Byte  f  =  new  BoundedInputStream(start,  ze.getSize()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    Byte  f  =  new  BoundedInputStream(start,  ze.getSize()  +  1);	  	non-compiled	[CE]  incompatible  types	28	None	add
747	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
748	[BUG]  [BUGGY]  File  f  =  offsetEntry.file();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.file();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.file();	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
749	[BUG]  [BUGGY]  File  f  =  offsetEntry.filename;  [CE]  cannot  find  symbol  filename  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  f  =  offsetEntry.filename;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  f  =  offsetEntry.filename;	  File    f    =    offsetEntry.getFile();    	non-compiled	[CE]  cannot  find  symbol  filename	86	None	replace
750	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  ZipArchiveEntry  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  ZipArchiveEntry  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  ZipArchiveEntry	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  '('  or  '['  expected	57	None	replace
751	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	57	None	replace
752	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
753	[BUG]  [BUGGY]  if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  cannot  find  symbol  bis  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  bis	31	None	replace
754	[BUG]  [BUGGY]  if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [CE]  break  outside  switch  or  loop  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  final  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }	  final    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  break  outside  switch  or  loop	31	None	replace
755	[BUG]  [BUGGY]  File  file  =  ze.getFile();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  file  =  ze.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  file  =  ze.getFile();	  File    f    =    file.getFile();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
756	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  zip  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(zip,  offsetEntry.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  zip	54	None	replace
757	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(line.getCompressedSize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  line  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(line.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(line.getCompressedSize(),  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  line	16	None	replace
758	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(text.getCompressedSize(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  text  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(text.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(text.getCompressedSize(),  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(offsetEntry.getCompressedSize(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  text	16	None	replace
759	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.dataOffset,  dataOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	19	None	replace
760	[BUG]  [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incomparable  types:  int  and  <null>	80	None	replace
761	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  ze  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    ze    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  incompatible  types	80	None	replace
762	[BUG]  [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  return  new  BoundedInputStream(start,  ZE.getMethod());  }  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  return  new  BoundedInputStream(start,  ZE.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  }  else  {  return  new  BoundedInputStream(start,  ZE.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
763	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
764	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod()  +  1);  [CE]  cannot  find  symbol  ZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod()  +  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getMethod()  +  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZE	40	None	replace
765	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.data.getCompressedSize());  [CE]  cannot  find  symbol  data  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.data.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.data.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  data	102	None	replace
766	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(length,  ze.dataOffset.getCompressedSize());  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(length,  ze.dataOffset.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(length,  ze.dataOffset.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
767	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  [CE]  cannot  find  symbol  end  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(end,  ze.getCompressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.dataOffset.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  end	102	None	replace
768	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [CE]  cannot  find  symbol  end  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  end	18	None	replace
769	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.remaining());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.remaining());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.remaining());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
770	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainingSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
771	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.getRemainderOffset(),  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getRemainderOffset());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
772	[BUG]  [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
773	[BUG]  [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }  [CE]  cannot  find  symbol  ZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  ZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  return  new  BoundedInputStream(start,  ZE.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	34	None	replace
774	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	63	None	replace
775	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	63	None	replace
776	[BUG]  [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getCompressedSize()  >  MAX_EOCD_SIZE)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	63	None	replace
777	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	63	None	replace
778	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  zip64_EOCD_CFD_LOCATOR_OFFSET);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  zip64_EOCD_CFD_LOCATOR_OFFSET);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  zip64_EOCD_CFD_LOCATOR_OFFSET);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
779	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  cache.dataOffset);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  cache.dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  cache.dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
780	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.offset);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.offset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getRemainderOffset(),  offsetEntry.offset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getRemainderOffset(),    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
781	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZERO_SIZE);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	29	None	replace
782	[BUG]  [BUGGY]  OffsetEntry  ze  =  start.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  OffsetEntry  ze  =  start.getValue();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	OffsetEntry  ze  =  start.getValue();	  OffsetEntry    ze    =    entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	23	None	replace
783	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.offsets.getCompressedSize());  [CE]  cannot  find  symbol  offsets  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.offsets.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.offsets.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.dataOffsets.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  offsets	55	None	replace
784	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
785	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntryLength());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntryLength());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getEntryLength());	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
786	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEnd());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  offsetEntry.dataOffset,  ze.getEnd());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getEnd());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
787	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.headerOffset);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.headerOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  offsetEntry.headerOffset);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	101	None	replace
788	[BUG]  [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this);  [CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	InputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  this);	  InputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize(),    dataOffset);    	non-compiled	[CE]  constructor  BoundedInputStream  in  class  ZipFile.BoundedInputStream  cannot  be  applied  to  given  types;	101	None	replace
789	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
790	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
791	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	79	None	replace
792	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(end,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(end,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	79	None	replace
793	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	77	None	replace
794	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
795	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  ')'  expected	77	None	replace
796	[BUG]  [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [CE]  incomparable  types:  long  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(offsetEntry.dataOffset  ==  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  2);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    2);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	77	None	replace
797	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize())+  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize())+  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getEntrySize())+  1;	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getEntrySize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
798	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.next().getCOMpressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.next().getCOMpressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.next().getCOMpressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCOMpressedSize());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
799	[BUG]  [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  AoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    AoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	41	None	replace
800	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
801	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
802	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	38	None	replace
803	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  ';'  expected	38	None	replace
804	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getMethod());  }  else  {  return  null;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getMethod());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
805	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.getKey());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ZipArchiveEntry  ze  =  entries.get(offsetEntry.getKey());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ZipArchiveEntry  ze  =  entries.get(offsetEntry.getKey());	  ZipArchiveEntry    ze    =    entry.getKey();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	98	None	replace
806	[BUG]  [BUGGY]  ze.setMethod(zipEncoding,  entry);  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  ze.setMethod(zipEncoding,  entry);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	ze.setMethod(zipEncoding,  entry);	  ze.setMethod(zipEncoding);    	non-compiled	[CE]  cannot  find  symbol  entry	97	None	replace
807	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  z.getMethod());  [CE]  cannot  find  symbol  z  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  z.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  z.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	52	None	replace
808	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ZERO.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ZERO.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  ZERO.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	52	None	replace
809	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  file.getMethod());  [CE]  cannot  find  symbol  file  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  file.getMethod());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize(),  file.getMethod());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    offsetEntry.getCompressedSize(),    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  file	52	None	replace
810	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize())+  1;	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
811	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  dataOffset);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  dataOffset);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  dataOffset);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
812	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  ZERO);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  ZERO);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getTranspressedSize(),  ZERO);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getTranspressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
813	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  cannot  find  symbol  z	36	None	replace
814	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  ';'  expected	36	None	replace
815	[BUG]  [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  break;  }  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(z!=  null)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  z.getSize());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    z.getSize());    	non-compiled	[CE]  cannot  find  symbol  z	36	None	replace
816	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
817	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart(),  ze.getCompressedSize());  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getStart(),  ze.getCompressedSize());	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
818	[BUG]  [BUGGY]  File  ze  =  offsetEntry.getData();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  offsetEntry.getData();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  offsetEntry.getData();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
819	[BUG]  [BUGGY]  File  ze  =  entry.getFile();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  File  ze  =  entry.getFile();  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	File  ze  =  entry.getFile();	  File    ze    =    offsetEntry.getFile();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	21	None	replace
820	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1));  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    *    1);    BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  *  1));	  	non-compiled	[CE]  ';'  expected	12	None	add
821	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
822	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  break;  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	56	None	replace
823	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [CE]  cannot  find  symbol  bis  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }  else  {  return  new  BoundedInputStream(start,  ze.getCompressedSize()  -  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  bis	56	None	replace
824	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  ZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream  bis  =  new  BoundedInputStream(start,  ZE.getCompressedSize()  -  1);	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    -    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start,    ZE.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  ZE	58	None	replace
825	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	81	None	replace
826	[BUG]  [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(start  <  0)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
827	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  ')'  expected	81	None	replace
828	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }  [CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.getCompressedSize()  +  1);  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  variable  bis  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	81	None	replace
829	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize()  +  1);  BoundedInputStream  bis  =  new  BoundedInputStream(start  +  1,  ze.	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getCompressedSize()    +    1);    BoundedInputStream    bis    =    new    BoundedInputStream(start    +    1,    ze.getCompressedSize()    +    1);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
830	[BUG]  [BUGGY]  if(ze.getSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  if(ze.getSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	if(ze.getSize()  >  start)  {  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize());  ze  =  new  BoundedInputStream(start,  ze.getSize());  }	  BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize());    ze    =    new    BoundedInputStream(start,    ze.getSize());    	non-compiled	[CE]  incompatible  types	72	None	replace
831	[BUG]  [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;      [BUGGY]  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  ze  =  new  BoundedInputStream(start,  ze.getSize()  -  1);  [BUGGY]      new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  final  Inflater  inflater  =  new  Inflater(true);  return  new  InflaterInputStream(bis,  inflater)  {  @Override  public  void  close()  throws  IOException  {  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	325	326	1	replace	BoundedInputStream    bis    =    new    BoundedInputStream(start,    ze.getSize()    -    1);    ze  =  new  BoundedInputStream(start,  ze.getSize()  -  1);	  	non-compiled	[CE]  incompatible  types	9	None	add
