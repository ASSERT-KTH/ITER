projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnull;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnthis;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataInputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataStart;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataSize;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataEnd;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:null;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>>0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset!=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==offsetEntry.dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry>=null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.dataOffset==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry>=null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipFile,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset<0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry>>null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataSource;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOutputFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(offsetEntry);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(offsetEntry);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataInputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:entry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataLength();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.input;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inflater;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry!=null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnentries(offsetEntry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?null:offsetEntry.dataLength();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_CFD_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataoffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=offsetEntry.dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==offsetEntry.dataOffset)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset==offsetEntry.dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==offsetEntry.dataOffset)?0:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.dataOffset==offsetEntry.dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.FOR_FILENAME_LENGTH==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.DATA_LENGTH==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.SIG==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.EMPTY==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(offsetEntry);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(ze,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(ze+1);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(ze,offsetEntry);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(0);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,start;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(remaining==null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(remaining!=null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry==null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry==null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=null)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry>=null)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.data-1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOnset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.data+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?0:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0,offsetEntry.dataOffset():offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.dataOffset==null)?0:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?1:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(OffsetEntry.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset>=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOutputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream-1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>=0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset+3;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<=0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(entry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>=null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==null)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==null)?0:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.FOR_FILENAME_LENGTH==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.DATA_LENGTH==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.SIG==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getEnd(),ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getStart(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(entry.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_FOR_FILENAME_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,offsetEntry.dataOffset+1);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataInputFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry>>null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry[BUGGY]null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataSize;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset[Delete]0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset>=0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getName(),ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(entry.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getName(),entry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry==null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry==null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset>0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipFile,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,0);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,CFH_SHIFT);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,offsetEntry.dataOffset,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,start);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,CFH_SHIFT);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,0);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ZERO_SIG);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ZipArchiveEntry.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry!=null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze)+1;if(offsetEntry!=null){thrownewIllegalStateException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,start+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+1L;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+3;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>>0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataInflater;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnze.inflater;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,start,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ze.getSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;offsetEntry.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;OffsetEntry.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;offsetEntry.dataOffset=offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;ze.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;entry.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>=0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(dataOffset<0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<=0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>>0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getMethod(),ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(OffsetEntry.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(entry.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset+3;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset,start+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset+4;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321FileoffsetEntry=entries.get(ze);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze,0);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze)+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze-1);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry==null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry==null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset>=0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null||offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset-offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+ze.getMethod();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+ze.getCompressedSize();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset,ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:NONE;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:Integer.MAX_VALUE;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:Integer.MIN_VALUE;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:DEFAULT_SIG;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:Integer.parseInt(ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffsetLength();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataLength();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ze.getSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,start);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ze.getHeaderOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOfOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Zip64_EOCD_FOR_FILENAME_LENGTH:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Zip64_EOCD_LOCATOR_OFFSET:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Zip64_EOCD_CFD_LOCATOR_OFFSET:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?ZipShort:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?ZipUtil.ZERO:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataInput;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,end;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=ze.getDataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=0;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=ZERO;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=ze;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipFile,offsetEntry.dataOffset,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipFile,offsetEntry.dataOffset,dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry!=null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:offsetEntry.dataOffset()+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:offsetEntry.dataLength();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOutputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(0);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(entries!=null){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entry.getValue();if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321FileoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.dataOffset,offsetEntry.dataOffset,offsetEntry.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.dataOffset,offsetEntry.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.dataOffset,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataLength<0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataSize;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze.getMethod(),offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip.dataOffset,offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.getMethod(),ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,offsetEntry.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,ze.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(ze.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:newZipArchiveEntry(offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(ZipArchiveEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(offsetEntry,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zipEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(entries!=null){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataSize;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+File.separator;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+file.separator;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==null)?null:offsetEntry.dataOffset+File.separator;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separatorChar;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.SEPARATOR;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataSet;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,offsetEntry.dataOffset,ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,ZERO_SIG);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.getInputStream();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+4;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+5;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?Null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze.getMethod(),remaining);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputFile+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,remaining);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ZERO);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataStart();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,ze.getMethod(),offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(OffsetEntry.getEnd(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry!=null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:ZIP64_EOCD_CFD_LOCATOR_OFFSET;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:ZIP64_EOCD_FOR_FILENAME_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:zipEncoding;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:ZIP64_EOCDL_LOCATOR_OFFSET;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnreturns(offsetEntry==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?null:offsetEntry.dataSet();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?null:offsetEntry.dataSize();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEnd,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getMethod(),entry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset,dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(zip);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+ze.getSize();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(OffsetEntry.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getName(),z.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:offsetEntry.dataSet();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataByte;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset(),ze.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+this;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+File.separator+remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)offsetEntry.get(ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset<0)?null:offsetEntry.dataOffset+1L;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOutput;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+1L;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry,ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,remaining);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry!=null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset,start;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,remainder;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEnd,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;OffsetEntryoffsetEntry.dataOffset=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;OffsetEntryoffsetEntry=offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,ze,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,zipEncoding);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset>0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze!=null){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.DEFAULT==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset>=0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null&&offsetEntry.dataOffset<0){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(zip);if(offsetEntry==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataSize;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataEscaped;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataSize();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LENGTH,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.data;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataFile;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataSet;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(ZipArchiveEntry.DEFAULT,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(offsetEntry,ze.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset==offsetEntry.dataOffset)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.input+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.input-1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze+1);if(offsetEntry==null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returns(offsetEntry==null)?0:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0:entry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+ze.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffsets.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+name.getName();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==0)?null:offsetEntry.dataLENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,ze,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:ze.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset*1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.getName(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.getMethod(),ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip64_EOCDL_LENGTH,offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:newZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+2;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+start;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset+File.separator+comment;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.getStart(),ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.dataOffset,offsetEntry.offset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(z,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataInset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(ze.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(entry.dataOffset==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry.dataOffset==0)?null:offsetEntry.dataOffset++;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?0:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputPath;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputFileNumber;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_ECFD_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LENGTH,offsetEntry.dataOffset,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LENGTH.dataOffset(),offsetEntry.dataOffset());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.CFD_LOCATOR_OFFSET==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.ZIP_EOCDL_LOCATOR_OFFSET==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.CFH_SIG==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.POS_0==0)?null:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(Zip64_EOCDL_LOCATOR_OFFSET,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,offsetEntry.dataOffset,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry<0)?null:offsetEntry.dataLENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=ze.getCompressedSize();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataLast();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:entry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Zip64_EOCDL_LOCATOR_OFFSET:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?Zip64_EOCDL_LENGTH:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?ZIP64_EOCDL_LOCATOR_OFFSET:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?ZIP64_EOCD_CFD_LOCATOR_OFFSET:offsetEntry.dataOffset;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip,offsetEntry.getMethod(),offsetEntry.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.data,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.data,ze.getCompressedSize());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream||ze.getMethod()==ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream||ze.getMethod()!=ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream||ze.getMethod()==ZipArchiveEntry.METHOD_EOCDL_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream||ze.getMethod()==ZipArchiveEntry.DEFLATED;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inputStream,ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321offsetEntry.dataOffset=offsetEntry.dataOffset;offsetEntry.dataOffset=ze.getDataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ZipArchiveEntry.DEFAULT,ze,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,ze,offsetEntry.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(ze,offsetEntry.dataOffset,offsetEntry.offset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ce);if(offsetEntry!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0L:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?0:ze.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset[Delete]0)?null:offsetEntry.dataOffset+1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset!=0)?null:offsetEntry.dataOffset*1;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(remaining>=null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(remainder==null)?null:offsetEntry.dataOffset,remaining;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ZERO);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset,ZERO_SIG);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inflater||offsetEntry.inflater==null;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.inflater||offsetEntry.inflater!=null;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnze.dataLength;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entries.get(ze.getMethod());
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321ze=(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+ZERO_FOR_FILENAME_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.dataOffset+ZERO_SIG;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnze.input;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnoffsetEntry.in;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry==null||offsetEntry.dataOffset==null){thrownewIllegalArgumentException("");}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.CFD_LOCATOR_OFFSET==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(OffsetEntry.CFH_SIG==null)?null:offsetEntry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset<0)returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=0)?null:offsetEntry.dataLENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zipEncoding,offsetEntry.dataOffset,ZERO_SHIFT);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataInputStream;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321returnnewZipArchiveEntry(zip64_EOCDL_LENGTH,ze.dataOffset);
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321Return(offsetEntry==null)?null:entry.dataOffset();
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset==null){returnoffsetEntry;}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry==null)?null:offsetEntry.dataOffset,0;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry.dataOffset==0)?offsetEntry.dataOffset:ZIP64_EOCDL_LENGTH;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321return(offsetEntry!=null)?null:offsetEntry.dataOffset+4;
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOff
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(entry.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOff
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null){returnnewZipArchiveEntry(offsetEntry.dataOffset,offsetEntry.dataOffset);}
projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java321if(ze.getMethod()==ZipArchiveEntry.DEFLATED){OffsetEntryoffsetEntry=entries.get(ze);if(offsetEntry!=null||offsetEntry.dataOffset!=null){returnoffsetEntry;}
