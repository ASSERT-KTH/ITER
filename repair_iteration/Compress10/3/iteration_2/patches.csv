bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  returns(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	60	None	replace
2	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	60	None	replace
3	[BUG]  [BUGGY]  return  entries(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  entries(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  entries(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
4	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	60	None	replace
5	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET	83	None	replace
6	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	83	None	replace
7	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LENGTH	83	None	replace
8	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH	83	None	replace
9	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LENGTH	83	None	replace
10	[BUG]  [BUGGY]  return  offsetEntry.dataoffset;  [CE]  cannot  find  symbol  dataoffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataoffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataoffset;	  return    offsetEntry.dataEnd;    	non-compiled	[CE]  cannot  find  symbol  dataoffset	7	None	replace
11	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	16	None	replace
12	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	16	None	replace
13	[BUG]  [BUGGY]  return(dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	16	None	replace
14	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  0  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  0  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  0  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	16	None	replace
15	[BUG]  [BUGGY]  return(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	16	None	replace
16	[BUG]  [BUGGY]  return(OffsetEntry.FOR_FILENAME_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.FOR_FILENAME_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.FOR_FILENAME_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	10	None	replace
17	[BUG]  [BUGGY]  return(OffsetEntry.DATA_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  DATA_LENGTH  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.DATA_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.DATA_LENGTH  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  DATA_LENGTH	10	None	replace
18	[BUG]  [BUGGY]  return(OffsetEntry.SIG  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  SIG  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.SIG  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.SIG  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  SIG	10	None	replace
19	[BUG]  [BUGGY]  return(OffsetEntry.EMPTY  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  EMPTY  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.EMPTY  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.EMPTY  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	10	None	replace
20	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	52	None	replace
21	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	52	None	replace
22	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(offsetEntry);  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(offsetEntry);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(offsetEntry);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  inconvertible  types	36	None	replace
23	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry.dataOffset);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry.dataOffset);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	36	None	replace
24	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze  +  1);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(ze  +  1);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	36	None	replace
25	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(ze,  offsetEntry);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	36	None	replace
26	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(0);  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(0);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(0);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  inconvertible  types	36	None	replace
27	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
28	[BUG]  [BUGGY]  return(remaining  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(remaining  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(remaining  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
29	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  1;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
30	[BUG]  [BUGGY]  return(remaining!=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(remaining!=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(remaining!=  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
31	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  2;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
32	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
33	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
34	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
35	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
36	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	72	None	replace
37	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	72	None	replace
38	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  2;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  2;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	45	None	replace
39	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	45	None	replace
40	[BUG]  [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	45	None	replace
41	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	25	None	replace
42	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	25	None	replace
43	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_LOCATOR_OFFSET	25	None	replace
44	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataOffset;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataOffset;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
45	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
46	[BUG]  [BUGGY]  return  offsetEntry.data  -  1;  [CE]  cannot  find  symbol  data  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.data  -  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.data  -  1;	  return    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  data	6	None	replace
47	[BUG]  [BUGGY]  return  offsetEntry.dataOnset;  [CE]  cannot  find  symbol  dataOnset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOnset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOnset;	  return    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  dataOnset	6	None	replace
48	[BUG]  [BUGGY]  return  offsetEntry.data  +  1;  [CE]  cannot  find  symbol  data  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.data  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.data  +  1;	  return    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  data	6	None	replace
49	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
50	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0,  offsetEntry.dataOffset()  :  offsetEntry.dataOffset();  [CE]  :  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  0,  offsetEntry.dataOffset()  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0,  offsetEntry.dataOffset()  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  :  expected	24	None	replace
51	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset;	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  incompatible  types	24	None	replace
52	[BUG]  [BUGGY]  return(OffsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset();  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	24	None	replace
53	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  1  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  1  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  1  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
54	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
55	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
56	[BUG]  [BUGGY]  Return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
57	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
58	[BUG]  [BUGGY]  Return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
59	[BUG]  [BUGGY]  return  offsetEntry.dataOutputStream;  [CE]  cannot  find  symbol  dataOutputStream  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOutputStream;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOutputStream;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  dataOutputStream	69	None	replace
60	[BUG]  [BUGGY]  return  offsetEntry.inputStream  -  1;  [CE]  cannot  find  symbol  inputStream  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream  -  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream  -  1;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  inputStream	69	None	replace
61	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  2;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  2;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
62	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
63	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  3;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  3;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  3;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
64	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
65	[BUG]  [BUGGY]  return  offsetEntry.dataFile;  [CE]  cannot  find  symbol  dataFile  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataFile;	  return    offsetEntry.dataSource;    	non-compiled	[CE]  cannot  find  symbol  dataFile	48	None	replace
66	[BUG]  [BUGGY]  return(entry  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(entry  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(entry  ==  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    entry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	61	None	replace
67	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >=  null)?  null  :  offsetEntry.dataOffset;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >=  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >=  null)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset!=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	44	None	replace
68	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	17	None	replace
69	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset;  [CE]  incomparable  types:  long  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  null)?  0  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	17	None	replace
70	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
71	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
72	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
73	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	35	None	replace
74	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  incomparable  types:  long  and  <null>  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	22	None	replace
75	[BUG]  [BUGGY]  return(OffsetEntry.FOR_FILENAME_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  FOR_FILENAME_LENGTH  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.FOR_FILENAME_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.FOR_FILENAME_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  FOR_FILENAME_LENGTH	22	None	replace
76	[BUG]  [BUGGY]  return(OffsetEntry.DATA_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  DATA_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.DATA_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.DATA_LENGTH  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  DATA_LENGTH	22	None	replace
77	[BUG]  [BUGGY]  return(OffsetEntry.SIG  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  SIG  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.SIG  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.SIG  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  SIG	22	None	replace
78	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getEnd(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getEnd(),  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getEnd(),  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
79	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getStart(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getStart(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getStart(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
80	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.getEnd(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.getEnd(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
81	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getEnd(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze.getEnd(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
82	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.getEnd(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.getEnd(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	77	None	replace
83	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(entry.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(entry.getEnd(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(entry.getEnd(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	77	None	replace
84	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_FOR_FILENAME_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_FOR_FILENAME_LENGTH	27	None	replace
85	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset  +  1);	  return    new    ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	27	None	replace
86	[BUG]  [BUGGY]  return  offsetEntry.dataInputFile;  [CE]  cannot  find  symbol  dataInputFile  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataInputFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataInputFile;	  return    offsetEntry.inputFile;    	non-compiled	[CE]  cannot  find  symbol  dataInputFile	70	None	replace
87	[BUG]  [BUGGY]  return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	21	None	replace
88	[BUG]  [BUGGY]  return(offsetEntry  [BUGGY]  null)?  null  :  offsetEntry.dataOffset();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  [BUGGY]  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  [BUGGY]  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  ')'  expected	21	None	replace
89	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  dataLength	56	None	replace
90	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.data;  [CE]  cannot  find  symbol  data  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.data;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.data;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  data	56	None	replace
91	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize;  [CE]  cannot  find  symbol  dataSize  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.data;    	non-compiled	[CE]  cannot  find  symbol  dataSize	56	None	replace
92	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    >=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  ')'  expected	9	None	replace
93	[BUG]  [BUGGY]  return(dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    >=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	9	None	replace
94	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getName(),  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
95	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
96	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	78	None	replace
97	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
98	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(entry.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(entry.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(entry.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	78	None	replace
99	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  entry.getMethod());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  entry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getName(),  entry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
100	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	51	None	replace
101	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	51	None	replace
102	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset  +  1;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset,    dataOffset;    	non-compiled	[CE]  ';'  expected	87	None	replace
103	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	53	None	replace
104	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	53	None	replace
105	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    >    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	55	None	replace
106	[BUG]  [BUGGY]  return(dataOffset  >  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(dataOffset  >  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  >  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    >    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	55	None	replace
107	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	64	None	replace
108	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,ZipArchiveEntry)	64	None	replace
109	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	64	None	replace
110	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipFile  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipFile	64	None	replace
111	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	64	None	replace
112	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  0);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,int)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  0);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  0);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,int)	64	None	replace
113	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  CFH_SHIFT);  [CE]  cannot  find  symbol  CFH_SHIFT  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  CFH_SHIFT);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  CFH_SHIFT);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  CFH_SHIFT	64	None	replace
114	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	85	None	replace
115	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	85	None	replace
116	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	85	None	replace
117	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,int)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,int)	66	None	replace
118	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	66	None	replace
119	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	66	None	replace
120	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getCompressedSize());	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)	66	None	replace
121	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  CFH_SHIFT);  [CE]  cannot  find  symbol  CFH_SHIFT  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  CFH_SHIFT);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  CFH_SHIFT);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  CFH_SHIFT	66	None	replace
122	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  0);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,int)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  0);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  0);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,int)	66	None	replace
123	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SIG);  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SIG);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SIG);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	66	None	replace
124	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
125	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.dataOffset(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip	79	None	replace
126	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.dataOffset(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
127	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
128	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
129	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip64  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64.dataOffset(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64	79	None	replace
130	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
131	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
132	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
133	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
134	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	38	None	replace
135	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  2;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  2;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	18	None	replace
136	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  start  +  1;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  ';'  expected	18	None	replace
137	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1L;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1L;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1L;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	18	None	replace
138	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  3;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  3;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  3;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	18	None	replace
139	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	14	None	replace
140	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  2;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  2;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	14	None	replace
141	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  2;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  2;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	14	None	replace
142	[BUG]  [BUGGY]  return  offsetEntry.dataInflater;  [CE]  cannot  find  symbol  dataInflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataInflater;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataInflater;	  return    offsetEntry.inflater;    	non-compiled	[CE]  cannot  find  symbol  dataInflater	68	None	replace
143	[BUG]  [BUGGY]  return  ze.inflater;  [CE]  cannot  find  symbol  inflater  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  ze.inflater;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  ze.inflater;	  return    offsetEntry.inflater;    	non-compiled	[CE]  cannot  find  symbol  inflater	68	None	replace
144	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  start  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  start,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	84	None	replace
145	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	84	None	replace
146	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze.getSize());	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)	84	None	replace
147	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    offsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	compilable	  [FE]  NullPointerException  	39	1	add
148	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    offsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	compilable	  [FE]  NullPointerException  	39	1	add
149	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry.dataOffset  =  offsetEntry.dataOffset;  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]      NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    OffsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	39	None	add
150	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;	  	compilable	  [FE]  NullPointerException  	39	1	add
151	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;	  	compilable	  [FE]  NullPointerException  	39	1	add
152	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  ze.dataOffset  =  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]          NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  ze.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    ze.dataOffset  =  offsetEntry.dataOffset;	  	non-compiled	[CE]  cannot  find  symbol  dataOffset	39	None	add
153	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  entry.dataOffset  =  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  entry  [FE]            NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  entry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    entry.dataOffset  =  offsetEntry.dataOffset;	  	non-compiled	[CE]  cannot  find  symbol  entry	39	None	add
154	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  incompatible  types	75	None	replace
155	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  incompatible  types	75	None	replace
156	[BUG]  [BUGGY]  return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	75	None	replace
157	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset++;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
158	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  incompatible  types	75	None	replace
159	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset++;    	non-compiled	[CE]  incompatible  types	75	None	replace
160	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getMethod(),  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
161	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
162	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
163	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	76	None	replace
164	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(OffsetEntry.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
165	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(entry.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(entry.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(entry.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	76	None	replace
166	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	71	None	replace
167	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	71	None	replace
168	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	71	None	replace
169	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	71	None	replace
170	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  3;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  3;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  3;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	8	None	replace
171	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset,  start  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset,  start  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset,  start  +  1;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
172	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  4;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  4;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  4;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	8	None	replace
173	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	54	None	replace
174	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	54	None	replace
175	[BUG]  [BUGGY]  File  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  File  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	File  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	54	None	replace
176	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
177	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  0);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  0);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  0);	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
178	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze)+  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze)+  1;	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
179	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  -  1);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  -  1);	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
180	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
181	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  dataOffset);	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
182	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	74	None	replace
183	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	74	None	replace
184	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	74	None	replace
185	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	73	None	replace
186	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	73	None	replace
187	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  -  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  -  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  -  offsetEntry.dataOffset;	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	1	None	replace
188	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  1;	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	1	None	replace
189	[BUG]  [BUGGY]  return  offsetEntry.dataOffset,  ze.getMethod());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset,  ze.getMethod());	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  ';'  expected	1	None	replace
190	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  ze.getMethod();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  ze.getMethod();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  ze.getMethod();	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	1	None	replace
191	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  ze.getCompressedSize();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  ze.getCompressedSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  ze.getCompressedSize();	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	1	None	replace
192	[BUG]  [BUGGY]  return  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset,  ze.getCompressedSize());	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  ';'  expected	1	None	replace
193	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  NONE;  [CE]  cannot  find  symbol  NONE  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  NONE;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  NONE;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  cannot  find  symbol  NONE	12	None	replace
194	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MAX_VALUE;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MAX_VALUE;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MAX_VALUE;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
195	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	12	None	replace
196	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MIN_VALUE;  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MIN_VALUE;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.MIN_VALUE;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
197	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  DEFAULT_SIG;  [CE]  cannot  find  symbol  DEFAULT_SIG  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  DEFAULT_SIG;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  DEFAULT_SIG;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIG	12	None	replace
198	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.parseInt(ze.getCompressedSize());  [CE]  no  suitable  method  found  for  parseInt(long)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.parseInt(ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  Integer.parseInt(ze.getCompressedSize());	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(long)	12	None	replace
199	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsetLength();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsetLength();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsetLength();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataLength();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
200	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataLength();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataLength();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataLength();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataLength();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
201	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,long)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getCompressedSize());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,long)	65	None	replace
202	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,long)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getSize());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,long)	65	None	replace
203	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  start);  [CE]  cannot  find  symbol  start  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  start);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  start);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  start	65	None	replace
204	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getHeaderOffset());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getHeaderOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getHeaderOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
205	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,ZipArchiveEntry)	65	None	replace
206	[BUG]  [BUGGY]  return  offsetEntry.dataOfOffset;  [CE]  cannot  find  symbol  dataOfOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOfOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOfOffset;	  return    offsetEntry.dataLength;    	non-compiled	[CE]  cannot  find  symbol  dataOfOffset	4	None	replace
207	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_FOR_FILENAME_LENGTH  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_FOR_FILENAME_LENGTH  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_FOR_FILENAME_LENGTH  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH	81	None	replace
208	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Zip64_EOCD_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_LOCATOR_OFFSET	81	None	replace
209	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET	81	None	replace
210	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZipShort  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  ZipShort  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZipShort  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  ZipShort  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZipShort	81	None	replace
211	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZipUtil.ZERO  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  ZERO  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZipUtil.ZERO  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  ZipUtil.ZERO  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO	81	None	replace
212	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  dataOffset);	  return    new    ZipArchiveEntry(zip,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	28	None	replace
213	[BUG]  [BUGGY]  return  offsetEntry.dataInput;  [CE]  cannot  find  symbol  dataInput  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataInput;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataInput;	  return    offsetEntry.input;    	non-compiled	[CE]  cannot  find  symbol  dataInput	67	None	replace
214	[BUG]  [BUGGY]  return  offsetEntry.dataStream;  [CE]  cannot  find  symbol  dataStream  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataStream;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataStream;	  return    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataStream	2	None	replace
215	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  end;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  end;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  end;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	19	None	replace
216	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  ze.getDataOffset();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  ze.getDataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  ze.getDataOffset();	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
217	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  0;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	offsetEntry.dataOffset  =  0;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
218	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  0;  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  0;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  0;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
219	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  ZERO;  [CE]  cannot  find  symbol  ZERO  [FE]        NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  ZERO;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  ZERO;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO	40	None	replace
220	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  ze;  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  ze;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  ze;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	40	None	replace
221	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]            NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  dataOffset;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
222	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
223	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  offsetEntry.dataOffset  +  1;	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
224	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	29	None	replace
225	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	29	None	replace
226	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  zipFile  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  ze.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipFile	29	None	replace
227	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  zipFile  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipFile	29	None	replace
228	[BUG]  [BUGGY]  Return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
229	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
230	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset()  +  1;  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset()  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset()  +  1;	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
231	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
232	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOutputStream;  [CE]  cannot  find  symbol  dataOutputStream  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOutputStream;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOutputStream;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataOutputStream	58	None	replace
233	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStream;  [CE]  cannot  find  symbol  dataStream  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStream;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStream;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataStream	58	None	replace
234	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataFile;  [CE]  cannot  find  symbol  dataFile  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataFile;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataFile	58	None	replace
235	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	50	None	replace
236	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	50	None	replace
237	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	50	None	replace
238	[BUG]  [BUGGY]  File  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  File  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	File  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	50	None	replace
239	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
240	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
241	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	30	None	replace
242	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	30	None	replace
243	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	30	None	replace
244	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	30	None	replace
245	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	30	None	replace
246	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,int)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,int)	30	None	replace
247	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataOffset;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataOffset;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
248	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataLength;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataLength;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
249	[BUG]  [BUGGY]  return(offsetEntry.dataLength  <  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataLength  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataLength  <  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataLength  <  0)?  null  :  offsetEntry.dataOffset;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataLength	43	None	replace
250	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataLength;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataLength	43	None	replace
251	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataSize;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataSize;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataSize;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
252	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	86	None	replace
253	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int,long)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.getMethod(),  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int,long)	86	None	replace
254	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip.dataOffset,  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	86	None	replace
255	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
256	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getCompressedSize());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
257	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset.getName();  [CE]  long  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  long  cannot  be  dereferenced	57	None	replace
258	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  offsetEntry.getName();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  offsetEntry.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  offsetEntry.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  ';'  expected	57	None	replace
259	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset.getName();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  long  cannot  be  dereferenced	57	None	replace
260	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getName();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  ';'  expected	57	None	replace
261	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ze.dataOffset());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ze.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ze.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
262	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
263	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip.dataOffset());  [CE]  cannot  find  symbol  zip  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip	82	None	replace
264	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
265	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
266	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zipEntry.dataOffset());  [CE]  cannot  find  symbol  zipEntry  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zipEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zipEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zipEntry	82	None	replace
267	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
268	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	33	None	replace
269	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLength;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLength;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
270	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataLength;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataLength	11	None	replace
271	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSize;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSize;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSize;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
272	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)	31	None	replace
273	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incompatible  types	59	None	replace
274	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  file.separator;  [CE]  cannot  find  symbol  file  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  file.separator;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  file.separator;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  file	59	None	replace
275	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [CE]  incomparable  types:  long  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	59	None	replace
276	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  1;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incompatible  types	59	None	replace
277	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separatorChar;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separatorChar;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separatorChar;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incompatible  types	59	None	replace
278	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.SEPARATOR;  [CE]  cannot  find  symbol  SEPARATOR  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.SEPARATOR;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.SEPARATOR;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  SEPARATOR	59	None	replace
279	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.data;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.data;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.data;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
280	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataFile;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataFile;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
281	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSet;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSet;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataSet;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
282	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(OffsetEntry,long,ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  offsetEntry.dataOffset,  ze);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(OffsetEntry,long,ZipArchiveEntry)	85	None	replace
283	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	85	None	replace
284	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ZERO_SIG);  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ZERO_SIG);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  ZERO_SIG);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	85	None	replace
285	[BUG]  [BUGGY]  return  offsetEntry.getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.getInputStream();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.getInputStream();	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
286	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  4;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  4;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  4;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	18	None	replace
287	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  5;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  5;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  5;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	18	None	replace
288	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset  +  1;  [CE]  cannot  find  symbol  Null  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Null	81	None	replace
289	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  0)?  Null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Null  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  0)?  Null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  0)?  Null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Null	81	None	replace
290	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getCompressedSize());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long)	86	None	replace
291	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  remaining);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  remaining);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  remaining	86	None	replace
292	[BUG]  [BUGGY]  return  offsetEntry.inputFile  +  1;  [CE]  cannot  find  symbol  inputFile  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputFile  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputFile  +  1;	  return    offsetEntry.inputFile;    	non-compiled	[CE]  cannot  find  symbol  inputFile	70	None	replace
293	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  remaining);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  remaining);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	66	None	replace
294	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,ZipArchiveEntry)  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ze);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,ZipArchiveEntry)	66	None	replace
295	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO	66	None	replace
296	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStart();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStart();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataStart();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataLength();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
297	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int,long)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod(),  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int,long)	30	None	replace
298	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getEnd(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(OffsetEntry.getEnd(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
299	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	53	None	replace
300	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_CFD_LOCATOR_OFFSET;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_CFD_LOCATOR_OFFSET;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_CFD_LOCATOR_OFFSET;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
301	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  ZIP64_EOCD_FOR_FILENAME_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_FOR_FILENAME_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCD_FOR_FILENAME_LENGTH;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  cannot  find  symbol  ZIP64_EOCD_FOR_FILENAME_LENGTH	12	None	replace
302	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  zipEncoding;  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  zipEncoding;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  zipEncoding;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
303	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LOCATOR_OFFSET;  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LOCATOR_OFFSET;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LOCATOR_OFFSET;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
304	[BUG]  [BUGGY]  return  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
305	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	60	None	replace
306	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();	  returns(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	60	None	replace
307	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64	29	None	replace
308	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEnd  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEnd	29	None	replace
309	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	32	None	replace
310	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  entry.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  entry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getMethod(),  entry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
311	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  dataOffset;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  dataOffset;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset,    dataOffset;    	non-compiled	[CE]  ';'  expected	87	None	replace
312	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	50	None	replace
313	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  ze.getSize();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  ze.getSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  ze.getSize();	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	1	None	replace
314	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(OffsetEntry.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(OffsetEntry.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
315	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  z.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  z.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getName(),  z.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
316	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSet();	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
317	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataByte;  [CE]  cannot  find  symbol  dataByte  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataByte;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataByte;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataByte	58	None	replace
318	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
319	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
320	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  ze.dataOffset());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  ze.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  ze.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
321	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	65	None	replace
322	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
323	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  this;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  this;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  this;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incompatible  types	59	None	replace
324	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;  [CE]  cannot  find  symbol  remaining  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  remaining;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  remaining	59	None	replace
325	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  dataOffset;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	59	None	replace
326	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)offsetEntry.get(ze);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)offsetEntry.get(ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)offsetEntry.get(ze);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
327	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1L;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1L;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1L;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
328	[BUG]  [BUGGY]  return  offsetEntry.dataOutput;  [CE]  cannot  find  symbol  dataOutput  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOutput;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOutput;	  return    offsetEntry.dataSource;    	non-compiled	[CE]  cannot  find  symbol  dataOutput	48	None	replace
329	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
330	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	          OffsetEntry    offsetEntry    =    entries.get(ze);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	34	None	replace
331	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1L;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1L;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1L;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	45	None	replace
332	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(OffsetEntry,ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry,  ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry,  ze);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(OffsetEntry,ZipArchiveEntry)	64	None	replace
333	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  remaining);  [CE]  cannot  find  symbol  remaining  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  remaining);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  remaining);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  remaining	64	None	replace
334	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	52	None	replace
335	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  start;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  start;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  start;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
336	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remainder;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remainder;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remainder;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
337	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipEnd  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEnd,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipEnd	31	None	replace
338	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	25	None	replace
339	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR_OFFSET	25	None	replace
340	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	25	None	replace
341	[BUG]  [BUGGY]  Return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
342	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry  offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry  offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    OffsetEntry  offsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	non-compiled	[CE]  ';'  expected	39	None	add
343	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    OffsetEntry  offsetEntry  =  offsetEntry.dataOffset;	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	39	None	add
344	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,ZipArchiveEntry,long,long)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,ZipArchiveEntry,long,long)	84	None	replace
345	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  zipEncoding);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,ZipEncoding)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  zipEncoding);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  zipEncoding);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,ZipEncoding)	84	None	replace
346	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    >    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	55	None	replace
347	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_FOR_FILENAME_LENGTH	28	None	replace
348	[BUG]  [BUGGY]  if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
349	[BUG]  [BUGGY]  return(OffsetEntry.DEFAULT  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  DEFAULT  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.DEFAULT  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.DEFAULT  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	22	None	replace
350	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  >=  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	73	None	replace
351	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  &&  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	73	None	replace
352	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(zip);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	54	None	replace
353	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataLength;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataLength;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
354	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataSize;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataSize;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataSize;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
355	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.data;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.data;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.data;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
356	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataFile;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataFile;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
357	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataEscaped;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataEscaped;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataEscaped;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
358	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataSize();	  return(offsetEntry    ==    null)?    null    :    entry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
359	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	27	None	replace
360	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCD_CFD_LOCATOR,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCD_CFD_LOCATOR	27	None	replace
361	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.data;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.data;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.data;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
362	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataFile;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataFile;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataFile;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
363	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataSet;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataSet;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataSet;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
364	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	82	None	replace
365	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	82	None	replace
366	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  DEFAULT  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	82	None	replace
367	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry,  ze.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
368	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  dataOffset)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	16	None	replace
369	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    offsetEntry.dataOffset)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	16	None	replace
370	[BUG]  [BUGGY]  return  offsetEntry.input  +  1;  [CE]  cannot  find  symbol  input  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.input  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.input  +  1;	  return    offsetEntry.input;    	non-compiled	[CE]  cannot  find  symbol  input	67	None	replace
371	[BUG]  [BUGGY]  return  offsetEntry.input  -  1;  [CE]  cannot  find  symbol  input  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.input  -  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.input  -  1;	  return    offsetEntry.input;    	non-compiled	[CE]  cannot  find  symbol  input	67	None	replace
372	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze  +  1);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	51	None	replace
373	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  returns(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	24	None	replace
374	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0  :  entry.dataOffset();  [CE]  cannot  find  symbol  entry  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  0  :  entry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0  :  entry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	24	None	replace
375	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  ze.getName();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  ze.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  ze.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  incompatible  types	57	None	replace
376	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsets.getName();  [CE]  cannot  find  symbol  dataOffsets  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsets.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffsets.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  cannot  find  symbol  dataOffsets	57	None	replace
377	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  name.getName();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  name.getName();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  name.getName();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.getName();    	non-compiled	[CE]  cannot  find  symbol  name	57	None	replace
378	[BUG]  [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLENGTH;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  0)?  null  :  offsetEntry.dataLENGTH;	  return(dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	11	None	replace
379	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,ZipArchiveEntry,long)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  ze,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,ZipArchiveEntry,long)	84	None	replace
380	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  ze.dataOffset();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  ze.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  ze.dataOffset();	  return(offsetEntry    ==    null)?    null    :    entry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
381	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  *  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  *  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  *  1;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	8	None	replace
382	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.getName(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.getName(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getName(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	78	None	replace
383	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.getMethod());  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	86	None	replace
384	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.getMethod(),  ze.getCompressedSize());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
385	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
386	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip	82	None	replace
387	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	82	None	replace
388	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET());	  return(offsetEntry    ==    null)?    null    :    new    ZipArchiveEntry(offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
389	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  2;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  2;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  2;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  incompatible  types	59	None	replace
390	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  start;  [CE]  cannot  find  symbol  start  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  start;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  start;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  start	59	None	replace
391	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  comment;  [CE]  cannot  find  symbol  comment  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  comment;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator  +  comment;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset    +    File.separator;    	non-compiled	[CE]  cannot  find  symbol  comment	59	None	replace
392	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getStart(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getStart(),  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getStart(),  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getEnd(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
393	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.offset);  [CE]  cannot  find  symbol  zip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.offset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.offset);	  return    new    ZipArchiveEntry(zip,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	28	None	replace
394	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(z,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(z,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(z,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  z	28	None	replace
395	[BUG]  [BUGGY]  return  offsetEntry.dataInset;  [CE]  cannot  find  symbol  dataInset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataInset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataInset;	  return    offsetEntry.dataSize;    	non-compiled	[CE]  cannot  find  symbol  dataInset	5	None	replace
396	[BUG]  [BUGGY]  Return(ze.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(ze.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(ze.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
397	[BUG]  [BUGGY]  Return(entry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(entry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(entry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
398	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset++;	  Return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	47	None	replace
399	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  0  :  offsetEntry.dataOffset;	  return(offsetEntry    >=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	20	None	replace
400	[BUG]  [BUGGY]  return  offsetEntry.inputPath;  [CE]  cannot  find  symbol  inputPath  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputPath;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputPath;	  return    offsetEntry.inputFile;    	non-compiled	[CE]  cannot  find  symbol  inputPath	70	None	replace
401	[BUG]  [BUGGY]  return  offsetEntry.inputFileNumber;  [CE]  cannot  find  symbol  inputFileNumber  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputFileNumber;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputFileNumber;	  return    offsetEntry.inputFile;    	non-compiled	[CE]  cannot  find  symbol  inputFileNumber	70	None	replace
402	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_ECFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_ECFD_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_ECFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_ECFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_ECFD_LOCATOR_OFFSET	83	None	replace
403	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zipFile,    offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	29	None	replace
404	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH.dataOffset(),  offsetEntry.dataOffset());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset(),    offsetEntry.dataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	79	None	replace
405	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getMethod());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  ze.getMethod());	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset,    dataOffset;    	non-compiled	[CE]  ';'  expected	87	None	replace
406	[BUG]  [BUGGY]  return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET	10	None	replace
407	[BUG]  [BUGGY]  return(OffsetEntry.ZIP_EOCDL_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  ZIP_EOCDL_LOCATOR_OFFSET  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.ZIP_EOCDL_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.ZIP_EOCDL_LOCATOR_OFFSET  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZIP_EOCDL_LOCATOR_OFFSET	10	None	replace
408	[BUG]  [BUGGY]  return(OffsetEntry.CFH_SIG  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  CFH_SIG  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.CFH_SIG  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.CFH_SIG  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  CFH_SIG	10	None	replace
409	[BUG]  [BUGGY]  return(OffsetEntry.POS_0  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  POS_0  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.POS_0  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.POS_0  ==  0)?  null  :  offsetEntry.dataOffset;	  return(OffsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  POS_0	10	None	replace
410	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(Zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(Zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET	27	None	replace
411	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	30	None	replace
412	[BUG]  [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataLENGTH;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  <  0)?  null  :  offsetEntry.dataLENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  <  0)?  null  :  offsetEntry.dataLENGTH;	  return(dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
413	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  ze.getCompressedSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	offsetEntry.dataOffset  =  ze.getCompressedSize();	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
414	[BUG]  [BUGGY]  offsetEntry.dataOffset  =  ze.getCompressedSize();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  offsetEntry.dataOffset  =  ze.getCompressedSize();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	offsetEntry.dataOffset  =  ze.getCompressedSize();	          offsetEntry.dataOffset    =    offsetEntry.dataOffset;    	compilable	  [FE]  NullPointerException  	40	1	replace
415	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLast();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLast();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLast();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataLength();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
416	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  entry.dataOffset();  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  entry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  entry.dataOffset();	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	21	None	replace
417	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCDL_LOCATOR_OFFSET	81	None	replace
418	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LENGTH  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Zip64_EOCDL_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LENGTH  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Zip64_EOCDL_LENGTH  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Zip64_EOCDL_LENGTH	81	None	replace
419	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCDL_LOCATOR_OFFSET  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	81	None	replace
420	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  ZIP64_EOCD_CFD_LOCATOR_OFFSET  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    Null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	81	None	replace
421	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  zip  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.getMethod(),  offsetEntry.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.getMethod(),  offsetEntry.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.getMethod(),    offsetEntry.getMethod());    	non-compiled	[CE]  cannot  find  symbol  zip	76	None	replace
422	[BUG]  [BUGGY]  return  offsetEntry.data,  ze.getMethod());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.data,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.data,  ze.getMethod());	  return    offsetEntry.data;    	non-compiled	[CE]  ';'  expected	6	None	replace
423	[BUG]  [BUGGY]  return  offsetEntry.data,  ze.getCompressedSize());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.data,  ze.getCompressedSize());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.data,  ze.getCompressedSize());	  return    offsetEntry.data;    	non-compiled	[CE]  ';'  expected	6	None	replace
424	[BUG]  [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  inputStream  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  inputStream	69	None	replace
425	[BUG]  [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  inputStream  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream  ||  ze.getMethod()!=  ZipArchiveEntry.METHOD_FOR_FILENAME_LENGTH;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  inputStream	69	None	replace
426	[BUG]  [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_LENGTH;  [CE]  cannot  find  symbol  inputStream  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.METHOD_EOCDL_LENGTH;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  inputStream	69	None	replace
427	[BUG]  [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED;  [CE]  cannot  find  symbol  inputStream  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream  ||  ze.getMethod()  ==  ZipArchiveEntry.DEFLATED;	  return    offsetEntry.inputStream;    	non-compiled	[CE]  cannot  find  symbol  inputStream	69	None	replace
428	[BUG]  [BUGGY]  return  offsetEntry.inputStream,  ze.getMethod());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inputStream,  ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream,  ze.getMethod());	  return    offsetEntry.inputStream;    	non-compiled	[CE]  ';'  expected	69	None	replace
429	[BUG]  [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  ze.getDataOffset();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]          offsetEntry.dataOffset  =  offsetEntry.dataOffset;  offsetEntry.dataOffset  =  ze.getDataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	                offsetEntry.dataOffset    =    offsetEntry.dataOffset;    offsetEntry.dataOffset  =  ze.getDataOffset();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
430	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  DEFAULT  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  ze,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ZipArchiveEntry.DEFAULT,  ze,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	64	None	replace
431	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze,  offsetEntry.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  ze,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	64	None	replace
432	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.offset);  [CE]  cannot  find  symbol  offset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.offset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.offset);	  return    new    ZipArchiveEntry(ze,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  offset	64	None	replace
433	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ce);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(offsetEntry);    if(offsetEntry!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	50	None	replace
434	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0L  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  0L  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0L  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
435	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0  :  ze.dataOffset();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  0  :  ze.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0  :  ze.dataOffset();	  return(offsetEntry    ==    null)?    0    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
436	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
437	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  [Delete]  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  ')'  expected	14	None	replace
438	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  *  1;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  *  1;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  *  1;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	14	None	replace
439	[BUG]  [BUGGY]  return(remaining  >=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(remaining  >=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(remaining  >=  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
440	[BUG]  [BUGGY]  return(remainder  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(remainder  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(remainder  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	80	None	replace
441	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO	65	None	replace
442	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO_SIG);  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO_SIG);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ZERO_SIG);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset,    dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	65	None	replace
443	[BUG]  [BUGGY]  return  offsetEntry.inflater  ||  offsetEntry.inflater  ==  null;  [CE]  cannot  find  symbol  inflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inflater  ||  offsetEntry.inflater  ==  null;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inflater  ||  offsetEntry.inflater  ==  null;	  return    offsetEntry.inflater;    	non-compiled	[CE]  cannot  find  symbol  inflater	68	None	replace
444	[BUG]  [BUGGY]  return  offsetEntry.inflater  ||  offsetEntry.inflater!=  null;  [CE]  cannot  find  symbol  inflater  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.inflater  ||  offsetEntry.inflater!=  null;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inflater  ||  offsetEntry.inflater!=  null;	  return    offsetEntry.inflater;    	non-compiled	[CE]  cannot  find  symbol  inflater	68	None	replace
445	[BUG]  [BUGGY]  return  ze.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  ze.dataLength;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  ze.dataLength;	  return    offsetEntry.dataLength;    	non-compiled	[CE]  cannot  find  symbol  dataLength	4	None	replace
446	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze.getMethod());  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entries.get(ze.getMethod());  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entries.get(ze.getMethod());	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  inconvertible  types	36	None	replace
447	[BUG]  [BUGGY]  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);	          ze    =(ZipArchiveEntry)entries.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	36	None	replace
448	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
449	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  ZERO_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  ZERO_FOR_FILENAME_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  ZERO_FOR_FILENAME_LENGTH;	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH	1	None	replace
450	[BUG]  [BUGGY]  return  offsetEntry.dataOffset  +  ZERO_SIG;  [CE]  cannot  find  symbol  ZERO_SIG  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.dataOffset  +  ZERO_SIG;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset  +  ZERO_SIG;	  return    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	1	None	replace
451	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	35	None	replace
452	[BUG]  [BUGGY]  return  ze.input;  [CE]  cannot  find  symbol  input  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  ze.input;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  ze.input;	  return    offsetEntry.input;    	non-compiled	[CE]  cannot  find  symbol  input	67	None	replace
453	[BUG]  [BUGGY]  return  offsetEntry.in;  [CE]  cannot  find  symbol  in  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  offsetEntry.in;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.in;	  return    offsetEntry.input;    	non-compiled	[CE]  cannot  find  symbol  in	67	None	replace
454	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	37	None	replace
455	[BUG]  [BUGGY]  return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.CFD_LOCATOR_OFFSET  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  CFD_LOCATOR_OFFSET	22	None	replace
456	[BUG]  [BUGGY]  return(OffsetEntry.CFH_SIG  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  CFH_SIG  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(OffsetEntry.CFH_SIG  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.CFH_SIG  ==  null)?  null  :  offsetEntry.dataOffset();	  return(OffsetEntry.dataOffset    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  CFH_SIG	22	None	replace
457	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)return  offsetEntry;  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    <    0)    {    return    offsetEntry;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
458	[BUG]  [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataLENGTH;  [CE]  incomparable  types:  OffsetEntry  and  int  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  0)?  null  :  offsetEntry.dataLENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  0)?  null  :  offsetEntry.dataLENGTH;	  return(dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  OffsetEntry  and  int	15	None	replace
459	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SHIFT);  [CE]  cannot  find  symbol  ZERO_SHIFT  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SHIFT);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  ZERO_SHIFT);	  return    new    ZipArchiveEntry(zipEncoding,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SHIFT	66	None	replace
460	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataInputStream;  [CE]  cannot  find  symbol  dataInputStream  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataInputStream;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataInputStream;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataInputStream;    	non-compiled	[CE]  cannot  find  symbol  dataInputStream	58	None	replace
461	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  ze.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  ze.dataOffset);  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LENGTH,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    ze.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LENGTH	25	None	replace
462	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  entry.dataOffset();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  Return(offsetEntry  ==  null)?  null  :  entry.dataOffset();  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  entry.dataOffset();	  Return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	63	None	replace
463	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset    ==    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
464	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  0;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  0;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset,    remaining;    	non-compiled	[CE]  ';'  expected	19	None	replace
465	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LENGTH;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LENGTH;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  ZIP64_EOCDL_LENGTH;	  return(offsetEntry.dataOffset    ==    0)?    offsetEntry.dataOffset    :    null;    	non-compiled	[CE]  incompatible  types	12	None	replace
466	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  4;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  4;  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  4;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset    +    1;    	non-compiled	[CE]  incompatible  types	45	None	replace
467	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
468	[BUG]  [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(entry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(entry.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOff	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  ')'  expected	71	None	replace
469	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null)    {    return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
470	[BUG]  [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {      [BUGGY]  if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]      }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	if(ze.getMethod()  ==  ZipArchiveEntry.DEFLATED)  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	          OffsetEntry    offsetEntry    =    entries.get(ze);    if(offsetEntry!=    null    ||    offsetEntry.dataOffset!=    null)    {    return    offsetEntry;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
