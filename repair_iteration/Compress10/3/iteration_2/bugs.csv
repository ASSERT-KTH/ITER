bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOffset;	  return    offsetEntry;    	non-compiled	[CE]  incompatible  types	10	None	replace
2	[BUG]  [BUGGY]  return  offsetEntry.dataInputStream;  [CE]  cannot  find  symbol  dataInputStream  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataInputStream;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataInputStream;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataInputStream	10	None	replace
3	[BUG]  [BUGGY]  return  offsetEntry.dataStart;  [CE]  cannot  find  symbol  dataStart  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataStart;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataStart;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataStart	10	None	replace
4	[BUG]  [BUGGY]  return  offsetEntry.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataLength;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataLength;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataLength	10	None	replace
5	[BUG]  [BUGGY]  return  offsetEntry.dataSize;  [CE]  cannot  find  symbol  dataSize  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataSize;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataSize;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataSize	10	None	replace
6	[BUG]  [BUGGY]  return  offsetEntry.data;  [CE]  cannot  find  symbol  data  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.data;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.data;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  data	10	None	replace
7	[BUG]  [BUGGY]  return  offsetEntry.dataEnd;  [CE]  cannot  find  symbol  dataEnd  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataEnd;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataEnd;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataEnd	10	None	replace
8	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	5	None	replace
9	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >=  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	5	None	replace
10	[BUG]  [BUGGY]  return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	5	None	replace
11	[BUG]  [BUGGY]  return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	5	None	replace
12	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  null;  [CE]  incompatible  types  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  null;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  offsetEntry.dataOffset  :  null;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	5	None	replace
13	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >>  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	6	None	replace
14	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	6	None	replace
15	[BUG]  [BUGGY]  return(dataOffset!=  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(dataOffset!=  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset!=  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset!=    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	6	None	replace
16	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  offsetEntry.dataOffset)?  null  :  offsetEntry.dataOffset;	  return    this;    	non-compiled	[CE]  incompatible  types	1	None	replace
17	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset;  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset;	  return    this;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	1	None	replace
18	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	2	None	replace
19	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
21	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  return(OffsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(OffsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(OffsetEntry.dataOffset  ==  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  non-static  variable  dataOffset  cannot  be  referenced  from  a  static  context	7	None	replace
23	[BUG]  [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  >=  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
24	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  0  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
25	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	11	None	replace
26	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	11	None	replace
27	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCD_CFD_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	11	None	replace
28	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip	11	None	replace
29	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zipFile  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipFile,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zipFile	11	None	replace
30	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,int)  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,long,int)	11	None	replace
31	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(dataOffset,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	11	None	replace
32	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
33	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
34	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
35	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
36	[BUG]  [BUGGY]      ze  =(ZipArchiveEntry)entries.get(ze);  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      ze  =(ZipArchiveEntry)entries.get(ze);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        ze  =(ZipArchiveEntry)entries.get(ze);	  	non-compiled	[CE]  inconvertible  types	8	None	add
37	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
38	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
39	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	add	        offsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	compilable	  [FE]  NullPointerException  	8	1	add
40	[BUG]  [BUGGY]      offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      offsetEntry.dataOffset  =  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        offsetEntry.dataOffset  =  offsetEntry.dataOffset;	  	compilable	  [FE]  NullPointerException  	8	1	add
41	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	4	None	replace
42	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  =  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(dataOffset  <  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	4	None	replace
44	[BUG]  [BUGGY]  return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset;  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset!=  null)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	3	None	replace
45	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset  +  1;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	3	None	replace
46	[BUG]  [BUGGY]  return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  >>  null)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	3	None	replace
47	[BUG]  [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry.dataOffset  ==  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  return  offsetEntry.dataSource;  [CE]  cannot  find  symbol  dataSource  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataSource;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataSource;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataSource	10	None	replace
49	[BUG]  [BUGGY]  return  offsetEntry.dataOutputFile;  [CE]  cannot  find  symbol  dataOutputFile  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.dataOutputFile;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.dataOutputFile;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  dataOutputFile	10	None	replace
50	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry!=  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry!=  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
51	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
52	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
53	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset!=  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
54	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(offsetEntry);  if(offsetEntry  ==  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
55	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  >  0)?  null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	4	None	replace
56	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.data;  [CE]  cannot  find  symbol  data  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.data;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.data;	  return    this;    	non-compiled	[CE]  cannot  find  symbol  data	1	None	replace
57	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.getName();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.getName();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.getName();	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
58	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataInputStream;  [CE]  cannot  find  symbol  dataInputStream  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataInputStream;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataInputStream;	  return    this;    	non-compiled	[CE]  cannot  find  symbol  dataInputStream	1	None	replace
59	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset  +  File.separator;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	2	None	replace
60	[BUG]  [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	returns(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	7	None	replace
61	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  entry.dataOffset();  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  entry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  entry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	7	None	replace
62	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataLength();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
63	[BUG]  [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	Return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset();	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  not  a  statement	7	None	replace
64	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long)	11	None	replace
65	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset,  dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	11	None	replace
66	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long)  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long)	11	None	replace
67	[BUG]  [BUGGY]  return  offsetEntry.input;  [CE]  cannot  find  symbol  input  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.input;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.input;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  input	10	None	replace
68	[BUG]  [BUGGY]  return  offsetEntry.inflater;  [CE]  cannot  find  symbol  inflater  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.inflater;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inflater;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  inflater	10	None	replace
69	[BUG]  [BUGGY]  return  offsetEntry.inputStream;  [CE]  cannot  find  symbol  inputStream  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.inputStream;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputStream;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  inputStream	10	None	replace
70	[BUG]  [BUGGY]  return  offsetEntry.inputFile;  [CE]  cannot  find  symbol  inputFile  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  offsetEntry.inputFile;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  offsetEntry.inputFile;	  return    offsetEntry;    	non-compiled	[CE]  cannot  find  symbol  inputFile	10	None	replace
71	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null)  {  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  offsetEntry.dataOffset);  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
72	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  ==  null)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
73	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry!=  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
74	[BUG]  [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          NullPointerException    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]      OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	        OffsetEntry  offsetEntry  =  entries.get(ze);  if(offsetEntry  ==  null  ||  offsetEntry.dataOffset  <  0)  {  return  offsetEntry;  }	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	8	None	add
75	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  <  0)?  null  :  offsetEntry.dataOffset++;	  return(offsetEntry.dataOffset    <    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  incompatible  types	4	None	replace
76	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getMethod());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getMethod(),  offsetEntry.getMethod());	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
77	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getEnd(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getEnd(),  offsetEntry.getMethod());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getEnd(),  offsetEntry.getMethod());	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
78	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  offsetEntry.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.getName(),  offsetEntry.getMethod());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.getName(),  offsetEntry.getMethod());	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
79	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  offsetEntry.dataOffset());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset(),  offsetEntry.dataOffset());	  return    this;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
80	[BUG]  [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  remaining;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry!=  null)?  null  :  offsetEntry.dataOffset,  remaining;	  return(offsetEntry!=    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  ';'  expected	3	None	replace
81	[BUG]  [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset;  [CE]  cannot  find  symbol  Null  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry.dataOffset  ==  0)?  Null  :  offsetEntry.dataOffset;	  return(offsetEntry.dataOffset    ==    0)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  Null	5	None	replace
82	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  new  ZipArchiveEntry(offsetEntry.dataOffset());	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
83	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zip64_EOCDL_LOCATOR_OFFSET,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	11	None	replace
84	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(zipEncoding,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipEncoding,long,long)	11	None	replace
85	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,long)  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(ze,  offsetEntry.dataOffset,  offsetEntry.dataOffset);	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(ZipArchiveEntry,long,long)	11	None	replace
86	[BUG]  [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod());  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return  new  ZipArchiveEntry(offsetEntry.dataOffset,  ze.getMethod());	  return    new    ZipArchiveEntry(offsetEntry.dataOffset,    offsetEntry.dataOffset);    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long,int)	11	None	replace
87	[BUG]  [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {  OffsetEntry  offsetEntry  =  entries.get(ze);  if  (offsetEntry  ==  null)  {    [BUGGY]  return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset;  [BUGGY]    }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  case  ZipArchiveEntry.DEFLATED:  bis.addDummy();  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	321	321	1	replace	return(offsetEntry  ==  null)?  null  :  offsetEntry.dataOffset,  dataOffset;	  return(offsetEntry    ==    null)?    null    :    offsetEntry.dataOffset;    	non-compiled	[CE]  ';'  expected	2	None	replace
