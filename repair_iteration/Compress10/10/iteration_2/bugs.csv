bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  orig  =  archive.getOriginalFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalFile();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
3	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOriginalFile();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]                      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	7	None	replace
4	[BUG]  [BUGGY]  String  orig  =  entry.getOriginalFile();  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol  entry	7	None	replace
5	[BUG]  [BUGGY]  String  orig  =  localExtraData.getOriginalFile();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  localExtraData.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  localExtraData.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getImmediateParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  String  orig  =  entry.getImmediateParent();  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol  entry	6	None	replace
8	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getImmediateParent();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	6	None	replace
9	[BUG]  [BUGGY]  String  orig  =  archive.getImmediateParent();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
10	[BUG]  [BUGGY]  String  orig  =  localExtraData.getImmediateParent();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  localExtraData.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  localExtraData.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
11	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOriginalName();	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalName()  +  File.separator;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalName()  +  File.separator;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalName()  +  File.separator;	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalName()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalName()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalName()  +  File.separatorChar;	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  String  orig  =  entry.getOriginalName();  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOriginalName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOriginalName();	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol  entry	1	None	replace
15	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalName()  +  fileNameLen;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalName()  +  fileNameLen;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalName()  +  fileNameLen;	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalFileName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOriginalFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOriginalFileName();	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
17	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  File.separator;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  File.separator;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalFileName()  +  File.separator;	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
18	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  fileNameLen;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  fileNameLen;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalFileName()  +  fileNameLen;	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
19	[BUG]  [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOriginalFileName()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOriginalFileName()  +  File.separatorChar;	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
20	[BUG]  [BUGGY]  String  orig  =  archive.getOriginalFileName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOriginalFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOriginalFileName();	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
21	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getQualifiedName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  String  orig  =  ze.getQualifiedName()  +  File.separator;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getQualifiedName()  +  File.separator;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getQualifiedName()  +  File.separator;	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
23	[BUG]  [BUGGY]  String  orig  =  ze.getQualifiedName()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getQualifiedName()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getQualifiedName()  +  File.separatorChar;	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
24	[BUG]  [BUGGY]  String  orig  =  entry.getQualifiedName();  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  entry	3	None	replace
25	[BUG]  [BUGGY]  String  orig  =  ze.getQualifiedName()  + "n ";  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getQualifiedName()  + "n ";  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getQualifiedName()  + "n ";	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
26	[BUG]  [BUGGY]  String  orig  =  archive.getOwnerFileName();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
27	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerFileName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
28	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerFileName()  +  File.separatorChar;	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
29	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  File.separator;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  File.separator;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerFileName()  +  File.separator;	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
30	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  fileNameLen;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerFileName()  +  fileNameLen;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerFileName()  +  fileNameLen;	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
31	[BUG]  [BUGGY]  String  orig  =  archiveName.getOwnerFileName();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archiveName.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archiveName.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
32	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwner();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
33	[BUG]  [BUGGY]  String  orig  =  archive.getOwner();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  String  orig  =  entry.getOwner();  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol  entry	2	None	replace
35	[BUG]  [BUGGY]  String  orig  =  localExtraData.getOwner();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  localExtraData.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  localExtraData.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
36	[BUG]  [BUGGY]  String  orig  =  name.getOwner();  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  name.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  name.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol  name	2	None	replace
37	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	8	None	replace
38	[BUG]  [BUGGY]  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  incompatible  types	8	None	replace
39	[BUG]  [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	Entry  entry  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
40	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);	      	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
41	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);  [CE]  cannot  find  symbol  fileName  [FE]                            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);	      	non-compiled	[CE]  cannot  find  symbol  fileName	8	None	replace
42	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);	      	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	8	None	replace
43	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  nc.name,  nc.comment);  [CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  nc.name,  nc.comment);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  nc.name,  nc.comment);	      	non-compiled	[CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;	8	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	add	String  orig  =  entriesWithoutUTF8Flag.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
45	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.toString();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
46	[BUG]  [BUGGY]  String  orig  =  entryEncoding.toString();  [CE]  cannot  find  symbol  entryEncoding  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.toString();	  String    orig    =    ze.toString();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	5	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString()  +  1;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	add	String  orig  =  ze.toString()  +  1;	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
48	[BUG]  [BUGGY]  String  orig  =  ze.toString()  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString()  +  1;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.toString()  +  1;	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archiveName.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	add	String  orig  =  archiveName.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
50	[BUG]  [BUGGY]  String  orig  =  archiveName.toString();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archiveName.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archiveName.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
51	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
52	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
53	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  lenToSkip;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  lenToSkip;  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  lenToSkip;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
54	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.remove(ze.getName());  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
55	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  return;  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  return;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
56	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  SHORT;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  SHORT;  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLen  +=  SHORT;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
57	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLength  +=  lenToSkip;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLength  +=  lenToSkip;  }  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  }  else  if(!orig.equals(ze.getName()))  {  nameMap.put(ze.getName(),  ze);  fileNameLength  +=  lenToSkip;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	add
58	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
59	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerName()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerName()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerName()  +  File.separatorChar;	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
60	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerName()  +  File.separator;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerName()  +  File.separator;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerName()  +  File.separator;	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
61	[BUG]  [BUGGY]  String  orig  =  archive.getOwnerName();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
62	[BUG]  [BUGGY]  String  orig  =  archiveName.getOwnerName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archiveName.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archiveName.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  String  orig  =  archive.getOwnerFile();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
64	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerFile();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
65	[BUG]  [BUGGY]  String  orig  =  entry.getOwnerFile();  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  entry	11	None	replace
66	[BUG]  [BUGGY]  String  orig  =  localExtraData.getOwnerFile();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  localExtraData.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  localExtraData.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
67	[BUG]  [BUGGY]  String  orig  =  ze.getOwnerFile()  +  File.separatorChar;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.getOwnerFile()  +  File.separatorChar;  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze.getOwnerFile()  +  File.separatorChar;	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
68	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOriginalFileName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOriginalFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOriginalFileName();	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	9	None	replace
69	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOwnerFileName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	10	None	replace
70	[BUG]  [BUGGY]  String  orig  =  archives.getOriginalFile();  [CE]  cannot  find  symbol  archives  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archives.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archives.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol  archives	7	None	replace
71	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOwnerName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	12	None	replace
72	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOwner();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	2	None	replace
73	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getOwner();  [CE]  cannot  find  symbol  entryEncoding  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	2	None	replace
74	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOwnerFile();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	11	None	replace
75	[BUG]  [BUGGY]  String  orig  =  archives.getOwnerFile();  [CE]  cannot  find  symbol  archives  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archives.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archives.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  archives	11	None	replace
76	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getOwnerFile();  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	11	None	replace
77	[BUG]  [BUGGY]  String  orig  =  archive.getQualifiedName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
78	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getQualifiedName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	3	None	replace
79	[BUG]  [BUGGY]  String  orig  =  archiveName.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archiveName.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archiveName.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
80	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.toString();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.toString();	  String    orig    =    ze.toString();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	5	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	add	String  orig  =  archive.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
82	[BUG]  [BUGGY]  String  orig  =  archive.toString();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.toString();	  String    orig    =    ze.toString();    	compilable	  [FE]  AssertionFailedError  	5	1	replace
83	[BUG]  [BUGGY]  String  orig  =  archive.getOriginalName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  archive.getOriginalName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  archive.getOriginalName();	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
84	[BUG]  [BUGGY]  String  orig  =  noUTF8Flag.getOriginalName();  [CE]  cannot  find  symbol  noUTF8Flag  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  noUTF8Flag.getOriginalName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  noUTF8Flag.getOriginalName();	  String    orig    =    ze.getOriginalName();    	non-compiled	[CE]  cannot  find  symbol  noUTF8Flag	1	None	replace
85	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getName());  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getName());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getName());	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
86	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getLocalFileName());  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getLocalFileName());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getLocalFileName());	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
87	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.get(ze));  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.get(ze));  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.get(ze));	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
88	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  ze.toString());  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  ze.toString());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  ze.toString());	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
89	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getClass().getName());  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getClass().getName());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getClass().getName());	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
90	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getValue());  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getValue());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag.getValue());	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
91	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag);  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString();  System.err.println( "UnicodeExtraFields: "  +  entriesWithoutUTF8Flag);	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
92	[BUG]  [BUGGY]  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	8	None	replace
93	[BUG]  [BUGGY]  NoUTF8Flag  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NoUTF8Flag  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NoUTF8Flag  ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
94	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.title);  [CE]  cannot  find  symbol  title  [FE]                        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.title);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.title);	      	non-compiled	[CE]  cannot  find  symbol  title	8	None	replace
95	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.fileNameLen);  [CE]  cannot  find  symbol  fileNameLen  [FE]                          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.fileNameLen);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.fileNameLen);	      	non-compiled	[CE]  cannot  find  symbol  fileNameLen	8	None	replace
96	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getImmediateParent();  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	6	None	replace
97	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getQualifiedName();  [CE]  cannot  find  symbol  entryEncoding  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getQualifiedName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getQualifiedName();	  String    orig    =    ze.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	3	None	replace
98	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getOriginalFile();  [CE]  cannot  find  symbol  entryEncoding  [FE]                  AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getOriginalFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getOriginalFile();	  String    orig    =    ze.getOriginalFile();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	7	None	replace
99	[BUG]  [BUGGY]  String  orig  =  entryEncoding.getOwnerName();  [CE]  cannot  find  symbol  entryEncoding  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entryEncoding.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entryEncoding.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	12	None	replace
100	[BUG]  [BUGGY]  String  orig  =  entry.getOwnerName();  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOwnerName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOwnerName();	  String    orig    =    ze.getOwnerName();    	non-compiled	[CE]  cannot  find  symbol  entry	12	None	replace
101	[BUG]  [BUGGY]  String  orig  =  this.entriesWithoutUTF8Flag.getImmediateParent();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  this.entriesWithoutUTF8Flag.getImmediateParent();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  this.entriesWithoutUTF8Flag.getImmediateParent();	  String    orig    =    ze.getImmediateParent();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	6	None	replace
102	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(z,  nc.name,  nc.comment);  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(z,  nc.name,  nc.comment);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(z,  nc.name,  nc.comment);	      	non-compiled	[CE]  cannot  find  symbol  z	8	None	replace
103	[BUG]  [BUGGY]  File  ze  =  entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  File  ze  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	File  ze  =  entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	8	None	replace
104	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  ze);  [CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(entriesWithoutUTF8Flag,  ze);	      	non-compiled	[CE]  method  setNameAndCommentFromExtraFields  in  class  ZipUtil  cannot  be  applied  to  given  types;	8	None	replace
105	[BUG]  [BUGGY]  String  orig  =  entry.getOriginalFileName();  [CE]  cannot  find  symbol  entry  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOriginalFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOriginalFileName();	  String    orig    =    ze.getOriginalFileName();    	non-compiled	[CE]  cannot  find  symbol  entry	9	None	replace
106	[BUG]  [BUGGY]  String  orig  =  entry.getOwnerFileName();  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entry.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entry.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  cannot  find  symbol  entry	10	None	replace
107	[BUG]  [BUGGY]  String  orig  =  ze,  archive.getOwnerFileName();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze,  archive.getOwnerFileName();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze,  archive.getOwnerFileName();	  String    orig    =    ze.getOwnerFileName();    	non-compiled	[CE]  ';'  expected	10	None	replace
108	[BUG]  [BUGGY]  String  orig  =  this.entriesWithoutUTF8Flag.getOwner();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  this.entriesWithoutUTF8Flag.getOwner();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  this.entriesWithoutUTF8Flag.getOwner();	  String    orig    =    ze.getOwner();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	2	None	replace
109	[BUG]  [BUGGY]  String  orig  =  ze,  archive.getOwnerFile();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze,  archive.getOwnerFile();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  ze,  archive.getOwnerFile();	  String    orig    =    ze.getOwnerFile();    	non-compiled	[CE]  ';'  expected	11	None	replace
110	[BUG]  [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.get(ze);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String  orig  =  entriesWithoutUTF8Flag.get(ze);	  String    orig    =    ze.toString();    	non-compiled	[CE]  incompatible  types	5	None	replace
111	[BUG]  [BUGGY]  String  orig  =  ze.toString();  Character  encoding  =  ze.toString();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  Character  encoding  =  ze.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    Character  encoding  =  ze.toString();	  	non-compiled	[CE]  incompatible  types	4	None	add
112	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ZE.toString();  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]      AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ZE.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ZE.toString();	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
113	[BUG]  [BUGGY]  String  orig  =  ze.toString();  Name  orig  =  ze.toString();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  Name  orig  =  ze.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    Name  orig  =  ze.toString();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
114	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  z.toString();  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]          AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  z.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  z.toString();	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
115	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.toString());  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.toString());	  	non-compiled	[CE]  ';'  expected	4	None	add
116	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  se.toString();  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]              AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  se.toString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  se.toString();	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
117	[BUG]  [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.ToString();  [CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                AssertionFailedError    [CONTEXT]    }  lenToSkip  -=  skipped;  }  byte[]  localExtraData  =  new  byte[extraFieldLen];  archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {    [BUGGY]  String  orig  =  ze.toString();  String  orig  =  ze.ToString();  [BUGGY]    NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);  if  (!orig.equals(ze.getName()))  {  nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	833	833	1	replace	String    orig    =    ze.toString();    String  orig  =  ze.ToString();	  	non-compiled	[CE]  variable  orig  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	4	None	add
